{"name": "引用节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5D8ED]\n\t(No symbol) [0x00007FF7EDD9F8E5]\n\t(No symbol) [0x00007FF7EDD9571F]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDD95036]\n\t(No symbol) [0x00007FF7EDDBECC0]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]", "trace": "self = <pageobject.program_page.ProgramPage object at 0x0000022F85678790>\n\n    def create_general_program(self):\n        \"\"\"\n        通用方法：创建一个普通节目\n        \"\"\"\n        try:\n            self.switch_to_program_management()\n            random_name = random.randint(1, 100)\n            random_program_name = \"test_横屏普通节目\" + str(random_name)\n            with step(\"点击创建节目\"):\n                self.click_create_program()\n            with step(\"输入节目名称（普通节目）\"):\n                self.input_program_name(random_program_name)\n    \n            with step( \"选择屏幕方向\"):\n                self.screen_direction(\"x\")\n    \n            try:\n                with step( \"选择分辨率\"):\n                    self.click_resolution()\n                    time.sleep(0.3)\n>                   self.choose_screen(\"1920x1080\")\n\npageobject\\program_page.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.program_page.ProgramPage object at 0x0000022F85678790>\nresolution = '1920x1080'\n\n    def choose_screen(self, resolution=\"1920x1080\"):\n        \"\"\"\n        创建节目时，选择不同的分辨率\n        :param resolution:\n        :return:\n        \"\"\"\n        if resolution == \"1920x1080\":\n>           self.click('by_xpath,//span[text()=\"1920x1080\"]')\n\npageobject\\program_page.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.program_page.ProgramPage object at 0x0000022F85678790>\nargs = 'by_xpath,//span[text()=\"1920x1080\"]'\n\n    def click(self, args):\n        # return self.driver.find_element(*args).click()\n        # return self.get_element(*args).click()\n        e1 = self.get_element(args)\n>       e1.click()\n\nbasepage\\base_page.py:247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d5f22950d0ad079acf7c6af2b0939421\", element=\"142AFBFF1098E16115105E3691A0BA3C_element_1039\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d5f22950d0ad079acf7c6af2b0939421\", element=\"142AFBFF1098E16115105E3691A0BA3C_element_1039\")>\ncommand = 'clickElement'\nparams = {'id': '142AFBFF1098E16115105E3691A0BA3C_element_1039'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d5f22950d0ad079acf7c6af2b0939421\")>\ndriver_command = 'clickElement', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022F8419C640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7EDE9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EDF378A2+54818]\nE       \t(No symbol) [0x00007FF7EDEA6AD2]\nE       \t(No symbol) [0x00007FF7EDD5D8ED]\nE       \t(No symbol) [0x00007FF7EDD9F8E5]\nE       \t(No symbol) [0x00007FF7EDD9571F]\nE       \t(No symbol) [0x00007FF7EDDBEAAA]\nE       \t(No symbol) [0x00007FF7EDD95036]\nE       \t(No symbol) [0x00007FF7EDDBECC0]\nE       \t(No symbol) [0x00007FF7EDDD75A2]\nE       \t(No symbol) [0x00007FF7EDDBE883]\nE       \t(No symbol) [0x00007FF7EDD93691]\nE       \t(No symbol) [0x00007FF7EDD948D4]\nE       \tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7EDFD3656+693206]\nE       \t(No symbol) [0x00007FF7EDEB1638]\nE       \t(No symbol) [0x00007FF7EDEAD944]\nE       \t(No symbol) [0x00007FF7EDEADA72]\nE       \t(No symbol) [0x00007FF7EDE9E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_program_management.TestProgramManagement object at 0x0000022FDB396B90>\n\n    @allure.title(\"引用节目\")\n    @pytest.mark.run(order=17)\n    def test_copy_program(self):\n        program_page = self.program_page\n        with step(\"先创建一个节目\"):\n            program_page.switch_to_program_management()\n>           program_page.create_general_program()\n\ntest_case\\test_program_management.py:469: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:89: in create_general_program\n    raise e\npageobject\\program_page.py:64: in create_general_program\n    self.choose_screen(\"1920x1080\")\npageobject\\program_page.py:200: in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022F8419C640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7EDE9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EDF378A2+54818]\nE       \t(No symbol) [0x00007FF7EDEA6AD2]\nE       \t(No symbol) [0x00007FF7EDD5D8ED]\nE       \t(No symbol) [0x00007FF7EDD9F8E5]\nE       \t(No symbol) [0x00007FF7EDD9571F]\nE       \t(No symbol) [0x00007FF7EDDBEAAA]\nE       \t(No symbol) [0x00007FF7EDD95036]\nE       \t(No symbol) [0x00007FF7EDDBECC0]\nE       \t(No symbol) [0x00007FF7EDDD75A2]\nE       \t(No symbol) [0x00007FF7EDDBE883]\nE       \t(No symbol) [0x00007FF7EDD93691]\nE       \t(No symbol) [0x00007FF7EDD948D4]\nE       \tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7EDFD3656+693206]\nE       \t(No symbol) [0x00007FF7EDEB1638]\nE       \t(No symbol) [0x00007FF7EDEAD944]\nE       \t(No symbol) [0x00007FF7EDEADA72]\nE       \t(No symbol) [0x00007FF7EDE9E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "steps": [{"name": "先创建一个节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5D8ED]\n\t(No symbol) [0x00007FF7EDD9F8E5]\n\t(No symbol) [0x00007FF7EDD9571F]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDD95036]\n\t(No symbol) [0x00007FF7EDDBECC0]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n", "trace": "  File \"D:\\ui\\test_case\\test_program_management.py\", line 469, in test_copy_program\n    program_page.create_general_program()\n  File \"D:\\ui\\pageobject\\program_page.py\", line 89, in create_general_program\n    raise e\n  File \"D:\\ui\\pageobject\\program_page.py\", line 64, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "点击创建节目", "status": "passed", "start": 1715395250105, "stop": 1715395251255}, {"name": "输入节目名称（普通节目）", "status": "passed", "start": 1715395251255, "stop": 1715395251963}, {"name": "选择屏幕方向", "status": "passed", "start": 1715395251963, "stop": 1715395252556}, {"name": "选择分辨率", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5D8ED]\n\t(No symbol) [0x00007FF7EDD9F8E5]\n\t(No symbol) [0x00007FF7EDD9571F]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDD95036]\n\t(No symbol) [0x00007FF7EDDBECC0]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n", "trace": "  File \"D:\\ui\\pageobject\\program_page.py\", line 58, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1715395252557, "stop": 1715395274036}, {"name": "选择分辨率", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5D8ED]\n\t(No symbol) [0x00007FF7EDD9F8E5]\n\t(No symbol) [0x00007FF7EDD9571F]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDD95036]\n\t(No symbol) [0x00007FF7EDDBECC0]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n", "trace": "  File \"D:\\ui\\pageobject\\program_page.py\", line 64, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1715395274353, "stop": 1715395295840}], "start": 1715395249015, "stop": 1715395295841}], "start": 1715395249015, "stop": 1715395295842, "uuid": "9ecb1ceb-e6fa-48b4-aeb2-293c343531d3", "historyId": "d1a85bb4ca1b830a30a37ab52c2f0e0b", "testCaseId": "d1a85bb4ca1b830a30a37ab52c2f0e0b", "fullName": "test_case.test_program_management.TestProgramManagement#test_copy_program", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "program management"}, {"name": "tag", "value": "run(order=17)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('program_management_set_up')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_program_management"}, {"name": "subSuite", "value": "TestProgramManagement"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "2156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_program_management"}]}