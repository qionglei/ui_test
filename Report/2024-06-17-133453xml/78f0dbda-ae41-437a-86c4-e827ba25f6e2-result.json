{"name": "新增一个竖屏的联屏节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: No node with given id found\n  (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AD5678A2+54818]\n\t(No symbol) [0x00007FF7AD4D6AD2]\n\t(No symbol) [0x00007FF7AD38DA3B]\n\t(No symbol) [0x00007FF7AD37C789]\n\t(No symbol) [0x00007FF7AD37A961]\n\t(No symbol) [0x00007FF7AD37B2EE]\n\t(No symbol) [0x00007FF7AD37B220]\n\t(No symbol) [0x00007FF7AD39B366]\n\t(No symbol) [0x00007FF7AD392859]\n\t(No symbol) [0x00007FF7AD391712]\n\t(No symbol) [0x00007FF7AD393F5F]\n\t(No symbol) [0x00007FF7AD394050]\n\t(No symbol) [0x00007FF7AD3D3DB1]\n\t(No symbol) [0x00007FF7AD3D34C6]\n\t(No symbol) [0x00007FF7AD40F958]\n\t(No symbol) [0x00007FF7AD3EEAAA]\n\t(No symbol) [0x00007FF7AD4075A2]\n\t(No symbol) [0x00007FF7AD3EE883]\n\t(No symbol) [0x00007FF7AD3C3691]\n\t(No symbol) [0x00007FF7AD3C48D4]\n\tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\n\tGetHandleVerifier [0x00007FF7AD921870+3962352]\n\tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\n\tGetHandleVerifier [0x00007FF7AD603656+693206]\n\t(No symbol) [0x00007FF7AD4E1638]\n\t(No symbol) [0x00007FF7AD4DD944]\n\t(No symbol) [0x00007FF7AD4DDA72]\n\t(No symbol) [0x00007FF7AD4CE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]", "trace": "self = <pageobject.program_page.ProgramPage object at 0x0000021D35577EB0>\n\n    def choose_media(self):\n        \"\"\"\n        选择素材\n        :return:\n        \"\"\"\n        # 判断对号是否可见,等待可见后，再进行操作\n        driver = self.driver\n        all_selectable = 'by_xpath,//div[@class=\"mask\"]/div/img'\n        # if self.element_exist(all_selectable):\n        #     wait = WebDriverWait(driver, 10)  # 等待最多10秒\n        #     click_element = wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"mask\"]/div/img')))\n        #     click_element.click()\n        # else:\n        #     pass\n        all_selectable_elements = self.get_elements(all_selectable)\n        first_selectable_element = all_selectable_elements[0]\n        try:\n            # self.click(first_selectable_element)\n>           ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\n\npageobject\\media_page.py:359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x0000021D36A9CA00>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x0000021D36A9D9F0>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"46e5e5ff31601caf1f81ffd7036e799d\")>\ndriver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': '9136A5E1601FCFA948D0439...0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021D365A65C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD39246D]\nE       \t(No symbol) [0x00007FF7AD393F5F]\nE       \t(No symbol) [0x00007FF7AD394050]\nE       \t(No symbol) [0x00007FF7AD3D3DB1]\nE       \t(No symbol) [0x00007FF7AD3D34C6]\nE       \t(No symbol) [0x00007FF7AD40F958]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_program_management.TestProgramManagement object at 0x0000021D0EAB2D10>\n\n    @allure.title(\"新增一个竖屏的联屏节目\")\n    @pytest.mark.run(order=7)\n    def test_create_relevance_program_hard(self):\n        program_page = self.program_page\n        program_page.refresh()\n        # 联屏节目随机名称\n        ran_int = random.randint(100, 999)\n        relevance_program_name = \"test_联屏竖屏_\" + str(ran_int)\n    \n        #设置窗口最大化\n        current_win_size = program_page.get_window_size()\n        program_page.maxsize_window()\n    \n        # 行、列随机\n        randow_row = str(random.randint(1, 5))\n        randow_col = str(random.randint(1, 4))\n        with step(\"点击创建节目\"):\n            program_page.switch_to_program_management()\n            program_page.click_create_program()\n    \n        with step(\"切换到联屏节目tab上\"):\n            program_page.relevance_program_tab()\n    \n        with step(\"输入联屏节目的节目名称\"):\n            program_page.input_program_name(relevance_program_name)\n    \n        with step(\"输入屏幕组合行和列值\"):\n            # time.sleep(5)\n            program_page.row_numbers(randow_row)\n            time.sleep(0.5)\n            program_page.col_numbers(randow_col)\n    \n        with step(\"切换到竖屏tab上\"):\n            program_page.screen_direction(\"y\")\n    \n        time.sleep(2)\n        with step(\"创建联屏节目，点击选择素材\"):\n            program_page.choose_relevance_media()\n    \n        #先判断暂无数据是否存在，如果存在，就进行素材上传\n        no_media_locator = 'by_xpath,//div[@class=\"content\"]/div[@class=\"empty-box\"]'\n        no_media_ele  = program_page.get_element(no_media_locator)\n        if no_media_ele:\n            program_page.upload_media()\n    \n        # #先判断是不是有素材：\n        # media_List = MediaList()\n        # list_media , folder_ids = media_List.get_media_list=()\n        # print(\"当前列表为:\",list_media)\n        # if not list_media:\n        #     with step(\"上传一个素材\"):\n        #         program_page.upload_media()\n    \n        with step(\"选择一个素材\"):\n            program_page.hover_to_media()\n>           program_page.choose_media()\n\ntest_case\\test_program_management.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:365: in choose_media\n    ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021D365A65C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: No node with given id found\\...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: No node with given id found\nE         (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD37C789]\nE       \t(No symbol) [0x00007FF7AD37A961]\nE       \t(No symbol) [0x00007FF7AD37B2EE]\nE       \t(No symbol) [0x00007FF7AD37B220]\nE       \t(No symbol) [0x00007FF7AD39B366]\nE       \t(No symbol) [0x00007FF7AD392859]\nE       \t(No symbol) [0x00007FF7AD391712]\nE       \t(No symbol) [0x00007FF7AD393F5F]\nE       \t(No symbol) [0x00007FF7AD394050]\nE       \t(No symbol) [0x00007FF7AD3D3DB1]\nE       \t(No symbol) [0x00007FF7AD3D34C6]\nE       \t(No symbol) [0x00007FF7AD40F958]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "steps": [{"name": "点击创建节目", "status": "passed", "start": 1718602605079, "stop": 1718602605317}, {"name": "切换到联屏节目tab上", "status": "passed", "start": 1718602605317, "stop": 1718602605425}, {"name": "输入联屏节目的节目名称", "status": "passed", "start": 1718602605425, "stop": 1718602605635}, {"name": "输入屏幕组合行和列值", "status": "passed", "start": 1718602605636, "stop": 1718602606435}, {"name": "切换到竖屏tab上", "status": "passed", "start": 1718602606435, "stop": 1718602606492}, {"name": "创建联屏节目，点击选择素材", "status": "passed", "start": 1718602608494, "stop": 1718602608568}, {"name": "点击上传按钮", "status": "passed", "start": 1718602609040, "stop": 1718602609636}, {"name": "进行文件上传", "status": "passed", "start": 1718602609636, "stop": 1718602616687}, {"name": "当进度为100%时，则关闭上传弹框", "status": "passed", "start": 1718602616687, "stop": 1718602618765}, {"name": "选择一个素材", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: No node with given id found\n  (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AD5678A2+54818]\n\t(No symbol) [0x00007FF7AD4D6AD2]\n\t(No symbol) [0x00007FF7AD38DA3B]\n\t(No symbol) [0x00007FF7AD37C789]\n\t(No symbol) [0x00007FF7AD37A961]\n\t(No symbol) [0x00007FF7AD37B2EE]\n\t(No symbol) [0x00007FF7AD37B220]\n\t(No symbol) [0x00007FF7AD39B366]\n\t(No symbol) [0x00007FF7AD392859]\n\t(No symbol) [0x00007FF7AD391712]\n\t(No symbol) [0x00007FF7AD393F5F]\n\t(No symbol) [0x00007FF7AD394050]\n\t(No symbol) [0x00007FF7AD3D3DB1]\n\t(No symbol) [0x00007FF7AD3D34C6]\n\t(No symbol) [0x00007FF7AD40F958]\n\t(No symbol) [0x00007FF7AD3EEAAA]\n\t(No symbol) [0x00007FF7AD4075A2]\n\t(No symbol) [0x00007FF7AD3EE883]\n\t(No symbol) [0x00007FF7AD3C3691]\n\t(No symbol) [0x00007FF7AD3C48D4]\n\tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\n\tGetHandleVerifier [0x00007FF7AD921870+3962352]\n\tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\n\tGetHandleVerifier [0x00007FF7AD603656+693206]\n\t(No symbol) [0x00007FF7AD4E1638]\n\t(No symbol) [0x00007FF7AD4DD944]\n\t(No symbol) [0x00007FF7AD4DDA72]\n\t(No symbol) [0x00007FF7AD4CE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_program_management.py\", line 253, in test_create_relevance_program_hard\n    program_page.choose_media()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 365, in choose_media\n    ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "点击上传按钮", "status": "passed", "start": 1718602621198, "stop": 1718602621769}, {"name": "进行文件上传", "status": "passed", "start": 1718602621769, "stop": 1718602628814}, {"name": "当进度为100%时，则关闭上传弹框", "status": "passed", "start": 1718602628814, "stop": 1718602630956}], "start": 1718602618880, "stop": 1718602630961}], "start": 1718602604478, "stop": 1718602630971, "uuid": "871fe4a5-8663-4faf-a1b5-314a16bf6641", "historyId": "eb851a59db0459b9a60a4a7b03a2ee85", "testCaseId": "eb851a59db0459b9a60a4a7b03a2ee85", "fullName": "test_case.test_program_management.TestProgramManagement#test_create_relevance_program_hard", "labels": [{"name": "feature", "value": "program management"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "run(order=7)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('program_management_set_up')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_program_management"}, {"name": "subSuite", "value": "TestProgramManagement"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "24736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_program_management"}]}