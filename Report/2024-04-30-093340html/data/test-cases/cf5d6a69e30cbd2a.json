{"uid":"cf5d6a69e30cbd2a","name":"节目编排-选节目-切换到选择策略弹框上","fullName":"test_case.test_release_management.TestReleaseManagemen_2#test_switch_to_choose_terminal","historyId":"1cdb47e59375e3107a55ba862c45f4d2","time":{"start":1714441836699,"stop":1714441870086,"duration":33387},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9D8ED]\n\t(No symbol) [0x00007FF6CFBDF8E5]\n\t(No symbol) [0x00007FF6CFBD571F]\n\t(No symbol) [0x00007FF6CFBFEAAA]\n\t(No symbol) [0x00007FF6CFBD5036]\n\t(No symbol) [0x00007FF6CFBFECC0]\n\t(No symbol) [0x00007FF6CFC175A2]\n\t(No symbol) [0x00007FF6CFBFE883]\n\t(No symbol) [0x00007FF6CFBD3691]\n\t(No symbol) [0x00007FF6CFBD48D4]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFCED944]\n\t(No symbol) [0x00007FF6CFCEDA72]\n\t(No symbol) [0x00007FF6CFCDE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseManagemen_2 object at 0x00000281B15DA080>\n\n    @pytest.mark.run(order=39)\n    @allure.title(\"节目编排-选节目-切换到选择策略弹框上\")\n    def test_switch_to_choose_terminal(self):\n    \n        release_page = self.release_page\n        release_page.refresh()\n        with step('点击节目编排'):\n            release_page.switch_to_release_management()\n            release_page.program_edit()\n    \n        time.sleep(0.5)\n        with step(\"在节目编排的弹框上面，点击选择策略按钮\"):\n>           release_page.switch_to_selection_strategy()\n\ntest_case\\test_release_management.py:1123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:218: in switch_to_selection_strategy\n    self.click(switch_to_selection_strategy)\nbasepage\\base_page.py:235: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000281D8C3EBF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6CFCDE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CFD778A2+54818]\nE       \t(No symbol) [0x00007FF6CFCE6AD2]\nE       \t(No symbol) [0x00007FF6CFB9D8ED]\nE       \t(No symbol) [0x00007FF6CFBDF8E5]\nE       \t(No symbol) [0x00007FF6CFBD571F]\nE       \t(No symbol) [0x00007FF6CFBFEAAA]\nE       \t(No symbol) [0x00007FF6CFBD5036]\nE       \t(No symbol) [0x00007FF6CFBFECC0]\nE       \t(No symbol) [0x00007FF6CFC175A2]\nE       \t(No symbol) [0x00007FF6CFBFE883]\nE       \t(No symbol) [0x00007FF6CFBD3691]\nE       \t(No symbol) [0x00007FF6CFBD48D4]\nE       \tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6D0131870+3962352]\nE       \tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CFE13656+693206]\nE       \t(No symbol) [0x00007FF6CFCF1638]\nE       \t(No symbol) [0x00007FF6CFCED944]\nE       \t(No symbol) [0x00007FF6CFCEDA72]\nE       \t(No symbol) [0x00007FF6CFCDE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1714440822220,"stop":1714440834619,"duration":12399},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"env","time":{"start":1714440822220,"stop":1714440822220,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1714441160486,"stop":1714441192298,"duration":31812},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"release_page","time":{"start":1714441266963,"stop":1714441266963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9D8ED]\n\t(No symbol) [0x00007FF6CFBDF8E5]\n\t(No symbol) [0x00007FF6CFBD571F]\n\t(No symbol) [0x00007FF6CFBFEAAA]\n\t(No symbol) [0x00007FF6CFBD5036]\n\t(No symbol) [0x00007FF6CFBFECC0]\n\t(No symbol) [0x00007FF6CFC175A2]\n\t(No symbol) [0x00007FF6CFBFE883]\n\t(No symbol) [0x00007FF6CFBD3691]\n\t(No symbol) [0x00007FF6CFBD48D4]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFCED944]\n\t(No symbol) [0x00007FF6CFCEDA72]\n\t(No symbol) [0x00007FF6CFCDE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseManagemen_2 object at 0x00000281B15DA080>\n\n    @pytest.mark.run(order=39)\n    @allure.title(\"节目编排-选节目-切换到选择策略弹框上\")\n    def test_switch_to_choose_terminal(self):\n    \n        release_page = self.release_page\n        release_page.refresh()\n        with step('点击节目编排'):\n            release_page.switch_to_release_management()\n            release_page.program_edit()\n    \n        time.sleep(0.5)\n        with step(\"在节目编排的弹框上面，点击选择策略按钮\"):\n>           release_page.switch_to_selection_strategy()\n\ntest_case\\test_release_management.py:1123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:218: in switch_to_selection_strategy\n    self.click(switch_to_selection_strategy)\nbasepage\\base_page.py:235: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000281D8C3EBF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6CFCDE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CFD778A2+54818]\nE       \t(No symbol) [0x00007FF6CFCE6AD2]\nE       \t(No symbol) [0x00007FF6CFB9D8ED]\nE       \t(No symbol) [0x00007FF6CFBDF8E5]\nE       \t(No symbol) [0x00007FF6CFBD571F]\nE       \t(No symbol) [0x00007FF6CFBFEAAA]\nE       \t(No symbol) [0x00007FF6CFBD5036]\nE       \t(No symbol) [0x00007FF6CFBFECC0]\nE       \t(No symbol) [0x00007FF6CFC175A2]\nE       \t(No symbol) [0x00007FF6CFBFE883]\nE       \t(No symbol) [0x00007FF6CFBD3691]\nE       \t(No symbol) [0x00007FF6CFBD48D4]\nE       \tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6D0131870+3962352]\nE       \tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CFE13656+693206]\nE       \t(No symbol) [0x00007FF6CFCF1638]\nE       \t(No symbol) [0x00007FF6CFCED944]\nE       \t(No symbol) [0x00007FF6CFCEDA72]\nE       \t(No symbol) [0x00007FF6CFCDE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"点击节目编排","time":{"start":1714441836753,"stop":1714441848973,"duration":12220},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"在节目编排的弹框上面，点击选择策略按钮","time":{"start":1714441849476,"stop":1714441870086,"duration":20610},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9D8ED]\n\t(No symbol) [0x00007FF6CFBDF8E5]\n\t(No symbol) [0x00007FF6CFBD571F]\n\t(No symbol) [0x00007FF6CFBFEAAA]\n\t(No symbol) [0x00007FF6CFBD5036]\n\t(No symbol) [0x00007FF6CFBFECC0]\n\t(No symbol) [0x00007FF6CFC175A2]\n\t(No symbol) [0x00007FF6CFBFE883]\n\t(No symbol) [0x00007FF6CFBD3691]\n\t(No symbol) [0x00007FF6CFBD48D4]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFCED944]\n\t(No symbol) [0x00007FF6CFCEDA72]\n\t(No symbol) [0x00007FF6CFCDE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_release_management.py\", line 1123, in test_switch_to_choose_terminal\n    release_page.switch_to_selection_strategy()\n  File \"D:\\ui\\pageobject\\release_page.py\", line 218, in switch_to_selection_strategy\n    self.click(switch_to_selection_strategy)\n  File \"D:\\ui\\basepage\\base_page.py\", line 235, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2},"afterStages":[{"name":"release_page::0","time":{"start":1714441926543,"stop":1714441926543,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1714442484755,"stop":1714442485256,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1714442485256,"stop":1714442485554,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"release management2"},{"name":"tag","value":"run(order=39)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseManagemen_2"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"23728-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=39)"]},"source":"cf5d6a69e30cbd2a.json","parameterValues":[]}