{"uid":"657fd7d1c74b6edc","name":"节目单预览","fullName":"test_case.test_play_bill.TestPlayBill#test_preview_play_bill","historyId":"b9ee214bdb2525fd08dd7d1534ec4803","time":{"start":1715159551504,"stop":1715159551504,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5DA3B]\n\t(No symbol) [0x00007FF7EDD6246D]\n\t(No symbol) [0x00007FF7EDD63F5F]\n\t(No symbol) [0x00007FF7EDD64050]\n\t(No symbol) [0x00007FF7EDDA3DB1]\n\t(No symbol) [0x00007FF7EDDA34C6]\n\t(No symbol) [0x00007FF7EDDDF958]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9f79a85d935e0b3004c2439074528662\")>\n\n    @pytest.fixture(scope='class')\n    def init_play_bill(driver):\n        \"\"\"\n        初始化节目单，如果没有节目单，则创建普通节目，进行发布操作\n        以达到环境初始化的作用\n        \"\"\"\n        try:\n            play_bill = PlayBill()\n            program_page = ProgramPage(driver)\n            release_page = ReleasePage(driver)\n            terminal_page = TerminalPage(driver)\n            terminal_list = Terminal_List()\n            program_list = ProgramList()\n            all_play_bill_ids = play_bill.get_play_bill_ids()\n            if not all_play_bill_ids:\n                all_program_ids = program_list.get_program_list_ids()\n                all_terminal_list = terminal_list.get_terminal_list()\n                if not all_terminal_list:\n>                   terminal_page.add_new_terminal()\n\ntest_case\\test_play_bill.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:60: in add_new_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:145: in confirm_bind_terminal\n    self.terminal_org_more()\npageobject\\terminal_page.py:104: in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017AFEA87D30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF7EDE9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EDF378A2+54818]\nE       \t(No symbol) [0x00007FF7EDEA6AD2]\nE       \t(No symbol) [0x00007FF7EDD5DA3B]\nE       \t(No symbol) [0x00007FF7EDD6246D]\nE       \t(No symbol) [0x00007FF7EDD63F5F]\nE       \t(No symbol) [0x00007FF7EDD64050]\nE       \t(No symbol) [0x00007FF7EDDA3DB1]\nE       \t(No symbol) [0x00007FF7EDDA34C6]\nE       \t(No symbol) [0x00007FF7EDDDF958]\nE       \t(No symbol) [0x00007FF7EDDBEAAA]\nE       \t(No symbol) [0x00007FF7EDDD75A2]\nE       \t(No symbol) [0x00007FF7EDDBE883]\nE       \t(No symbol) [0x00007FF7EDD93691]\nE       \t(No symbol) [0x00007FF7EDD948D4]\nE       \tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7EDFD3656+693206]\nE       \t(No symbol) [0x00007FF7EDEB1638]\nE       \t(No symbol) [0x00007FF7EDEAD944]\nE       \t(No symbol) [0x00007FF7EDEADA72]\nE       \t(No symbol) [0x00007FF7EDE9E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1715159535458,"stop":1715159535474,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1715159535474,"stop":1715159544292,"duration":8818},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1715159551504,"stop":1715159560316,"duration":8812},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"release_page","time":{"start":1715159560316,"stop":1715159560316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"play_bill_page","time":{"start":1715159560316,"stop":1715159560316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"init_play_bill","time":{"start":1715159560316,"stop":1715159618740,"duration":58424},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5DA3B]\n\t(No symbol) [0x00007FF7EDD6246D]\n\t(No symbol) [0x00007FF7EDD63F5F]\n\t(No symbol) [0x00007FF7EDD64050]\n\t(No symbol) [0x00007FF7EDDA3DB1]\n\t(No symbol) [0x00007FF7EDDA34C6]\n\t(No symbol) [0x00007FF7EDDDF958]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 1130, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 909, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"D:\\ui\\test_case\\test_play_bill.py\", line 52, in init_play_bill\n    terminal_page.add_new_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 60, in add_new_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 145, in confirm_bind_terminal\n    self.terminal_org_more()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 104, in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"点击设备接入","time":{"start":1715159562284,"stop":1715159563503,"duration":1219},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备sn码","time":{"start":1715159564016,"stop":1715159564754,"duration":738},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备名称","time":{"start":1715159564754,"stop":1715159565407,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"先点击所属机构","time":{"start":1715159565407,"stop":1715159566036,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框展开组织架构","time":{"start":1715159566036,"stop":1715159573964,"duration":7928},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框进行选择","time":{"start":1715159574468,"stop":1715159595496,"duration":21028},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击保存按钮","time":{"start":1715159596006,"stop":1715159618732,"duration":22726},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5DA3B]\n\t(No symbol) [0x00007FF7EDD6246D]\n\t(No symbol) [0x00007FF7EDD63F5F]\n\t(No symbol) [0x00007FF7EDD64050]\n\t(No symbol) [0x00007FF7EDDA3DB1]\n\t(No symbol) [0x00007FF7EDDA34C6]\n\t(No symbol) [0x00007FF7EDDDF958]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\pageobject\\terminal_page.py\", line 60, in add_new_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 145, in confirm_bind_terminal\n    self.terminal_org_more()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 104, in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"generate_one_program","time":{"start":1715159889041,"stop":1715159889315,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5DA3B]\n\t(No symbol) [0x00007FF7EDD6246D]\n\t(No symbol) [0x00007FF7EDD63F5F]\n\t(No symbol) [0x00007FF7EDD64050]\n\t(No symbol) [0x00007FF7EDDA3DB1]\n\t(No symbol) [0x00007FF7EDDA34C6]\n\t(No symbol) [0x00007FF7EDDDF958]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9f79a85d935e0b3004c2439074528662\")>\n\n    @pytest.fixture(scope='class')\n    def init_play_bill(driver):\n        \"\"\"\n        初始化节目单，如果没有节目单，则创建普通节目，进行发布操作\n        以达到环境初始化的作用\n        \"\"\"\n        try:\n            play_bill = PlayBill()\n            program_page = ProgramPage(driver)\n            release_page = ReleasePage(driver)\n            terminal_page = TerminalPage(driver)\n            terminal_list = Terminal_List()\n            program_list = ProgramList()\n            all_play_bill_ids = play_bill.get_play_bill_ids()\n            if not all_play_bill_ids:\n                all_program_ids = program_list.get_program_list_ids()\n                all_terminal_list = terminal_list.get_terminal_list()\n                if not all_terminal_list:\n>                   terminal_page.add_new_terminal()\n\ntest_case\\test_play_bill.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:60: in add_new_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:145: in confirm_bind_terminal\n    self.terminal_org_more()\npageobject\\terminal_page.py:104: in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017AFEA87D30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF7EDE9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EDF378A2+54818]\nE       \t(No symbol) [0x00007FF7EDEA6AD2]\nE       \t(No symbol) [0x00007FF7EDD5DA3B]\nE       \t(No symbol) [0x00007FF7EDD6246D]\nE       \t(No symbol) [0x00007FF7EDD63F5F]\nE       \t(No symbol) [0x00007FF7EDD64050]\nE       \t(No symbol) [0x00007FF7EDDA3DB1]\nE       \t(No symbol) [0x00007FF7EDDA34C6]\nE       \t(No symbol) [0x00007FF7EDDDF958]\nE       \t(No symbol) [0x00007FF7EDDBEAAA]\nE       \t(No symbol) [0x00007FF7EDDD75A2]\nE       \t(No symbol) [0x00007FF7EDDBE883]\nE       \t(No symbol) [0x00007FF7EDD93691]\nE       \t(No symbol) [0x00007FF7EDD948D4]\nE       \tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7EDFD3656+693206]\nE       \t(No symbol) [0x00007FF7EDEB1638]\nE       \t(No symbol) [0x00007FF7EDEAD944]\nE       \t(No symbol) [0x00007FF7EDEADA72]\nE       \t(No symbol) [0x00007FF7EDE9E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[],"attachments":[{"uid":"c88f4cc3dd60054d","name":"log","source":"c88f4cc3dd60054d.txt","type":"text/plain","size":392}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"play_bill_page::0","time":{"start":1715159618948,"stop":1715159618948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"release_page::0","time":{"start":1715159618952,"stop":1715159618952,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1715161643760,"stop":1715161646408,"duration":2648},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1715161649756,"stop":1715161652414,"duration":2658},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"play bill list"},{"name":"tag","value":"@pytest.mark.usefixtures('generate_one_program')"},{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_play_bill"},{"name":"subSuite","value":"TestPlayBill"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"46136-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_play_bill"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=1)","@pytest.mark.usefixtures('generate_one_program')"]},"source":"657fd7d1c74b6edc.json","parameterValues":[]}