{"name": "取消节目单失效", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF723B578A2+54818]\n\t(No symbol) [0x00007FF723AC6AD2]\n\t(No symbol) [0x00007FF72397DA3B]\n\t(No symbol) [0x00007FF7239BE4FC]\n\t(No symbol) [0x00007FF7239BE67C]\n\t(No symbol) [0x00007FF7239F9627]\n\t(No symbol) [0x00007FF7239DEAEF]\n\t(No symbol) [0x00007FF7239F75A2]\n\t(No symbol) [0x00007FF7239DE883]\n\t(No symbol) [0x00007FF7239B3691]\n\t(No symbol) [0x00007FF7239B48D4]\n\tGetHandleVerifier [0x00007FF723EBB9A2+3610402]\n\tGetHandleVerifier [0x00007FF723F11870+3962352]\n\tGetHandleVerifier [0x00007FF723F09D5F+3930847]\n\tGetHandleVerifier [0x00007FF723BF3656+693206]\n\t(No symbol) [0x00007FF723AD1638]\n\t(No symbol) [0x00007FF723ACD944]\n\t(No symbol) [0x00007FF723ACDA72]\n\t(No symbol) [0x00007FF723ABE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c62a54dfadaab1f0d028afafa40d997\")>\nrelease_page = <pageobject.release_page.ReleasePage object at 0x0000013D8A1D60B0>\n\n    @pytest.fixture(scope=\"function\")\n    def generate_one_program(driver,release_page):\n        \"\"\"\n        1、判断素材中心是不是有素材，有就先清空，再上传，再生成节目\n        2、没有就直接上传，再生成节目\n        :return:\n        \"\"\"\n    \n        media_list = MediaList()\n        mediapage = MediaPage(driver)\n        media_ids, folder_ids = media_list.get_media_list()\n        programlist = ProgramList()\n        program_names = programlist.get_program_list_names()\n    \n        if program_names == []:\n            if media_ids == []:\n                # 素材上传\n                time.sleep(0.3)\n                mediapage.refresh()\n                mediapage.switch_to_media_center()\n                mediapage.upload_media()\n                time.sleep(2)\n                # 素材发布\n                # media_ids, folder_ids = media_list.get_media_list()\n                mediapage.hover_to_media()\n                mediapage.choose_media()\n                mediapage.multi_release()\n                #选择设备，然后发布节目\n    \n                with step(\"点击选设备\"):\n                    release_page.choose_terminal()\n    \n                with step(\"选择一个设备\"):\n                    # release_page.choose_one_terminal()\n    \n                    # release_page.choose_terminal()\n                    release_page.select_all_terminals()\n                    # release_page.confirm_terminal_button()\n                    # release_page.click_system_icon()\n    \n                    time.sleep(6)\n                with step(\"选完设备后，点击确定\"):\n                    # release_page.confirm_release_strategy()\n                    release_page.confirm_terminal_button()\n                    release_page.click_system_icon()\n    \n                with step(\"发布普通节目\"):\n                    release_page.release_general_program()\n    \n            else:\n                media_list.delete_all_media()\n                mediapage.switch_to_media_center()\n>               mediapage.upload_media()\n\ntest_case\\test_play_bill.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:47: in upload_media\n    self.click_up_load()\npageobject\\media_page.py:106: in click_up_load\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9c62a54dfadaab1f0d028afafa40d997\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000013DE2CEA560>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF723B578A2+54818]\nE       \t(No symbol) [0x00007FF723AC6AD2]\nE       \t(No symbol) [0x00007FF72397DA3B]\nE       \t(No symbol) [0x00007FF7239BE4FC]\nE       \t(No symbol) [0x00007FF7239BE67C]\nE       \t(No symbol) [0x00007FF7239F9627]\nE       \t(No symbol) [0x00007FF7239DEAEF]\nE       \t(No symbol) [0x00007FF7239F75A2]\nE       \t(No symbol) [0x00007FF7239DE883]\nE       \t(No symbol) [0x00007FF7239B3691]\nE       \t(No symbol) [0x00007FF7239B48D4]\nE       \tGetHandleVerifier [0x00007FF723EBB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF723F11870+3962352]\nE       \tGetHandleVerifier [0x00007FF723F09D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF723BF3656+693206]\nE       \t(No symbol) [0x00007FF723AD1638]\nE       \t(No symbol) [0x00007FF723ACD944]\nE       \t(No symbol) [0x00007FF723ACDA72]\nE       \t(No symbol) [0x00007FF723ABE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1718586799541, "stop": 1718586799541, "uuid": "368dd6ba-80de-432e-9beb-f4bc0e7b9976", "historyId": "b88355229981ee225e20f37442cc9ec8", "testCaseId": "b88355229981ee225e20f37442cc9ec8", "fullName": "test_case.test_play_bill.TestPlayBill#test_cancel_expiry_play_bill", "labels": [{"name": "feature", "value": "play bill list"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "@pytest.mark.usefixtures('generate_one_program')"}, {"name": "tag", "value": "run(order=7)"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_play_bill"}, {"name": "subSuite", "value": "TestPlayBill"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "19432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_play_bill"}]}