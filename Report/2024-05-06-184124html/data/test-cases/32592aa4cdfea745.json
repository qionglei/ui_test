{"uid":"32592aa4cdfea745","name":"筛选操作日志：昨天、今天","fullName":"test_case.test_system_management.TestSystemManagement#test_filter_operation_log","historyId":"baa666e1aca5b85e5b7a728f98020ac6","time":{"start":1714992971832,"stop":1714992971832,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2DA3B]\n\t(No symbol) [0x00007FF6ECF1BA97]\n\t(No symbol) [0x00007FF6ECF1B710]\n\t(No symbol) [0x00007FF6ECF2F931]\n\t(No symbol) [0x00007FF6ECFA6C9F]\n\t(No symbol) [0x00007FF6ECF8E883]\n\t(No symbol) [0x00007FF6ECF63691]\n\t(No symbol) [0x00007FF6ECF648D4]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ED07D944]\n\t(No symbol) [0x00007FF6ED07DA72]\n\t(No symbol) [0x00007FF6ED06E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_system_management.TestSystemManagement object at 0x0000020373D5A0B0>\n\n    @allure.title(\"筛选操作日志：昨天、今天\")\n    def test_filter_operation_log(self):\n        system_page = self.system_page\n>       system_page.refresh()\n\ntest_case\\test_system_management.py:215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbasepage\\base_page.py:39: in refresh\n    self.driver.refresh()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:571: in refresh\n    self.execute(Command.REFRESH)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002031A7F6470>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF6ED06E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6ED1078A2+54818]\nE       \t(No symbol) [0x00007FF6ED076AD2]\nE       \t(No symbol) [0x00007FF6ECF2DA3B]\nE       \t(No symbol) [0x00007FF6ECF1BA97]\nE       \t(No symbol) [0x00007FF6ECF1B710]\nE       \t(No symbol) [0x00007FF6ECF2F931]\nE       \t(No symbol) [0x00007FF6ECFA6C9F]\nE       \t(No symbol) [0x00007FF6ECF8E883]\nE       \t(No symbol) [0x00007FF6ECF63691]\nE       \t(No symbol) [0x00007FF6ECF648D4]\nE       \tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\nE       \tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6ED1A3656+693206]\nE       \t(No symbol) [0x00007FF6ED081638]\nE       \t(No symbol) [0x00007FF6ED07D944]\nE       \t(No symbol) [0x00007FF6ED07DA72]\nE       \t(No symbol) [0x00007FF6ED06E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1714992087297,"stop":1714992099981,"duration":12684},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"env","time":{"start":1714992087297,"stop":1714992087297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"system_page","time":{"start":1714992971830,"stop":1714992971830,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"system_page::0","time":{"start":1714992971848,"stop":1714992971848,"duration":0},"status":"broken","statusMessage":"requests.exceptions.ConnectionError: HTTPSConnectionPool(host='test.hkciot.com', port=443): Max retries exceeded with url: /cuteview/org/get?cropId=1751805517940535298 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x000002031AB0AA70>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed'))\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\ui\\test_case\\test_system_management.py\", line 20, in system_page\n    all_org_ids = org_list.get_org_ids()\n  File \"D:\\ui\\common\\set_up_org.py\", line 23, in get_org_ids\n    reponse = requests.get(url=base_url, headers=self.headers, params=body)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\sessions.py\", line 587, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\sessions.py\", line 701, in send\n    r = adapter.send(request, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\adapters.py\", line 565, in send\n    raise ConnectionError(e, request=request)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0},{"name":"driver::0","time":{"start":1714992971911,"stop":1714992971911,"duration":0},"status":"broken","statusMessage":"pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'rm-wz9vq722u8axcvo06oo.mysql.rds.aliyuncs.com' ([Errno 11001] getaddrinfo failed)\")\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\ui\\conftest.py\", line 36, in driver\n    sql_execute()\n  File \"D:\\ui\\data_clean.py\", line 8, in sql_execute\n    connection = pymysql.connect(host=host, port=3391, user='hkc_cv_user', password='Hkc285$$', database='hkc_cv')\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pymysql\\connections.py\", line 358, in __init__\n    self.connect()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pymysql\\connections.py\", line 711, in connect\n    raise exc\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0}],"labels":[{"name":"feature","value":"system management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"@pytest.mark.usefixtures('system_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_system_management"},{"name":"subSuite","value":"TestSystemManagement"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"26752-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_system_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('system_page')"]},"source":"32592aa4cdfea745.json","parameterValues":[]}