{"uid":"5ad023633bf6b097","name":"在选设备抽屉，切换到‘设备分组’tab上","fullName":"test_case.test_release_management.TestReleaseStrategy#test_switch_terminal_group","historyId":"5eb0fc6ef29723c3fbec6ce72cea512a","time":{"start":1720073284618,"stop":1720073286307,"duration":1689},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-06d105f8=\"\" class=\"step-name\">...</div> is not clickable at point (259, 394). Other element would receive the click: <div class=\"el-scrollbar__wrap el-scrollbar__wrap--hidden-default\" style=\"height: 100%;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF68A8278A2+54818]\n\t(No symbol) [0x00007FF68A796AD2]\n\t(No symbol) [0x00007FF68A64DA3B]\n\t(No symbol) [0x00007FF68A6947CB]\n\t(No symbol) [0x00007FF68A692B99]\n\t(No symbol) [0x00007FF68A690968]\n\t(No symbol) [0x00007FF68A68FA23]\n\t(No symbol) [0x00007FF68A68571F]\n\t(No symbol) [0x00007FF68A6AEAAA]\n\t(No symbol) [0x00007FF68A685036]\n\t(No symbol) [0x00007FF68A6AECC0]\n\t(No symbol) [0x00007FF68A6C75A2]\n\t(No symbol) [0x00007FF68A6AE883]\n\t(No symbol) [0x00007FF68A683691]\n\t(No symbol) [0x00007FF68A6848D4]\n\tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\n\tGetHandleVerifier [0x00007FF68ABE1870+3962352]\n\tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\n\tGetHandleVerifier [0x00007FF68A8C3656+693206]\n\t(No symbol) [0x00007FF68A7A1638]\n\t(No symbol) [0x00007FF68A79D944]\n\t(No symbol) [0x00007FF68A79DA72]\n\t(No symbol) [0x00007FF68A78E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x0000029BE9DFFA60>\n\n    @allure.title(\"在选设备抽屉，切换到‘设备分组’tab上\")\n    @pytest.mark.run(order=15)\n    def test_switch_terminal_group(self):\n        release_page = self.release_page\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        time.sleep(0.5)\n        with step(\"点击选设备\"):\n>           release_page.choose_terminal()\n\ntest_case\\test_release_management.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:36: in choose_terminal\n    self.click(choose_terminal_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029B9204E6E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF68A78E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-06d105f8=\"\" class=\"step-name\">...</div> is not clickable at point (259, 394). Other element would receive the click: <div class=\"el-scrollbar__wrap el-scrollbar__wrap--hidden-default\" style=\"height: 100%;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68A8278A2+54818]\nE       \t(No symbol) [0x00007FF68A796AD2]\nE       \t(No symbol) [0x00007FF68A64DA3B]\nE       \t(No symbol) [0x00007FF68A6947CB]\nE       \t(No symbol) [0x00007FF68A692B99]\nE       \t(No symbol) [0x00007FF68A690968]\nE       \t(No symbol) [0x00007FF68A68FA23]\nE       \t(No symbol) [0x00007FF68A68571F]\nE       \t(No symbol) [0x00007FF68A6AEAAA]\nE       \t(No symbol) [0x00007FF68A685036]\nE       \t(No symbol) [0x00007FF68A6AECC0]\nE       \t(No symbol) [0x00007FF68A6C75A2]\nE       \t(No symbol) [0x00007FF68A6AE883]\nE       \t(No symbol) [0x00007FF68A683691]\nE       \t(No symbol) [0x00007FF68A6848D4]\nE       \tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF68ABE1870+3962352]\nE       \tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF68A8C3656+693206]\nE       \t(No symbol) [0x00007FF68A7A1638]\nE       \t(No symbol) [0x00007FF68A79D944]\nE       \t(No symbol) [0x00007FF68A79DA72]\nE       \t(No symbol) [0x00007FF68A78E123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1720073255084,"stop":1720073255243,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"env","time":{"start":1720073255244,"stop":1720073255245,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1720073255245,"stop":1720073271322,"duration":16077},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"release_page","time":{"start":1720073271322,"stop":1720073271322,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-06d105f8=\"\" class=\"step-name\">...</div> is not clickable at point (259, 394). Other element would receive the click: <div class=\"el-scrollbar__wrap el-scrollbar__wrap--hidden-default\" style=\"height: 100%;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF68A8278A2+54818]\n\t(No symbol) [0x00007FF68A796AD2]\n\t(No symbol) [0x00007FF68A64DA3B]\n\t(No symbol) [0x00007FF68A6947CB]\n\t(No symbol) [0x00007FF68A692B99]\n\t(No symbol) [0x00007FF68A690968]\n\t(No symbol) [0x00007FF68A68FA23]\n\t(No symbol) [0x00007FF68A68571F]\n\t(No symbol) [0x00007FF68A6AEAAA]\n\t(No symbol) [0x00007FF68A685036]\n\t(No symbol) [0x00007FF68A6AECC0]\n\t(No symbol) [0x00007FF68A6C75A2]\n\t(No symbol) [0x00007FF68A6AE883]\n\t(No symbol) [0x00007FF68A683691]\n\t(No symbol) [0x00007FF68A6848D4]\n\tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\n\tGetHandleVerifier [0x00007FF68ABE1870+3962352]\n\tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\n\tGetHandleVerifier [0x00007FF68A8C3656+693206]\n\t(No symbol) [0x00007FF68A7A1638]\n\t(No symbol) [0x00007FF68A79D944]\n\t(No symbol) [0x00007FF68A79DA72]\n\t(No symbol) [0x00007FF68A78E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x0000029BE9DFFA60>\n\n    @allure.title(\"在选设备抽屉，切换到‘设备分组’tab上\")\n    @pytest.mark.run(order=15)\n    def test_switch_terminal_group(self):\n        release_page = self.release_page\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        time.sleep(0.5)\n        with step(\"点击选设备\"):\n>           release_page.choose_terminal()\n\ntest_case\\test_release_management.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:36: in choose_terminal\n    self.click(choose_terminal_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029B9204E6E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF68A78E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-06d105f8=\"\" class=\"step-name\">...</div> is not clickable at point (259, 394). Other element would receive the click: <div class=\"el-scrollbar__wrap el-scrollbar__wrap--hidden-default\" style=\"height: 100%;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68A8278A2+54818]\nE       \t(No symbol) [0x00007FF68A796AD2]\nE       \t(No symbol) [0x00007FF68A64DA3B]\nE       \t(No symbol) [0x00007FF68A6947CB]\nE       \t(No symbol) [0x00007FF68A692B99]\nE       \t(No symbol) [0x00007FF68A690968]\nE       \t(No symbol) [0x00007FF68A68FA23]\nE       \t(No symbol) [0x00007FF68A68571F]\nE       \t(No symbol) [0x00007FF68A6AEAAA]\nE       \t(No symbol) [0x00007FF68A685036]\nE       \t(No symbol) [0x00007FF68A6AECC0]\nE       \t(No symbol) [0x00007FF68A6C75A2]\nE       \t(No symbol) [0x00007FF68A6AE883]\nE       \t(No symbol) [0x00007FF68A683691]\nE       \t(No symbol) [0x00007FF68A6848D4]\nE       \tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF68ABE1870+3962352]\nE       \tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF68A8C3656+693206]\nE       \t(No symbol) [0x00007FF68A7A1638]\nE       \t(No symbol) [0x00007FF68A79D944]\nE       \t(No symbol) [0x00007FF68A79DA72]\nE       \t(No symbol) [0x00007FF68A78E123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"切换到发布管理tab上","time":{"start":1720073284619,"stop":1720073284673,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"点击选设备","time":{"start":1720073285188,"stop":1720073286288,"duration":1100},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-06d105f8=\"\" class=\"step-name\">...</div> is not clickable at point (259, 394). Other element would receive the click: <div class=\"el-scrollbar__wrap el-scrollbar__wrap--hidden-default\" style=\"height: 100%;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF68A8278A2+54818]\n\t(No symbol) [0x00007FF68A796AD2]\n\t(No symbol) [0x00007FF68A64DA3B]\n\t(No symbol) [0x00007FF68A6947CB]\n\t(No symbol) [0x00007FF68A692B99]\n\t(No symbol) [0x00007FF68A690968]\n\t(No symbol) [0x00007FF68A68FA23]\n\t(No symbol) [0x00007FF68A68571F]\n\t(No symbol) [0x00007FF68A6AEAAA]\n\t(No symbol) [0x00007FF68A685036]\n\t(No symbol) [0x00007FF68A6AECC0]\n\t(No symbol) [0x00007FF68A6C75A2]\n\t(No symbol) [0x00007FF68A6AE883]\n\t(No symbol) [0x00007FF68A683691]\n\t(No symbol) [0x00007FF68A6848D4]\n\tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\n\tGetHandleVerifier [0x00007FF68ABE1870+3962352]\n\tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\n\tGetHandleVerifier [0x00007FF68A8C3656+693206]\n\t(No symbol) [0x00007FF68A7A1638]\n\t(No symbol) [0x00007FF68A79D944]\n\t(No symbol) [0x00007FF68A79DA72]\n\t(No symbol) [0x00007FF68A78E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_release_management.py\", line 416, in test_switch_terminal_group\n    release_page.choose_terminal()\n  File \"D:\\git\\ui_test\\pageobject\\release_page.py\", line 36, in choose_terminal\n    self.click(choose_terminal_locator)\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":2},"afterStages":[{"name":"release_page::0","time":{"start":1720073975016,"stop":1720073975016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1720073975020,"stop":1720073984540,"duration":9520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"release management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=15)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseStrategy"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"28616-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=15)"]},"source":"5ad023633bf6b097.json","parameterValues":[]}