{"uid":"de77ff0e62157b85","name":"选择所有的机构","fullName":"test_case.test_release_management.TestReleaseStrategy#test_select_all_org","historyId":"c6962dd0c2706b292509f53d2d3658b7","time":{"start":1718438371955,"stop":1718438396337,"duration":24382},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113D8ED]\n\t(No symbol) [0x00007FF73117F8E5]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000001A79D0AF7F0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"566f0ec42fd811bcfac8a74612f53a0d\")>\n\n    @allure.title(\"选择所有的机构\")\n    @pytest.mark.run(order=21)\n    def test_select_all_org(self, driver):\n        release_page = self.release_page\n        release_page.refresh()\n        release_page.maxsize_window()\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        with step(\"点击选设备\"):\n            release_page.choose_terminal()\n    \n        with step(\"在组织架构中，点击全选按钮\"):\n            release_page.select_all_org()\n            time.sleep(3)\n>           release_page.select_all_org()\n\ntest_case\\test_release_management.py:531: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:357: in select_all_org\n    select_first_org.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A7C4AE85E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF73127E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7313178A2+54818]\nE       \t(No symbol) [0x00007FF731286AD2]\nE       \t(No symbol) [0x00007FF73113D8ED]\nE       \t(No symbol) [0x00007FF73117F8E5]\nE       \t(No symbol) [0x00007FF73117571F]\nE       \t(No symbol) [0x00007FF73119EAAA]\nE       \t(No symbol) [0x00007FF731175036]\nE       \t(No symbol) [0x00007FF73119ECC0]\nE       \t(No symbol) [0x00007FF7311B75A2]\nE       \t(No symbol) [0x00007FF73119E883]\nE       \t(No symbol) [0x00007FF731173691]\nE       \t(No symbol) [0x00007FF7311748D4]\nE       \tGetHandleVerifier [0x00007FF73167B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7316D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7313B3656+693206]\nE       \t(No symbol) [0x00007FF731291638]\nE       \t(No symbol) [0x00007FF73128D944]\nE       \t(No symbol) [0x00007FF73128DA72]\nE       \t(No symbol) [0x00007FF73127E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1718438308249,"stop":1718438308250,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"driver","time":{"start":1718438308250,"stop":1718438332896,"duration":24646},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"release_page","time":{"start":1718438332896,"stop":1718438332896,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113D8ED]\n\t(No symbol) [0x00007FF73117F8E5]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000001A79D0AF7F0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"566f0ec42fd811bcfac8a74612f53a0d\")>\n\n    @allure.title(\"选择所有的机构\")\n    @pytest.mark.run(order=21)\n    def test_select_all_org(self, driver):\n        release_page = self.release_page\n        release_page.refresh()\n        release_page.maxsize_window()\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        with step(\"点击选设备\"):\n            release_page.choose_terminal()\n    \n        with step(\"在组织架构中，点击全选按钮\"):\n            release_page.select_all_org()\n            time.sleep(3)\n>           release_page.select_all_org()\n\ntest_case\\test_release_management.py:531: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:357: in select_all_org\n    select_first_org.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A7C4AE85E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF73127E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7313178A2+54818]\nE       \t(No symbol) [0x00007FF731286AD2]\nE       \t(No symbol) [0x00007FF73113D8ED]\nE       \t(No symbol) [0x00007FF73117F8E5]\nE       \t(No symbol) [0x00007FF73117571F]\nE       \t(No symbol) [0x00007FF73119EAAA]\nE       \t(No symbol) [0x00007FF731175036]\nE       \t(No symbol) [0x00007FF73119ECC0]\nE       \t(No symbol) [0x00007FF7311B75A2]\nE       \t(No symbol) [0x00007FF73119E883]\nE       \t(No symbol) [0x00007FF731173691]\nE       \t(No symbol) [0x00007FF7311748D4]\nE       \tGetHandleVerifier [0x00007FF73167B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7316D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7313B3656+693206]\nE       \t(No symbol) [0x00007FF731291638]\nE       \t(No symbol) [0x00007FF73128D944]\nE       \t(No symbol) [0x00007FF73128DA72]\nE       \t(No symbol) [0x00007FF73127E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"切换到发布管理tab上","time":{"start":1718438372173,"stop":1718438372189,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"点击选设备","time":{"start":1718438372189,"stop":1718438372247,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"在组织架构中，点击全选按钮","time":{"start":1718438372247,"stop":1718438396336,"duration":24089},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113D8ED]\n\t(No symbol) [0x00007FF73117F8E5]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_release_management.py\", line 531, in test_select_all_org\n    release_page.select_all_org()\n  File \"D:\\git\\ui_test\\pageobject\\release_page.py\", line 357, in select_all_org\n    select_first_org.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":3},"afterStages":[{"name":"release_page::0","time":{"start":1718439098782,"stop":1718439098782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"driver::0","time":{"start":1718439098787,"stop":1718439104208,"duration":5421},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"release management"},{"name":"tag","value":"run(order=21)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseStrategy"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"36968-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=21)"]},"source":"de77ff0e62157b85.json","parameterValues":[]}