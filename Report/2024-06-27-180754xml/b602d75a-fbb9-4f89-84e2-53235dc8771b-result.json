{"name": "批量发送插播字幕", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\" class=\"\">...</span> is not clickable at point (397, 184). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-9055-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6A49C78A2+54818]\n\t(No symbol) [0x00007FF6A4936AD2]\n\t(No symbol) [0x00007FF6A47EDA3B]\n\t(No symbol) [0x00007FF6A48347CB]\n\t(No symbol) [0x00007FF6A4832B99]\n\t(No symbol) [0x00007FF6A4830968]\n\t(No symbol) [0x00007FF6A482FA23]\n\t(No symbol) [0x00007FF6A482571F]\n\t(No symbol) [0x00007FF6A484EAAA]\n\t(No symbol) [0x00007FF6A4825036]\n\t(No symbol) [0x00007FF6A484ECC0]\n\t(No symbol) [0x00007FF6A48675A2]\n\t(No symbol) [0x00007FF6A484E883]\n\t(No symbol) [0x00007FF6A4823691]\n\t(No symbol) [0x00007FF6A48248D4]\n\tGetHandleVerifier [0x00007FF6A4D2B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6A4D81870+3962352]\n\tGetHandleVerifier [0x00007FF6A4D79D5F+3930847]\n\tGetHandleVerifier [0x00007FF6A4A63656+693206]\n\t(No symbol) [0x00007FF6A4941638]\n\t(No symbol) [0x00007FF6A493D944]\n\t(No symbol) [0x00007FF6A493DA72]\n\t(No symbol) [0x00007FF6A492E123]\n\tBaseThreadInitThunk [0x00007FFBB2E1257D+29]\n\tRtlUserThreadStart [0x00007FFBB502AA48+40]", "trace": "self = <test_case.test_terminal_center.TestTerminalCenter object at 0x000001D29B6A1B40>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"批量发送插播字幕\")\n    @pytest.mark.run(order=12)\n    def test_batch_subtitle(self):\n        # sql_execute()\n        terminal_page = self.terminal_page\n        time.sleep(0.5)\n        with step(\"新增一个真实的设备\"):\n            terminal_page.add_real_terminal()\n        with step(\"点击全选按钮\"):\n            terminal_page.select_one_terminal()\n            # time.sleep(0.5)\n            # terminal_page.select_all_terminal()\n            print(\"点击全选按钮成功\")\n        time.sleep(0.5)\n        with step(\"点击设备控制按钮\"):\n            # terminal_page.click_terminal_control()\n>           terminal_page.click_button('by_xpath,//span[text()=\"设备控制\"]')\n\ntest_case\\test_terminal_center.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbasepage\\base_page.py:412: in click_button\n    self.get_element(args).click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D2C325D690>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6A492E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBB2E1257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFBB502AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\" class=\"\">...</span> is not clickable at point (397, 184). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-9055-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6A49C78A2+54818]\nE       \t(No symbol) [0x00007FF6A4936AD2]\nE       \t(No symbol) [0x00007FF6A47EDA3B]\nE       \t(No symbol) [0x00007FF6A48347CB]\nE       \t(No symbol) [0x00007FF6A4832B99]\nE       \t(No symbol) [0x00007FF6A4830968]\nE       \t(No symbol) [0x00007FF6A482FA23]\nE       \t(No symbol) [0x00007FF6A482571F]\nE       \t(No symbol) [0x00007FF6A484EAAA]\nE       \t(No symbol) [0x00007FF6A4825036]\nE       \t(No symbol) [0x00007FF6A484ECC0]\nE       \t(No symbol) [0x00007FF6A48675A2]\nE       \t(No symbol) [0x00007FF6A484E883]\nE       \t(No symbol) [0x00007FF6A4823691]\nE       \t(No symbol) [0x00007FF6A48248D4]\nE       \tGetHandleVerifier [0x00007FF6A4D2B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6A4D81870+3962352]\nE       \tGetHandleVerifier [0x00007FF6A4D79D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6A4A63656+693206]\nE       \t(No symbol) [0x00007FF6A4941638]\nE       \t(No symbol) [0x00007FF6A493D944]\nE       \t(No symbol) [0x00007FF6A493DA72]\nE       \t(No symbol) [0x00007FF6A492E123]\nE       \tBaseThreadInitThunk [0x00007FFBB2E1257D+29]\nE       \tRtlUserThreadStart [0x00007FFBB502AA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "新增一个真实的设备", "status": "passed", "steps": [{"name": "进入设备中心", "status": "passed", "start": 1719483706953, "stop": 1719483708681}, {"name": "点击设备接入", "status": "passed", "start": 1719483708682, "stop": 1719483710094}, {"name": "输入设备sn码", "status": "passed", "start": 1719483710094, "stop": 1719483710830}, {"name": "输入设备名称", "status": "passed", "start": 1719483710830, "stop": 1719483711527}, {"name": "先点击所属机构", "status": "passed", "start": 1719483711527, "stop": 1719483712229}, {"name": "在下拉框展开组织架构", "status": "passed", "start": 1719483712229, "stop": 1719483721146}, {"name": "在下拉框进行选择", "status": "passed", "start": 1719483721146, "stop": 1719483743202}, {"name": "点击保存按钮", "status": "passed", "start": 1719483743202, "stop": 1719483783517}, {"name": "点击设备接入", "status": "passed", "start": 1719483784245, "stop": 1719483785712}, {"name": "输入设备sn码", "status": "passed", "start": 1719483785712, "stop": 1719483786487}, {"name": "输入设备名称", "status": "passed", "start": 1719483786487, "stop": 1719483787158}, {"name": "先点击所属机构", "status": "passed", "start": 1719483787158, "stop": 1719483787842}, {"name": "在下拉框展开组织架构", "status": "passed", "start": 1719483787842, "stop": 1719483796662}, {"name": "在下拉框进行选择", "status": "passed", "start": 1719483796662, "stop": 1719483818734}, {"name": "点击保存按钮", "status": "passed", "start": 1719483818734, "stop": 1719483859134}], "start": 1719483706626, "stop": 1719483859134}, {"name": "点击全选按钮", "status": "passed", "start": 1719483859134, "stop": 1719483879656}, {"name": "点击设备控制按钮", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\" class=\"\">...</span> is not clickable at point (397, 184). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-9055-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6A49C78A2+54818]\n\t(No symbol) [0x00007FF6A4936AD2]\n\t(No symbol) [0x00007FF6A47EDA3B]\n\t(No symbol) [0x00007FF6A48347CB]\n\t(No symbol) [0x00007FF6A4832B99]\n\t(No symbol) [0x00007FF6A4830968]\n\t(No symbol) [0x00007FF6A482FA23]\n\t(No symbol) [0x00007FF6A482571F]\n\t(No symbol) [0x00007FF6A484EAAA]\n\t(No symbol) [0x00007FF6A4825036]\n\t(No symbol) [0x00007FF6A484ECC0]\n\t(No symbol) [0x00007FF6A48675A2]\n\t(No symbol) [0x00007FF6A484E883]\n\t(No symbol) [0x00007FF6A4823691]\n\t(No symbol) [0x00007FF6A48248D4]\n\tGetHandleVerifier [0x00007FF6A4D2B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6A4D81870+3962352]\n\tGetHandleVerifier [0x00007FF6A4D79D5F+3930847]\n\tGetHandleVerifier [0x00007FF6A4A63656+693206]\n\t(No symbol) [0x00007FF6A4941638]\n\t(No symbol) [0x00007FF6A493D944]\n\t(No symbol) [0x00007FF6A493DA72]\n\t(No symbol) [0x00007FF6A492E123]\n\tBaseThreadInitThunk [0x00007FFBB2E1257D+29]\n\tRtlUserThreadStart [0x00007FFBB502AA48+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_terminal_center.py\", line 329, in test_batch_subtitle\n    terminal_page.click_button('by_xpath,//span[text()=\"设备控制\"]')\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 412, in click_button\n    self.get_element(args).click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1719483880171, "stop": 1719483881298}], "start": 1719483706117, "stop": 1719483881300, "uuid": "475c31e5-44d9-474f-a12f-851c5b846d67", "historyId": "35151d3dddd3443c33e0d6eda1c8cf3b", "testCaseId": "35151d3dddd3443c33e0d6eda1c8cf3b", "fullName": "test_case.test_terminal_center.TestTerminalCenter#test_batch_subtitle", "labels": [{"name": "feature", "value": "terminal_center"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "run(order=12)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('clear_terminal_list')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_terminal_center"}, {"name": "subSuite", "value": "TestTerminalCenter"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "43164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_terminal_center"}]}