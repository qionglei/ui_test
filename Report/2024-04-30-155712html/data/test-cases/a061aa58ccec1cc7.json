{"uid":"a061aa58ccec1cc7","name":"在节目编排中，选择节目","fullName":"test_case.test_release_management.TestReleaseManagemen_2#test_add_program","historyId":"b6684573bc80a26c81687003d570fe95","time":{"start":1714464679939,"stop":1714464700233,"duration":20294},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9DA3B]\n\t(No symbol) [0x00007FF6CFBA246D]\n\t(No symbol) [0x00007FF6CFBA3F5F]\n\t(No symbol) [0x00007FF6CFBA4050]\n\t(No symbol) [0x00007FF6CFBE3DB1]\n\t(No symbol) [0x00007FF6CFBE34C6]\n\t(No symbol) [0x00007FF6CFC1F958]\n\t(No symbol) [0x00007FF6CFBFEAAA]\n\t(No symbol) [0x00007FF6CFC175A2]\n\t(No symbol) [0x00007FF6CFBFE883]\n\t(No symbol) [0x00007FF6CFBD3691]\n\t(No symbol) [0x00007FF6CFBD48D4]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFCED944]\n\t(No symbol) [0x00007FF6CFCEDA72]\n\t(No symbol) [0x00007FF6CFCDE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseManagemen_2 object at 0x000002761229ACB0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"299d51fbc73dcf81cf596996adc935ab\")>\n\n    @pytest.mark.run(order=28)\n    # @pytest.mark.usefixtures(\"generate_program\")\n    @allure.title(\"在节目编排中，选择节目\")\n    def test_add_program(self, driver):\n        # ---------前提-----------------\n        # 后期优化：将这段代码作为fixture\n    \n        media_list = MediaList()\n        mediapage = MediaPage(driver)\n        mediapage.refresh()\n        media_ids = media_list.get_media_list()\n        media_list.delete_all_media()\n        programlist = ProgramList()\n        program_names = programlist.get_program_list_names()\n        print(\"所有的节目名称:\", program_names)\n    \n        if not program_names:\n            # if media_ids is None:\n            # 素材上传\n            mediapage.refresh()\n            mediapage.switch_to_media_center()\n            mediapage.upload_media()\n            print(\"上传成功------------------\")\n            time.sleep(2)\n            # 素材发布\n            # media_ids = media_list.get_media_list()\n            mediapage.hover_to_media()\n>           mediapage.choose_media()\n\ntest_case\\test_release_management.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:341: in choose_media\n    ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002763A9D92A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF6CFCDE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CFD778A2+54818]\nE       \t(No symbol) [0x00007FF6CFCE6AD2]\nE       \t(No symbol) [0x00007FF6CFB9DA3B]\nE       \t(No symbol) [0x00007FF6CFBA246D]\nE       \t(No symbol) [0x00007FF6CFBA3F5F]\nE       \t(No symbol) [0x00007FF6CFBA4050]\nE       \t(No symbol) [0x00007FF6CFBE3DB1]\nE       \t(No symbol) [0x00007FF6CFBE34C6]\nE       \t(No symbol) [0x00007FF6CFC1F958]\nE       \t(No symbol) [0x00007FF6CFBFEAAA]\nE       \t(No symbol) [0x00007FF6CFC175A2]\nE       \t(No symbol) [0x00007FF6CFBFE883]\nE       \t(No symbol) [0x00007FF6CFBD3691]\nE       \t(No symbol) [0x00007FF6CFBD48D4]\nE       \tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6D0131870+3962352]\nE       \tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CFE13656+693206]\nE       \t(No symbol) [0x00007FF6CFCF1638]\nE       \t(No symbol) [0x00007FF6CFCED944]\nE       \t(No symbol) [0x00007FF6CFCEDA72]\nE       \t(No symbol) [0x00007FF6CFCDE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1714463835657,"stop":1714463835659,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1714463835660,"stop":1714463846586,"duration":10926},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1714464224095,"stop":1714464233033,"duration":8938},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"release_page","time":{"start":1714464276122,"stop":1714464276136,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9DA3B]\n\t(No symbol) [0x00007FF6CFBA246D]\n\t(No symbol) [0x00007FF6CFBA3F5F]\n\t(No symbol) [0x00007FF6CFBA4050]\n\t(No symbol) [0x00007FF6CFBE3DB1]\n\t(No symbol) [0x00007FF6CFBE34C6]\n\t(No symbol) [0x00007FF6CFC1F958]\n\t(No symbol) [0x00007FF6CFBFEAAA]\n\t(No symbol) [0x00007FF6CFC175A2]\n\t(No symbol) [0x00007FF6CFBFE883]\n\t(No symbol) [0x00007FF6CFBD3691]\n\t(No symbol) [0x00007FF6CFBD48D4]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFCED944]\n\t(No symbol) [0x00007FF6CFCEDA72]\n\t(No symbol) [0x00007FF6CFCDE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseManagemen_2 object at 0x000002761229ACB0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"299d51fbc73dcf81cf596996adc935ab\")>\n\n    @pytest.mark.run(order=28)\n    # @pytest.mark.usefixtures(\"generate_program\")\n    @allure.title(\"在节目编排中，选择节目\")\n    def test_add_program(self, driver):\n        # ---------前提-----------------\n        # 后期优化：将这段代码作为fixture\n    \n        media_list = MediaList()\n        mediapage = MediaPage(driver)\n        mediapage.refresh()\n        media_ids = media_list.get_media_list()\n        media_list.delete_all_media()\n        programlist = ProgramList()\n        program_names = programlist.get_program_list_names()\n        print(\"所有的节目名称:\", program_names)\n    \n        if not program_names:\n            # if media_ids is None:\n            # 素材上传\n            mediapage.refresh()\n            mediapage.switch_to_media_center()\n            mediapage.upload_media()\n            print(\"上传成功------------------\")\n            time.sleep(2)\n            # 素材发布\n            # media_ids = media_list.get_media_list()\n            mediapage.hover_to_media()\n>           mediapage.choose_media()\n\ntest_case\\test_release_management.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:341: in choose_media\n    ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002763A9D92A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF6CFCDE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CFD778A2+54818]\nE       \t(No symbol) [0x00007FF6CFCE6AD2]\nE       \t(No symbol) [0x00007FF6CFB9DA3B]\nE       \t(No symbol) [0x00007FF6CFBA246D]\nE       \t(No symbol) [0x00007FF6CFBA3F5F]\nE       \t(No symbol) [0x00007FF6CFBA4050]\nE       \t(No symbol) [0x00007FF6CFBE3DB1]\nE       \t(No symbol) [0x00007FF6CFBE34C6]\nE       \t(No symbol) [0x00007FF6CFC1F958]\nE       \t(No symbol) [0x00007FF6CFBFEAAA]\nE       \t(No symbol) [0x00007FF6CFC175A2]\nE       \t(No symbol) [0x00007FF6CFBFE883]\nE       \t(No symbol) [0x00007FF6CFBD3691]\nE       \t(No symbol) [0x00007FF6CFBD48D4]\nE       \tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6D0131870+3962352]\nE       \tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CFE13656+693206]\nE       \t(No symbol) [0x00007FF6CFCF1638]\nE       \t(No symbol) [0x00007FF6CFCED944]\nE       \t(No symbol) [0x00007FF6CFCEDA72]\nE       \t(No symbol) [0x00007FF6CFCDE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"点击上传按钮","time":{"start":1714464682445,"stop":1714464683620,"duration":1175},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"进行文件上传","time":{"start":1714464683620,"stop":1714464691252,"duration":7632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"当进度为100%时，则关闭上传弹框","time":{"start":1714464691252,"stop":1714464694473,"duration":3221},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":3,"hasContent":true},"afterStages":[{"name":"release_page::0","time":{"start":1714464986866,"stop":1714464987225,"duration":359},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1714465609762,"stop":1714465610134,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1714465610134,"stop":1714465610544,"duration":410},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CFD778A2+54818]\n\t(No symbol) [0x00007FF6CFCE6AD2]\n\t(No symbol) [0x00007FF6CFB9D8ED]\n\t(No symbol) [0x00007FF6CFBD30DE]\n\t(No symbol) [0x00007FF6CFBFE9A2]\n\t(No symbol) [0x00007FF6CFBFA710]\n\t(No symbol) [0x00007FF6CFBFA016]\n\t(No symbol) [0x00007FF6CFB741D0]\n\tGetHandleVerifier [0x00007FF6D00DB9A2+3610402]\n\tGetHandleVerifier [0x00007FF6D0131870+3962352]\n\tGetHandleVerifier [0x00007FF6D0129D5F+3930847]\n\tGetHandleVerifier [0x00007FF6CFE13656+693206]\n\t(No symbol) [0x00007FF6CFCF1638]\n\t(No symbol) [0x00007FF6CFB72FFE]\n\tGetHandleVerifier [0x00007FF6D0172288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\ui\\conftest.py\", line 37, in driver\n    driver.close()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 459, in close\n    self.execute(Command.CLOSE)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"release management2"},{"name":"tag","value":"run(order=28)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseManagemen_2"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"24664-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=28)"]},"source":"a061aa58ccec1cc7.json","parameterValues":[]}