{"uid":"fd17ad06278078a5","name":"使用状态过滤，过滤返回修改节目单","fullName":"test_case.test_play_bill.TestPlayBill#test_filter_return_modify_status","historyId":"b66a07e429b88f1e88c5818565a6d3c3","time":{"start":1715652156443,"stop":1715652156443,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43D8ED]\n\t(No symbol) [0x00007FF74D47F8E5]\n\t(No symbol) [0x00007FF74D47571F]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D475036]\n\t(No symbol) [0x00007FF74D49ECC0]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <pageobject.program_page.ProgramPage object at 0x00000119E9ADE950>\n\n    def create_general_program(self):\n        \"\"\"\n        通用方法：创建一个普通节目\n        \"\"\"\n        try:\n            self.switch_to_program_management()\n            random_name = random.randint(1, 100)\n            random_program_name = \"test_横屏普通节目\" + str(random_name)\n            with step(\"点击创建节目\"):\n                self.click_create_program()\n            with step(\"输入节目名称（普通节目）\"):\n                self.input_program_name(random_program_name)\n    \n            with step( \"选择屏幕方向\"):\n                self.screen_direction(\"x\")\n    \n            try:\n                with step( \"选择分辨率\"):\n                    self.click_resolution()\n                    time.sleep(0.3)\n>                   self.choose_screen(\"1920x1080\")\n\npageobject\\program_page.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.program_page.ProgramPage object at 0x00000119E9ADE950>\nresolution = '1920x1080'\n\n    def choose_screen(self, resolution=\"1920x1080\"):\n        \"\"\"\n        创建节目时，选择不同的分辨率\n        :param resolution:\n        :return:\n        \"\"\"\n        if resolution == \"1920x1080\":\n>           self.click('by_xpath,//span[text()=\"1920x1080\"]')\n\npageobject\\program_page.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageobject.program_page.ProgramPage object at 0x00000119E9ADE950>\nargs = 'by_xpath,//span[text()=\"1920x1080\"]'\n\n    def click(self, args):\n        # return self.driver.find_element(*args).click()\n        # return self.get_element(*args).click()\n        e1 = self.get_element(args)\n>       e1.click()\n\nbasepage\\base_page.py:247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"70f222cc704e884404758e016c5ab40d\", element=\"089B66611AFA2A54F1BDE66AA70E7B49_element_663\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"70f222cc704e884404758e016c5ab40d\", element=\"089B66611AFA2A54F1BDE66AA70E7B49_element_663\")>\ncommand = 'clickElement'\nparams = {'id': '089B66611AFA2A54F1BDE66AA70E7B49_element_663'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"70f222cc704e884404758e016c5ab40d\")>\ndriver_command = 'clickElement', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000119E84938E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF74D57E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74D6178A2+54818]\nE       \t(No symbol) [0x00007FF74D586AD2]\nE       \t(No symbol) [0x00007FF74D43D8ED]\nE       \t(No symbol) [0x00007FF74D47F8E5]\nE       \t(No symbol) [0x00007FF74D47571F]\nE       \t(No symbol) [0x00007FF74D49EAAA]\nE       \t(No symbol) [0x00007FF74D475036]\nE       \t(No symbol) [0x00007FF74D49ECC0]\nE       \t(No symbol) [0x00007FF74D4B75A2]\nE       \t(No symbol) [0x00007FF74D49E883]\nE       \t(No symbol) [0x00007FF74D473691]\nE       \t(No symbol) [0x00007FF74D4748D4]\nE       \tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF74D9D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF74D6B3656+693206]\nE       \t(No symbol) [0x00007FF74D591638]\nE       \t(No symbol) [0x00007FF74D58D944]\nE       \t(No symbol) [0x00007FF74D58DA72]\nE       \t(No symbol) [0x00007FF74D57E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"70f222cc704e884404758e016c5ab40d\")>\n\n    @pytest.fixture(scope='class')\n    def init_play_bill(driver):\n        \"\"\"\n        初始化节目单，如果没有节目单，则创建普通节目，进行发布操作\n        以达到环境初始化的作用\n        \"\"\"\n        try:\n            play_bill = PlayBill()\n            program_page = ProgramPage(driver)\n            release_page = ReleasePage(driver)\n            terminal_page = TerminalPage(driver)\n            terminal_list = Terminal_List()\n            program_list = ProgramList()\n            all_play_bill_ids = play_bill.get_play_bill_ids()\n            if not all_play_bill_ids:\n                all_program_ids, program_folder_id = program_list.get_program_list_ids()\n                all_terminal_list = terminal_list.get_terminal_list()\n                if not all_terminal_list:\n                    terminal_page.add_new_terminal()\n                if not all_program_ids:\n                    program_page.switch_to_program_management()\n>                   program_page.create_general_program()\n\ntest_case\\test_play_bill.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:89: in create_general_program\n    raise e\npageobject\\program_page.py:64: in create_general_program\n    self.choose_screen(\"1920x1080\")\npageobject\\program_page.py:200: in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000119E84938E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF74D57E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74D6178A2+54818]\nE       \t(No symbol) [0x00007FF74D586AD2]\nE       \t(No symbol) [0x00007FF74D43D8ED]\nE       \t(No symbol) [0x00007FF74D47F8E5]\nE       \t(No symbol) [0x00007FF74D47571F]\nE       \t(No symbol) [0x00007FF74D49EAAA]\nE       \t(No symbol) [0x00007FF74D475036]\nE       \t(No symbol) [0x00007FF74D49ECC0]\nE       \t(No symbol) [0x00007FF74D4B75A2]\nE       \t(No symbol) [0x00007FF74D49E883]\nE       \t(No symbol) [0x00007FF74D473691]\nE       \t(No symbol) [0x00007FF74D4748D4]\nE       \tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF74D9D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF74D6B3656+693206]\nE       \t(No symbol) [0x00007FF74D591638]\nE       \t(No symbol) [0x00007FF74D58D944]\nE       \t(No symbol) [0x00007FF74D58DA72]\nE       \t(No symbol) [0x00007FF74D57E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1715650209026,"stop":1715650224238,"duration":15212},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"env","time":{"start":1715650209026,"stop":1715650209026,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1715650231877,"stop":1715650240948,"duration":9071},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"release_page","time":{"start":1715652156443,"stop":1715652156443,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"play_bill_page","time":{"start":1715652156443,"stop":1715652156443,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"init_play_bill","time":{"start":1715652156443,"stop":1715652304436,"duration":147993},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43D8ED]\n\t(No symbol) [0x00007FF74D47F8E5]\n\t(No symbol) [0x00007FF74D47571F]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D475036]\n\t(No symbol) [0x00007FF74D49ECC0]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 1130, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 909, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"D:\\ui\\test_case\\test_play_bill.py\", line 56, in init_play_bill\n    program_page.create_general_program()\n  File \"D:\\ui\\pageobject\\program_page.py\", line 89, in create_general_program\n    raise e\n  File \"D:\\ui\\pageobject\\program_page.py\", line 64, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"点击设备接入","time":{"start":1715652160680,"stop":1715652161891,"duration":1211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备sn码","time":{"start":1715652162395,"stop":1715652163100,"duration":705},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备名称","time":{"start":1715652163100,"stop":1715652163806,"duration":706},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"先点击所属机构","time":{"start":1715652163806,"stop":1715652164434,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框展开组织架构","time":{"start":1715652164434,"stop":1715652170745,"duration":6311},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框进行选择","time":{"start":1715652171248,"stop":1715652192302,"duration":21054},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击保存按钮","time":{"start":1715652192818,"stop":1715652234197,"duration":41379},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击创建节目","time":{"start":1715652258638,"stop":1715652259795,"duration":1157},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入节目名称（普通节目）","time":{"start":1715652259795,"stop":1715652260500,"duration":705},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"选择屏幕方向","time":{"start":1715652260500,"stop":1715652261080,"duration":580},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"选择分辨率","time":{"start":1715652261080,"stop":1715652282628,"duration":21548},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43D8ED]\n\t(No symbol) [0x00007FF74D47F8E5]\n\t(No symbol) [0x00007FF74D47571F]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D475036]\n\t(No symbol) [0x00007FF74D49ECC0]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\pageobject\\program_page.py\", line 58, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},{"name":"选择分辨率","time":{"start":1715652282944,"stop":1715652304433,"duration":21489},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43D8ED]\n\t(No symbol) [0x00007FF74D47F8E5]\n\t(No symbol) [0x00007FF74D47571F]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D475036]\n\t(No symbol) [0x00007FF74D49ECC0]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\pageobject\\program_page.py\", line 64, in create_general_program\n    self.choose_screen(\"1920x1080\")\n  File \"D:\\ui\\pageobject\\program_page.py\", line 200, in choose_screen\n    self.click('by_xpath,//span[text()=\"1920x1080\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":12,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false}],"afterStages":[{"name":"play_bill_page::0","time":{"start":1715652304629,"stop":1715652304629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"release_page::0","time":{"start":1715652304634,"stop":1715652304634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1715654589752,"stop":1715654600896,"duration":11144},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1715654611302,"stop":1715654617891,"duration":6589},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"play bill list"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=13)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_play_bill"},{"name":"subSuite","value":"TestPlayBill"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"5424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_play_bill"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=13)"]},"source":"fd17ad06278078a5.json","parameterValues":[]}