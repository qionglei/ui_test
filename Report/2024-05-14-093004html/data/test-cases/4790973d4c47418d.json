{"uid":"4790973d4c47418d","name":"确认删除单个素材，删除成功","fullName":"test_case.test_media_center.TestMediaCenter#test_delete_success","historyId":"d67152f85e0fd6e35959f83ff66df89a","time":{"start":1715652154820,"stop":1715652156350,"duration":1530},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43DA3B]\n\t(No symbol) [0x00007FF74D4209D0]\n\t(No symbol) [0x00007FF74D41F24E]\n\t(No symbol) [0x00007FF74D41E866]\n\t(No symbol) [0x00007FF74D4CAB99]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_media_center.TestMediaCenter object at 0x00000119BF8444F0>\n\n    @pytest.mark.run(order=13)\n    @pytest.mark.usefixtures(\"media_set_up\")\n    @allure.title(\"确认删除单个素材，删除成功\")\n    def test_delete_success(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n>           media_page.upload_media()\n\ntest_case\\test_media_center.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:39: in upload_media\n    self.maxsize_window()\nbasepage\\base_page.py:61: in maxsize_window\n    self.driver.maximize_window()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:500: in maximize_window\n    self.execute(command, None)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000119E847C4F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF74D57E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74D6178A2+54818]\nE       \t(No symbol) [0x00007FF74D586AD2]\nE       \t(No symbol) [0x00007FF74D43DA3B]\nE       \t(No symbol) [0x00007FF74D4209D0]\nE       \t(No symbol) [0x00007FF74D41F24E]\nE       \t(No symbol) [0x00007FF74D41E866]\nE       \t(No symbol) [0x00007FF74D4CAB99]\nE       \t(No symbol) [0x00007FF74D49EAAA]\nE       \t(No symbol) [0x00007FF74D4B75A2]\nE       \t(No symbol) [0x00007FF74D49E883]\nE       \t(No symbol) [0x00007FF74D473691]\nE       \t(No symbol) [0x00007FF74D4748D4]\nE       \tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF74D9D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF74D6B3656+693206]\nE       \t(No symbol) [0x00007FF74D591638]\nE       \t(No symbol) [0x00007FF74D58D944]\nE       \t(No symbol) [0x00007FF74D58DA72]\nE       \t(No symbol) [0x00007FF74D57E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1715650209026,"stop":1715650224238,"duration":15212},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"env","time":{"start":1715650209026,"stop":1715650209026,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"media_page","time":{"start":1715652153084,"stop":1715652153084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"media_set_up","time":{"start":1715652153084,"stop":1715652154820,"duration":1736},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43DA3B]\n\t(No symbol) [0x00007FF74D4209D0]\n\t(No symbol) [0x00007FF74D41F24E]\n\t(No symbol) [0x00007FF74D41E866]\n\t(No symbol) [0x00007FF74D4CAB99]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_media_center.TestMediaCenter object at 0x00000119BF8444F0>\n\n    @pytest.mark.run(order=13)\n    @pytest.mark.usefixtures(\"media_set_up\")\n    @allure.title(\"确认删除单个素材，删除成功\")\n    def test_delete_success(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n>           media_page.upload_media()\n\ntest_case\\test_media_center.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:39: in upload_media\n    self.maxsize_window()\nbasepage\\base_page.py:61: in maxsize_window\n    self.driver.maximize_window()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:500: in maximize_window\n    self.execute(command, None)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000119E847C4F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF74D57E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74D6178A2+54818]\nE       \t(No symbol) [0x00007FF74D586AD2]\nE       \t(No symbol) [0x00007FF74D43DA3B]\nE       \t(No symbol) [0x00007FF74D4209D0]\nE       \t(No symbol) [0x00007FF74D41F24E]\nE       \t(No symbol) [0x00007FF74D41E866]\nE       \t(No symbol) [0x00007FF74D4CAB99]\nE       \t(No symbol) [0x00007FF74D49EAAA]\nE       \t(No symbol) [0x00007FF74D4B75A2]\nE       \t(No symbol) [0x00007FF74D49E883]\nE       \t(No symbol) [0x00007FF74D473691]\nE       \t(No symbol) [0x00007FF74D4748D4]\nE       \tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF74D9D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF74D6B3656+693206]\nE       \t(No symbol) [0x00007FF74D591638]\nE       \t(No symbol) [0x00007FF74D58D944]\nE       \t(No symbol) [0x00007FF74D58DA72]\nE       \t(No symbol) [0x00007FF74D57E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","steps":[{"name":"前提：上传图片","time":{"start":1715652156164,"stop":1715652156350,"duration":186},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74D6178A2+54818]\n\t(No symbol) [0x00007FF74D586AD2]\n\t(No symbol) [0x00007FF74D43DA3B]\n\t(No symbol) [0x00007FF74D4209D0]\n\t(No symbol) [0x00007FF74D41F24E]\n\t(No symbol) [0x00007FF74D41E866]\n\t(No symbol) [0x00007FF74D4CAB99]\n\t(No symbol) [0x00007FF74D49EAAA]\n\t(No symbol) [0x00007FF74D4B75A2]\n\t(No symbol) [0x00007FF74D49E883]\n\t(No symbol) [0x00007FF74D473691]\n\t(No symbol) [0x00007FF74D4748D4]\n\tGetHandleVerifier [0x00007FF74D97B9A2+3610402]\n\tGetHandleVerifier [0x00007FF74D9D1870+3962352]\n\tGetHandleVerifier [0x00007FF74D9C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF74D6B3656+693206]\n\t(No symbol) [0x00007FF74D591638]\n\t(No symbol) [0x00007FF74D58D944]\n\t(No symbol) [0x00007FF74D58DA72]\n\t(No symbol) [0x00007FF74D57E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_media_center.py\", line 329, in test_delete_success\n    media_page.upload_media()\n  File \"D:\\ui\\pageobject\\media_page.py\", line 39, in upload_media\n    self.maxsize_window()\n  File \"D:\\ui\\basepage\\base_page.py\", line 61, in maxsize_window\n    self.driver.maximize_window()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 500, in maximize_window\n    self.execute(command, None)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"media_page::0","time":{"start":1715652156443,"stop":1715652156443,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1715654589752,"stop":1715654600896,"duration":11144},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"media center"},{"name":"tag","value":"@pytest.mark.usefixtures('media_set_up')"},{"name":"tag","value":"run(order=13)"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_media_center"},{"name":"subSuite","value":"TestMediaCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"5424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_media_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('media_set_up')","run(order=13)"]},"source":"4790973d4c47418d.json","parameterValues":[]}