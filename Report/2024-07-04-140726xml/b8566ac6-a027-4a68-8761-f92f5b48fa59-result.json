{"name": "搜索设备id", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF68A8278A2+54818]\n\t(No symbol) [0x00007FF68A796AD2]\n\t(No symbol) [0x00007FF68A64DA3B]\n\t(No symbol) [0x00007FF68A65246D]\n\t(No symbol) [0x00007FF68A653F5F]\n\t(No symbol) [0x00007FF68A654050]\n\t(No symbol) [0x00007FF68A689D2E]\n\t(No symbol) [0x00007FF68A6AEAAA]\n\t(No symbol) [0x00007FF68A685036]\n\t(No symbol) [0x00007FF68A6AECC0]\n\t(No symbol) [0x00007FF68A6C75A2]\n\t(No symbol) [0x00007FF68A6AE883]\n\t(No symbol) [0x00007FF68A683691]\n\t(No symbol) [0x00007FF68A6848D4]\n\tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\n\tGetHandleVerifier [0x00007FF68ABE1870+3962352]\n\tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\n\tGetHandleVerifier [0x00007FF68A8C3656+693206]\n\t(No symbol) [0x00007FF68A7A1638]\n\t(No symbol) [0x00007FF68A79D944]\n\t(No symbol) [0x00007FF68A79DA72]\n\t(No symbol) [0x00007FF68A78E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]", "trace": "self = <test_case.test_terminal_center.TestTerminalCenter object at 0x000001DF27EF1BD0>\n\n    @allure.title(\"搜索设备id\")\n    @pytest.mark.run(order=1)\n    def test_search_terminal_by_id(self):\n        terminal_page = self.terminal_page\n        terminal_page.refresh()\n        with step(\"前提：切到设备中心去，而且新增一个设备\"):\n            terminal_page.switch_to_terminal_center()\n            terminal_page.add_new_terminal()\n        fixed_terminal_id = \"TERMINAL_ID_0001\"\n        with step(\"点击搜索输入框，输入内容\"):\n            terminal_page.search_terminal_by_id(fixed_terminal_id)\n        time.sleep(0.5)\n        with step(\"点击搜索按钮\"):\n            terminal_page.click_search_terminal_button()\n            time.sleep(0.5)\n>           all_terminal_ids = terminal_page.all_terminal_ids()\n\ntest_case\\test_terminal_center.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:370: in all_terminal_ids\n    all_text = e.text\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DF500EE7D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF68A78E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68A8278A2+54818]\nE       \t(No symbol) [0x00007FF68A796AD2]\nE       \t(No symbol) [0x00007FF68A64DA3B]\nE       \t(No symbol) [0x00007FF68A65246D]\nE       \t(No symbol) [0x00007FF68A653F5F]\nE       \t(No symbol) [0x00007FF68A654050]\nE       \t(No symbol) [0x00007FF68A689D2E]\nE       \t(No symbol) [0x00007FF68A6AEAAA]\nE       \t(No symbol) [0x00007FF68A685036]\nE       \t(No symbol) [0x00007FF68A6AECC0]\nE       \t(No symbol) [0x00007FF68A6C75A2]\nE       \t(No symbol) [0x00007FF68A6AE883]\nE       \t(No symbol) [0x00007FF68A683691]\nE       \t(No symbol) [0x00007FF68A6848D4]\nE       \tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF68ABE1870+3962352]\nE       \tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF68A8C3656+693206]\nE       \t(No symbol) [0x00007FF68A7A1638]\nE       \t(No symbol) [0x00007FF68A79D944]\nE       \t(No symbol) [0x00007FF68A79DA72]\nE       \t(No symbol) [0x00007FF68A78E123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "steps": [{"name": "前提：切到设备中心去，而且新增一个设备", "status": "passed", "steps": [{"name": "点击设备接入", "status": "passed", "start": 1720073266494, "stop": 1720073267163}, {"name": "输入设备sn码", "status": "passed", "start": 1720073267672, "stop": 1720073267779}, {"name": "输入设备名称", "status": "passed", "start": 1720073267779, "stop": 1720073267898}, {"name": "先点击所属机构", "status": "passed", "start": 1720073267898, "stop": 1720073267975}, {"name": "在下拉框展开组织架构", "status": "passed", "start": 1720073267975, "stop": 1720073269057}, {"name": "在下拉框进行选择", "status": "passed", "start": 1720073269568, "stop": 1720073271229}, {"name": "点击保存按钮", "status": "passed", "start": 1720073271740, "stop": 1720073312108}], "start": 1720073265825, "stop": 1720073332165}, {"name": "点击搜索输入框，输入内容", "status": "passed", "start": 1720073332165, "stop": 1720073332295}, {"name": "点击搜索按钮", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF68A8278A2+54818]\n\t(No symbol) [0x00007FF68A796AD2]\n\t(No symbol) [0x00007FF68A64DA3B]\n\t(No symbol) [0x00007FF68A65246D]\n\t(No symbol) [0x00007FF68A653F5F]\n\t(No symbol) [0x00007FF68A654050]\n\t(No symbol) [0x00007FF68A689D2E]\n\t(No symbol) [0x00007FF68A6AEAAA]\n\t(No symbol) [0x00007FF68A685036]\n\t(No symbol) [0x00007FF68A6AECC0]\n\t(No symbol) [0x00007FF68A6C75A2]\n\t(No symbol) [0x00007FF68A6AE883]\n\t(No symbol) [0x00007FF68A683691]\n\t(No symbol) [0x00007FF68A6848D4]\n\tGetHandleVerifier [0x00007FF68AB8B9A2+3610402]\n\tGetHandleVerifier [0x00007FF68ABE1870+3962352]\n\tGetHandleVerifier [0x00007FF68ABD9D5F+3930847]\n\tGetHandleVerifier [0x00007FF68A8C3656+693206]\n\t(No symbol) [0x00007FF68A7A1638]\n\t(No symbol) [0x00007FF68A79D944]\n\t(No symbol) [0x00007FF68A79DA72]\n\t(No symbol) [0x00007FF68A78E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_terminal_center.py\", line 106, in test_search_terminal_by_id\n    all_terminal_ids = terminal_page.all_terminal_ids()\n  File \"D:\\git\\ui_test\\pageobject\\terminal_page.py\", line 370, in all_terminal_ids\n    all_text = e.text\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 90, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1720073332805, "stop": 1720073334419}], "attachments": [{"name": "log", "source": "9d182829-64ec-43ef-ba0d-78323dbd7fbf-attachment.txt", "type": "text/plain"}], "start": 1720073265800, "stop": 1720073334434, "uuid": "05692a31-57ef-47ca-910f-5a10708506f3", "historyId": "9c5fcadb58cc653fa353bd700e6fc356", "testCaseId": "9c5fcadb58cc653fa353bd700e6fc356", "fullName": "test_case.test_terminal_center.TestTerminalCenter#test_search_terminal_by_id", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "terminal_center"}, {"name": "tag", "value": "run(order=1)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('env')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_terminal_center"}, {"name": "subSuite", "value": "TestTerminalCenter"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "24200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_terminal_center"}]}