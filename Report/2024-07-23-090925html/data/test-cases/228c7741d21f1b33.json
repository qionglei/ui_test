{"uid":"228c7741d21f1b33","name":"节目编排-选节目-预览所有","fullName":"test_case.test_release_management.TestReleaseStrategy#test_program_edit_preview_all","historyId":"842fd511b209a8cdf26b375ec103b1c9","time":{"start":1721697351801,"stop":1721697404540,"duration":52739},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485A246D]\n\t(No symbol) [0x00007FF6485A3F5F]\n\t(No symbol) [0x00007FF6485A4050]\n\t(No symbol) [0x00007FF6485E3DB1]\n\t(No symbol) [0x00007FF6485E34C6]\n\t(No symbol) [0x00007FF64861F958]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000002C2640EC3A0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c1af9cdc56e63da73001222f85b5164f\")>\n\n    @pytest.mark.run(order=35)\n    @allure.title(\"节目编排-选节目-预览所有\")\n    def test_program_edit_preview_all(self, driver):\n    \n        release_page = self.release_page\n        release_page.refresh()\n        # 前提：生成一个普通节目\n        program_page = ProgramPage(driver)\n    \n        program_page.switch_to_program_management()\n        program_page.create_general_program()\n    \n        mediapage = MediaPage(driver)\n        program_list_class = ProgramList()\n        program_list_all = program_list_class.get_program_list_names()\n        print(\"所有的节目名名称为\", program_list_all)\n        if not program_list_all:\n            program_page.create_general_program()\n    \n        with step('点击节目编排'):\n            release_page.switch_to_release_management()\n            release_page.program_edit()\n    \n        with step(\"点击新增按钮\"):\n            release_page.click_add_program()\n    \n        with step(\"鼠标hover到一个节目上面\"):\n            release_page.hover_program_and_choice()\n            time.sleep(3)\n        with step(\"选择一个节目\"):\n>           release_page.choose_program_and_choice()\n\ntest_case\\test_release_management.py:990: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:758: in choose_program_and_choice\n    ActionChains(self.driver).move_to_element(first_locator).click(first_locator).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C27FCCAEC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF6486DE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FF949A7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF949BCAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6487778A2+54818]\nE       \t(No symbol) [0x00007FF6486E6AD2]\nE       \t(No symbol) [0x00007FF64859DA3B]\nE       \t(No symbol) [0x00007FF6485A246D]\nE       \t(No symbol) [0x00007FF6485A3F5F]\nE       \t(No symbol) [0x00007FF6485A4050]\nE       \t(No symbol) [0x00007FF6485E3DB1]\nE       \t(No symbol) [0x00007FF6485E34C6]\nE       \t(No symbol) [0x00007FF64861F958]\nE       \t(No symbol) [0x00007FF6485FEAAA]\nE       \t(No symbol) [0x00007FF6486175A2]\nE       \t(No symbol) [0x00007FF6485FE883]\nE       \t(No symbol) [0x00007FF6485D3691]\nE       \t(No symbol) [0x00007FF6485D48D4]\nE       \tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF648B31870+3962352]\nE       \tGetHandleVerifier [0x00007FF648B29D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF648813656+693206]\nE       \t(No symbol) [0x00007FF6486F1638]\nE       \t(No symbol) [0x00007FF6486ED944]\nE       \t(No symbol) [0x00007FF6486EDA72]\nE       \t(No symbol) [0x00007FF6486DE123]\nE       \tBaseThreadInitThunk [0x00007FF949A7257D+29]\nE       \tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721696974282,"stop":1721696974444,"duration":162},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"env","time":{"start":1721696974444,"stop":1721696974445,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1721696974446,"stop":1721697002017,"duration":27571},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"release_page","time":{"start":1721697002017,"stop":1721697002017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485A246D]\n\t(No symbol) [0x00007FF6485A3F5F]\n\t(No symbol) [0x00007FF6485A4050]\n\t(No symbol) [0x00007FF6485E3DB1]\n\t(No symbol) [0x00007FF6485E34C6]\n\t(No symbol) [0x00007FF64861F958]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000002C2640EC3A0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c1af9cdc56e63da73001222f85b5164f\")>\n\n    @pytest.mark.run(order=35)\n    @allure.title(\"节目编排-选节目-预览所有\")\n    def test_program_edit_preview_all(self, driver):\n    \n        release_page = self.release_page\n        release_page.refresh()\n        # 前提：生成一个普通节目\n        program_page = ProgramPage(driver)\n    \n        program_page.switch_to_program_management()\n        program_page.create_general_program()\n    \n        mediapage = MediaPage(driver)\n        program_list_class = ProgramList()\n        program_list_all = program_list_class.get_program_list_names()\n        print(\"所有的节目名名称为\", program_list_all)\n        if not program_list_all:\n            program_page.create_general_program()\n    \n        with step('点击节目编排'):\n            release_page.switch_to_release_management()\n            release_page.program_edit()\n    \n        with step(\"点击新增按钮\"):\n            release_page.click_add_program()\n    \n        with step(\"鼠标hover到一个节目上面\"):\n            release_page.hover_program_and_choice()\n            time.sleep(3)\n        with step(\"选择一个节目\"):\n>           release_page.choose_program_and_choice()\n\ntest_case\\test_release_management.py:990: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:758: in choose_program_and_choice\n    ActionChains(self.driver).move_to_element(first_locator).click(first_locator).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C27FCCAEC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF6486DE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FF949A7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF949BCAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6487778A2+54818]\nE       \t(No symbol) [0x00007FF6486E6AD2]\nE       \t(No symbol) [0x00007FF64859DA3B]\nE       \t(No symbol) [0x00007FF6485A246D]\nE       \t(No symbol) [0x00007FF6485A3F5F]\nE       \t(No symbol) [0x00007FF6485A4050]\nE       \t(No symbol) [0x00007FF6485E3DB1]\nE       \t(No symbol) [0x00007FF6485E34C6]\nE       \t(No symbol) [0x00007FF64861F958]\nE       \t(No symbol) [0x00007FF6485FEAAA]\nE       \t(No symbol) [0x00007FF6486175A2]\nE       \t(No symbol) [0x00007FF6485FE883]\nE       \t(No symbol) [0x00007FF6485D3691]\nE       \t(No symbol) [0x00007FF6485D48D4]\nE       \tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF648B31870+3962352]\nE       \tGetHandleVerifier [0x00007FF648B29D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF648813656+693206]\nE       \t(No symbol) [0x00007FF6486F1638]\nE       \t(No symbol) [0x00007FF6486ED944]\nE       \t(No symbol) [0x00007FF6486EDA72]\nE       \t(No symbol) [0x00007FF6486DE123]\nE       \tBaseThreadInitThunk [0x00007FF949A7257D+29]\nE       \tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"点击创建节目","time":{"start":1721697352212,"stop":1721697352298,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"输入节目名称（普通节目）","time":{"start":1721697352298,"stop":1721697352518,"duration":220},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"选择屏幕方向","time":{"start":1721697352518,"stop":1721697352662,"duration":144},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"选择分辨率","time":{"start":1721697352662,"stop":1721697353087,"duration":425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"点击保存按钮","time":{"start":1721697353087,"stop":1721697353143,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"选择分辨率","time":{"start":1721697353143,"stop":1721697394503,"duration":41360},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"在编辑器中进行保存","time":{"start":1721697394503,"stop":1721697397375,"duration":2872},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"点击节目编排","time":{"start":1721697397731,"stop":1721697398906,"duration":1175},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"点击新增按钮","time":{"start":1721697398906,"stop":1721697399664,"duration":758},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"鼠标hover到一个节目上面","time":{"start":1721697399664,"stop":1721697403728,"duration":4064},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"选择一个节目","time":{"start":1721697403728,"stop":1721697404539,"duration":811},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485A246D]\n\t(No symbol) [0x00007FF6485A3F5F]\n\t(No symbol) [0x00007FF6485A4050]\n\t(No symbol) [0x00007FF6485E3DB1]\n\t(No symbol) [0x00007FF6485E34C6]\n\t(No symbol) [0x00007FF64861F958]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_release_management.py\", line 990, in test_program_edit_preview_all\n    release_page.choose_program_and_choice()\n  File \"D:\\git\\ui_test\\pageobject\\release_page.py\", line 758, in choose_program_and_choice\n    ActionChains(self.driver).move_to_element(first_locator).click(first_locator).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":11},"afterStages":[{"name":"release_page::0","time":{"start":1721697497107,"stop":1721697497107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1721697497113,"stop":1721697504066,"duration":6953},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"release management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=35)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseStrategy"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"11524-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=35)"]},"source":"228c7741d21f1b33.json","parameterValues":[]}