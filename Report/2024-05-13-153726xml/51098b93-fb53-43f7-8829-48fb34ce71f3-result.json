{"name": "将引用的节目单进行暂存操作", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-1b769ff6=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 125). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-9805-38\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BDA3B]\n\t(No symbol) [0x00007FF6402047CB]\n\t(No symbol) [0x00007FF640202B99]\n\t(No symbol) [0x00007FF640200968]\n\t(No symbol) [0x00007FF6401FFA23]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3dd816639f514320494dc00a6f883172\")>\n\n    @pytest.fixture(scope='class')\n    def init_play_bill(driver):\n        \"\"\"\n        初始化节目单，如果没有节目单，则创建普通节目，进行发布操作\n        以达到环境初始化的作用\n        \"\"\"\n        try:\n            play_bill = PlayBill()\n            program_page = ProgramPage(driver)\n            release_page = ReleasePage(driver)\n            terminal_page = TerminalPage(driver)\n            terminal_list = Terminal_List()\n            program_list = ProgramList()\n            all_play_bill_ids = play_bill.get_play_bill_ids()\n            if not all_play_bill_ids:\n                all_program_ids, program_folder_id = program_list.get_program_list_ids()\n                all_terminal_list = terminal_list.get_terminal_list()\n                if not all_terminal_list:\n                    terminal_page.add_new_terminal()\n                if not all_program_ids:\n                    program_page.switch_to_program_management()\n>                   program_page.create_general_program()\n\ntest_case\\test_play_bill.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:47: in create_general_program\n    self.click_create_program()\npageobject\\program_page.py:157: in click_create_program\n    self.click(create_program_locator)\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002482DD189A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6402FE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-1b769ff6=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 125). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-9805-38\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6403978A2+54818]\nE       \t(No symbol) [0x00007FF640306AD2]\nE       \t(No symbol) [0x00007FF6401BDA3B]\nE       \t(No symbol) [0x00007FF6402047CB]\nE       \t(No symbol) [0x00007FF640202B99]\nE       \t(No symbol) [0x00007FF640200968]\nE       \t(No symbol) [0x00007FF6401FFA23]\nE       \t(No symbol) [0x00007FF6401F571F]\nE       \t(No symbol) [0x00007FF64021EAAA]\nE       \t(No symbol) [0x00007FF6401F5036]\nE       \t(No symbol) [0x00007FF64021ECC0]\nE       \t(No symbol) [0x00007FF6402375A2]\nE       \t(No symbol) [0x00007FF64021E883]\nE       \t(No symbol) [0x00007FF6401F3691]\nE       \t(No symbol) [0x00007FF6401F48D4]\nE       \tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF640751870+3962352]\nE       \tGetHandleVerifier [0x00007FF640749D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF640433656+693206]\nE       \t(No symbol) [0x00007FF640311638]\nE       \t(No symbol) [0x00007FF64030D944]\nE       \t(No symbol) [0x00007FF64030DA72]\nE       \t(No symbol) [0x00007FF6402FE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1715586454736, "stop": 1715586454736, "uuid": "83ed9021-7338-4839-a5d2-4d0d928ffa2c", "historyId": "75ff08d439c2e248ef70aee5820ade6e", "testCaseId": "75ff08d439c2e248ef70aee5820ade6e", "fullName": "test_case.test_play_bill.TestPlayBill#test_copy_play_bill_temporary_storage", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "play bill list"}, {"name": "tag", "value": "@pytest.mark.usefixtures('generate_one_program')"}, {"name": "tag", "value": "run(order=5)"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_play_bill"}, {"name": "subSuite", "value": "TestPlayBill"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "8424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_play_bill"}]}