{"uid":"3b915133c311e7f8","name":"从节目管理中，点击发布，跳转到节目发布","fullName":"test_case.test_program_management.TestProgramManagement#test_program_release","historyId":"bcdf056ab0bd176222c8c54f3ff311c2","time":{"start":1714959632034,"stop":1714959632034,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 265). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6096-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70D2C78A2+54818]\n\t(No symbol) [0x00007FF70D236AD2]\n\t(No symbol) [0x00007FF70D0EDA3B]\n\t(No symbol) [0x00007FF70D1347CB]\n\t(No symbol) [0x00007FF70D132B99]\n\t(No symbol) [0x00007FF70D130968]\n\t(No symbol) [0x00007FF70D12FA23]\n\t(No symbol) [0x00007FF70D12571F]\n\t(No symbol) [0x00007FF70D14EAAA]\n\t(No symbol) [0x00007FF70D125036]\n\t(No symbol) [0x00007FF70D14ECC0]\n\t(No symbol) [0x00007FF70D1675A2]\n\t(No symbol) [0x00007FF70D14E883]\n\t(No symbol) [0x00007FF70D123691]\n\t(No symbol) [0x00007FF70D1248D4]\n\tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\n\tGetHandleVerifier [0x00007FF70D681870+3962352]\n\tGetHandleVerifier [0x00007FF70D679D5F+3930847]\n\tGetHandleVerifier [0x00007FF70D363656+693206]\n\t(No symbol) [0x00007FF70D241638]\n\t(No symbol) [0x00007FF70D23D944]\n\t(No symbol) [0x00007FF70D23DA72]\n\t(No symbol) [0x00007FF70D22E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"program_page = <pageobject.program_page.ProgramPage object at 0x00000238E141E800>\n\n    @pytest.fixture()\n    def program_management_set_up(program_page):\n        # 1、清理所有的节目，避免形成干扰\n        programlist = ProgramList()\n        programlist.get_program_list_ids()\n        programlist.delete_all_program()\n>       program_page.switch_to_program_management()\n\ntest_case\\test_program_management.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:28: in switch_to_program_management\n    self.click(media_center_locator)\nbasepage\\base_page.py:240: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000238DF9F40D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF70D22E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 265). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6096-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70D2C78A2+54818]\nE       \t(No symbol) [0x00007FF70D236AD2]\nE       \t(No symbol) [0x00007FF70D0EDA3B]\nE       \t(No symbol) [0x00007FF70D1347CB]\nE       \t(No symbol) [0x00007FF70D132B99]\nE       \t(No symbol) [0x00007FF70D130968]\nE       \t(No symbol) [0x00007FF70D12FA23]\nE       \t(No symbol) [0x00007FF70D12571F]\nE       \t(No symbol) [0x00007FF70D14EAAA]\nE       \t(No symbol) [0x00007FF70D125036]\nE       \t(No symbol) [0x00007FF70D14ECC0]\nE       \t(No symbol) [0x00007FF70D1675A2]\nE       \t(No symbol) [0x00007FF70D14E883]\nE       \t(No symbol) [0x00007FF70D123691]\nE       \t(No symbol) [0x00007FF70D1248D4]\nE       \tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF70D681870+3962352]\nE       \tGetHandleVerifier [0x00007FF70D679D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF70D363656+693206]\nE       \t(No symbol) [0x00007FF70D241638]\nE       \t(No symbol) [0x00007FF70D23D944]\nE       \t(No symbol) [0x00007FF70D23DA72]\nE       \t(No symbol) [0x00007FF70D22E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1714957862102,"stop":1714957862102,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1714957862102,"stop":1714958176133,"duration":314031},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"program_page","time":{"start":1714959632034,"stop":1714959632035,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"program_management_set_up","time":{"start":1714959632035,"stop":1714959634645,"duration":2610},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 265). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6096-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70D2C78A2+54818]\n\t(No symbol) [0x00007FF70D236AD2]\n\t(No symbol) [0x00007FF70D0EDA3B]\n\t(No symbol) [0x00007FF70D1347CB]\n\t(No symbol) [0x00007FF70D132B99]\n\t(No symbol) [0x00007FF70D130968]\n\t(No symbol) [0x00007FF70D12FA23]\n\t(No symbol) [0x00007FF70D12571F]\n\t(No symbol) [0x00007FF70D14EAAA]\n\t(No symbol) [0x00007FF70D125036]\n\t(No symbol) [0x00007FF70D14ECC0]\n\t(No symbol) [0x00007FF70D1675A2]\n\t(No symbol) [0x00007FF70D14E883]\n\t(No symbol) [0x00007FF70D123691]\n\t(No symbol) [0x00007FF70D1248D4]\n\tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\n\tGetHandleVerifier [0x00007FF70D681870+3962352]\n\tGetHandleVerifier [0x00007FF70D679D5F+3930847]\n\tGetHandleVerifier [0x00007FF70D363656+693206]\n\t(No symbol) [0x00007FF70D241638]\n\t(No symbol) [0x00007FF70D23D944]\n\t(No symbol) [0x00007FF70D23DA72]\n\t(No symbol) [0x00007FF70D22E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 1130, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 909, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"D:\\ui\\test_case\\test_program_management.py\", line 26, in program_management_set_up\n    program_page.switch_to_program_management()\n  File \"D:\\ui\\pageobject\\program_page.py\", line 28, in switch_to_program_management\n    self.click(media_center_locator)\n  File \"D:\\ui\\basepage\\base_page.py\", line 240, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true}],"afterStages":[{"name":"program_page::0","time":{"start":1714959634695,"stop":1714959634695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1714959764520,"stop":1714959768644,"duration":4124},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"program management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=22)"},{"name":"tag","value":"@pytest.mark.usefixtures('program_management_set_up')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_program_management"},{"name":"subSuite","value":"TestProgramManagement"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"11692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_program_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=22)","@pytest.mark.usefixtures('program_management_set_up')"]},"source":"3b915133c311e7f8.json","parameterValues":[]}