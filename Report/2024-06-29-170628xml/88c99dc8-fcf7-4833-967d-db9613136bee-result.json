{"name": "节目编排-选节目-预览仅一个节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60C0578A2+54818]\n\t(No symbol) [0x00007FF60BFC6AD2]\n\t(No symbol) [0x00007FF60BE7DA3B]\n\t(No symbol) [0x00007FF60BE8246D]\n\t(No symbol) [0x00007FF60BE83F5F]\n\t(No symbol) [0x00007FF60BE84050]\n\t(No symbol) [0x00007FF60BEC3DB1]\n\t(No symbol) [0x00007FF60BEC34C6]\n\t(No symbol) [0x00007FF60BEFF958]\n\t(No symbol) [0x00007FF60BEDEAAA]\n\t(No symbol) [0x00007FF60BEF75A2]\n\t(No symbol) [0x00007FF60BEDE883]\n\t(No symbol) [0x00007FF60BEB3691]\n\t(No symbol) [0x00007FF60BEB48D4]\n\tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60C411870+3962352]\n\tGetHandleVerifier [0x00007FF60C409D5F+3930847]\n\tGetHandleVerifier [0x00007FF60C0F3656+693206]\n\t(No symbol) [0x00007FF60BFD1638]\n\t(No symbol) [0x00007FF60BFCD944]\n\t(No symbol) [0x00007FF60BFCDA72]\n\t(No symbol) [0x00007FF60BFBE123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]", "trace": "self = <test_case.test_release_management.TestReleaseStrategy object at 0x0000016F88929000>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e4fa13172d43df2765635531733dc6d2\")>\n\n    @pytest.mark.run(order=36)\n    @allure.title(\"节目编排-选节目-预览仅一个节目\")\n    def test_program_edit_preview_one(self, driver):\n    \n        release_page = self.release_page\n        release_page.refresh()\n        # 前提：生成一个普通节目\n    \n        program_page = ProgramPage(driver)\n    \n        program_page.switch_to_program_management()\n        program_page.create_general_program()\n        with step('点击节目编排'):\n            release_page.switch_to_release_management()\n            release_page.program_edit()\n    \n        with step(\"点击新增按钮\"):\n            release_page.click_add_program()\n    \n        mediapage = MediaPage(driver)\n        program_list_class = ProgramList()\n        with step(\"通过接口，拿到节目列表中所有的节目名称\"):\n            program_list_all = program_list_class.get_program_list_names()\n            print(\"所有的节目名名称为\", program_list_all)\n            program_name = program_list_all[0]\n            print(\"拿到的第一个的节目名名称为\", program_name)\n            time.sleep(0.5)\n        with step(\"鼠标hover到一个节目上面\"):\n            mediapage.hover_to_media()\n            time.sleep(1)\n        with step(\"选择一个节目\"):\n>           release_page.choose_program_and_choice()\n\ntest_case\\test_release_management.py:1045: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:755: in choose_program_and_choice\n    ActionChains(self.driver).move_to_element(first_locator).click(first_locator).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016FB0519420>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF60BFBE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60C0578A2+54818]\nE       \t(No symbol) [0x00007FF60BFC6AD2]\nE       \t(No symbol) [0x00007FF60BE7DA3B]\nE       \t(No symbol) [0x00007FF60BE8246D]\nE       \t(No symbol) [0x00007FF60BE83F5F]\nE       \t(No symbol) [0x00007FF60BE84050]\nE       \t(No symbol) [0x00007FF60BEC3DB1]\nE       \t(No symbol) [0x00007FF60BEC34C6]\nE       \t(No symbol) [0x00007FF60BEFF958]\nE       \t(No symbol) [0x00007FF60BEDEAAA]\nE       \t(No symbol) [0x00007FF60BEF75A2]\nE       \t(No symbol) [0x00007FF60BEDE883]\nE       \t(No symbol) [0x00007FF60BEB3691]\nE       \t(No symbol) [0x00007FF60BEB48D4]\nE       \tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF60C411870+3962352]\nE       \tGetHandleVerifier [0x00007FF60C409D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF60C0F3656+693206]\nE       \t(No symbol) [0x00007FF60BFD1638]\nE       \t(No symbol) [0x00007FF60BFCD944]\nE       \t(No symbol) [0x00007FF60BFCDA72]\nE       \t(No symbol) [0x00007FF60BFBE123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "steps": [{"name": "点击创建节目", "status": "passed", "start": 1719652460496, "stop": 1719652460613}, {"name": "输入节目名称（普通节目）", "status": "passed", "start": 1719652460613, "stop": 1719652460836}, {"name": "选择屏幕方向", "status": "passed", "start": 1719652460837, "stop": 1719652460979}, {"name": "选择分辨率", "status": "passed", "start": 1719652460979, "stop": 1719652461392}, {"name": "点击保存按钮", "status": "passed", "start": 1719652461392, "stop": 1719652461438}, {"name": "选择分辨率", "status": "passed", "start": 1719652461438, "stop": 1719652502861}, {"name": "在编辑器中进行保存", "status": "passed", "start": 1719652502861, "stop": 1719652505657}, {"name": "点击节目编排", "status": "passed", "start": 1719652505657, "stop": 1719652506931}, {"name": "点击新增按钮", "status": "passed", "start": 1719652506931, "stop": 1719652507521}, {"name": "通过接口，拿到节目列表中所有的节目名称", "status": "passed", "start": 1719652507521, "stop": 1719652509597}, {"name": "鼠标hover到一个节目上面", "status": "passed", "start": 1719652509597, "stop": 1719652512392}, {"name": "选择一个节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60C0578A2+54818]\n\t(No symbol) [0x00007FF60BFC6AD2]\n\t(No symbol) [0x00007FF60BE7DA3B]\n\t(No symbol) [0x00007FF60BE8246D]\n\t(No symbol) [0x00007FF60BE83F5F]\n\t(No symbol) [0x00007FF60BE84050]\n\t(No symbol) [0x00007FF60BEC3DB1]\n\t(No symbol) [0x00007FF60BEC34C6]\n\t(No symbol) [0x00007FF60BEFF958]\n\t(No symbol) [0x00007FF60BEDEAAA]\n\t(No symbol) [0x00007FF60BEF75A2]\n\t(No symbol) [0x00007FF60BEDE883]\n\t(No symbol) [0x00007FF60BEB3691]\n\t(No symbol) [0x00007FF60BEB48D4]\n\tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60C411870+3962352]\n\tGetHandleVerifier [0x00007FF60C409D5F+3930847]\n\tGetHandleVerifier [0x00007FF60C0F3656+693206]\n\t(No symbol) [0x00007FF60BFD1638]\n\t(No symbol) [0x00007FF60BFCD944]\n\t(No symbol) [0x00007FF60BFCDA72]\n\t(No symbol) [0x00007FF60BFBE123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_release_management.py\", line 1045, in test_program_edit_preview_one\n    release_page.choose_program_and_choice()\n  File \"D:\\git\\ui_test\\pageobject\\release_page.py\", line 755, in choose_program_and_choice\n    ActionChains(self.driver).move_to_element(first_locator).click(first_locator).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1719652512392, "stop": 1719652512915}], "start": 1719652460192, "stop": 1719652512915, "uuid": "7d4e06f4-e8c2-4114-8fe2-fc78a1f2c99a", "historyId": "19023ac8521ba830dfe2c13630941bcb", "testCaseId": "19023ac8521ba830dfe2c13630941bcb", "fullName": "test_case.test_release_management.TestReleaseStrategy#test_program_edit_preview_one", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "release management"}, {"name": "tag", "value": "run(order=36)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('release_page')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_release_management"}, {"name": "subSuite", "value": "TestReleaseStrategy"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "18940-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_release_management"}]}