{"uid":"df980bf5d95e4951","name":"设备设置中，直接点击保存","fullName":"test_case.test_terminal_center.TestTerminalCenter#test_click_terminal_setting","historyId":"331a599bbc0d87de471348e835809594","time":{"start":1719882794834,"stop":1719882796515,"duration":1681},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-9c2770a4=\"\" src=\"https://test.hkciot.com/images/device/table_4.png\" alt=\"\" title=\"设置\"> is not clickable at point (898, 362). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-8473-53\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7545378A2+54818]\n\t(No symbol) [0x00007FF7544A6AD2]\n\t(No symbol) [0x00007FF75435DA3B]\n\t(No symbol) [0x00007FF7543A47CB]\n\t(No symbol) [0x00007FF7543A2B99]\n\t(No symbol) [0x00007FF7543A0968]\n\t(No symbol) [0x00007FF75439FA23]\n\t(No symbol) [0x00007FF75439571F]\n\t(No symbol) [0x00007FF7543BEAAA]\n\t(No symbol) [0x00007FF754395036]\n\t(No symbol) [0x00007FF7543BECC0]\n\t(No symbol) [0x00007FF7543D75A2]\n\t(No symbol) [0x00007FF7543BE883]\n\t(No symbol) [0x00007FF754393691]\n\t(No symbol) [0x00007FF7543948D4]\n\tGetHandleVerifier [0x00007FF75489B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7548F1870+3962352]\n\tGetHandleVerifier [0x00007FF7548E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7545D3656+693206]\n\t(No symbol) [0x00007FF7544B1638]\n\t(No symbol) [0x00007FF7544AD944]\n\t(No symbol) [0x00007FF7544ADA72]\n\t(No symbol) [0x00007FF75449E123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x000001F947307B80>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @pytest.mark.usefixtures('terminal_set_up')\n    @allure.title(\"设备设置中，直接点击保存\")\n    @pytest.mark.run(order=23)\n    def test_click_terminal_setting(self):\n        terminal_page = self.terminal_page\n        # terminal_page.switch_to_terminal_center()\n        # terminal_page.bind_terminal()\n        # sql_execute()\n        time.sleep(0.5)\n>       terminal_page.click_terminal_setting()\n\ntest_case\\test_terminal_center.py:546: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:233: in click_terminal_setting\n    self.click(terminal_setting_loca)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F96EECE710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF75449E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-9c2770a4=\"\" src=\"https://test.hkciot.com/images/device/table_4.png\" alt=\"\" title=\"设置\"> is not clickable at point (898, 362). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-8473-53\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7545378A2+54818]\nE       \t(No symbol) [0x00007FF7544A6AD2]\nE       \t(No symbol) [0x00007FF75435DA3B]\nE       \t(No symbol) [0x00007FF7543A47CB]\nE       \t(No symbol) [0x00007FF7543A2B99]\nE       \t(No symbol) [0x00007FF7543A0968]\nE       \t(No symbol) [0x00007FF75439FA23]\nE       \t(No symbol) [0x00007FF75439571F]\nE       \t(No symbol) [0x00007FF7543BEAAA]\nE       \t(No symbol) [0x00007FF754395036]\nE       \t(No symbol) [0x00007FF7543BECC0]\nE       \t(No symbol) [0x00007FF7543D75A2]\nE       \t(No symbol) [0x00007FF7543BE883]\nE       \t(No symbol) [0x00007FF754393691]\nE       \t(No symbol) [0x00007FF7543948D4]\nE       \tGetHandleVerifier [0x00007FF75489B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7548F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7548E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7545D3656+693206]\nE       \t(No symbol) [0x00007FF7544B1638]\nE       \t(No symbol) [0x00007FF7544AD944]\nE       \t(No symbol) [0x00007FF7544ADA72]\nE       \t(No symbol) [0x00007FF75449E123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1719882119502,"stop":1719882119687,"duration":185},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"env","time":{"start":1719882119687,"stop":1719882119688,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1719882119688,"stop":1719882153690,"duration":34002},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"set_up_org","time":{"start":1719882153690,"stop":1719882156529,"duration":2839},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"sys_page","time":{"start":1719882156531,"stop":1719882156531,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"terminal_page","time":{"start":1719882156531,"stop":1719882156531,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"terminal_set_up","time":{"start":1719882793108,"stop":1719882793182,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"clear_terminal_list","time":{"start":1719882793183,"stop":1719882794833,"duration":1650},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"terminal_page::0","time":{"start":1719883481389,"stop":1719883481389,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"sys_page::0","time":{"start":1719883481394,"stop":1719883481394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1719883481408,"stop":1719883489594,"duration":8186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"terminal_center"},{"name":"tag","value":"run(order=23)"},{"name":"tag","value":"@pytest.mark.usefixtures('terminal_set_up')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_terminal_center"},{"name":"subSuite","value":"TestTerminalCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"8316-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_terminal_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=23)","@pytest.mark.usefixtures('terminal_set_up')"]},"source":"df980bf5d95e4951.json","parameterValues":[]}