{"name": "在设备中心，点击更多按钮", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF613E378A2+54818]\n\t(No symbol) [0x00007FF613DA6AD2]\n\t(No symbol) [0x00007FF613C5DA3B]\n\t(No symbol) [0x00007FF613C6246D]\n\t(No symbol) [0x00007FF613C63F5F]\n\t(No symbol) [0x00007FF613C64050]\n\t(No symbol) [0x00007FF613CA3DB1]\n\t(No symbol) [0x00007FF613CA34C6]\n\t(No symbol) [0x00007FF613CDF958]\n\t(No symbol) [0x00007FF613CBEAAA]\n\t(No symbol) [0x00007FF613CD75A2]\n\t(No symbol) [0x00007FF613CBE883]\n\t(No symbol) [0x00007FF613C93691]\n\t(No symbol) [0x00007FF613C948D4]\n\tGetHandleVerifier [0x00007FF61419B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6141F1870+3962352]\n\tGetHandleVerifier [0x00007FF6141E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF613ED3656+693206]\n\t(No symbol) [0x00007FF613DB1638]\n\t(No symbol) [0x00007FF613DAD944]\n\t(No symbol) [0x00007FF613DADA72]\n\t(No symbol) [0x00007FF613D9E123]\n\tBaseThreadInitThunk [0x00007FFE205C257D+29]\n\tRtlUserThreadStart [0x00007FFE2104AA58+40]", "trace": "self = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000018AD3B01870>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"在设备中心，点击更多按钮\")\n    @pytest.mark.run(order=2)\n    def test_click_more_button(self):\n        terminal_page = self.terminal_page\n        # terminal_page.switch_to_terminal_center()\n        # sql_execute()\n        terminal_page.refresh()\n        time.sleep(0.5)\n>       terminal_page.add_new_terminal()\n\ntest_case\\test_terminal_center.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:56: in add_new_terminal\n    self.terminal_org_more()\npageobject\\terminal_page.py:140: in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018AFA559FF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF613D9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE205C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE2104AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF613E378A2+54818]\nE       \t(No symbol) [0x00007FF613DA6AD2]\nE       \t(No symbol) [0x00007FF613C5DA3B]\nE       \t(No symbol) [0x00007FF613C6246D]\nE       \t(No symbol) [0x00007FF613C63F5F]\nE       \t(No symbol) [0x00007FF613C64050]\nE       \t(No symbol) [0x00007FF613CA3DB1]\nE       \t(No symbol) [0x00007FF613CA34C6]\nE       \t(No symbol) [0x00007FF613CDF958]\nE       \t(No symbol) [0x00007FF613CBEAAA]\nE       \t(No symbol) [0x00007FF613CD75A2]\nE       \t(No symbol) [0x00007FF613CBE883]\nE       \t(No symbol) [0x00007FF613C93691]\nE       \t(No symbol) [0x00007FF613C948D4]\nE       \tGetHandleVerifier [0x00007FF61419B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6141F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF6141E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF613ED3656+693206]\nE       \t(No symbol) [0x00007FF613DB1638]\nE       \t(No symbol) [0x00007FF613DAD944]\nE       \t(No symbol) [0x00007FF613DADA72]\nE       \t(No symbol) [0x00007FF613D9E123]\nE       \tBaseThreadInitThunk [0x00007FFE205C257D+29]\nE       \tRtlUserThreadStart [0x00007FFE2104AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "steps": [{"name": "点击设备接入", "status": "passed", "start": 1716619194610, "stop": 1716619195358}, {"name": "输入设备sn码", "status": "passed", "start": 1716619195873, "stop": 1716619196115}, {"name": "输入设备名称", "status": "passed", "start": 1716619196115, "stop": 1716619196284}, {"name": "先点击所属机构", "status": "passed", "start": 1716619196284, "stop": 1716619206738}, {"name": "在下拉框展开组织架构", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF613E378A2+54818]\n\t(No symbol) [0x00007FF613DA6AD2]\n\t(No symbol) [0x00007FF613C5DA3B]\n\t(No symbol) [0x00007FF613C6246D]\n\t(No symbol) [0x00007FF613C63F5F]\n\t(No symbol) [0x00007FF613C64050]\n\t(No symbol) [0x00007FF613CA3DB1]\n\t(No symbol) [0x00007FF613CA34C6]\n\t(No symbol) [0x00007FF613CDF958]\n\t(No symbol) [0x00007FF613CBEAAA]\n\t(No symbol) [0x00007FF613CD75A2]\n\t(No symbol) [0x00007FF613CBE883]\n\t(No symbol) [0x00007FF613C93691]\n\t(No symbol) [0x00007FF613C948D4]\n\tGetHandleVerifier [0x00007FF61419B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6141F1870+3962352]\n\tGetHandleVerifier [0x00007FF6141E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF613ED3656+693206]\n\t(No symbol) [0x00007FF613DB1638]\n\t(No symbol) [0x00007FF613DAD944]\n\t(No symbol) [0x00007FF613DADA72]\n\t(No symbol) [0x00007FF613D9E123]\n\tBaseThreadInitThunk [0x00007FFE205C257D+29]\n\tRtlUserThreadStart [0x00007FFE2104AA58+40]\n\n", "trace": "  File \"D:\\ui\\pageobject\\terminal_page.py\", line 56, in add_new_terminal\n    self.terminal_org_more()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 140, in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1716619206738, "stop": 1716619207300}], "start": 1716619193350, "stop": 1716619207302, "uuid": "84df23c2-2d0f-462f-88ac-8728425e53c3", "historyId": "d8d547a9388ee1e0e9d9e0c52a5a5d7c", "testCaseId": "d8d547a9388ee1e0e9d9e0c52a5a5d7c", "fullName": "test_case.test_terminal_center.TestTerminalCenter#test_click_more_button", "labels": [{"name": "feature", "value": "terminal_center"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('clear_terminal_list')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_terminal_center"}, {"name": "subSuite", "value": "TestTerminalCenter"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "34648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_terminal_center"}]}