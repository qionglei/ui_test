{"name": "插播字幕，输入随机内容", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.24.0</center>\\r\\n</body>\\r\\n</html>\\r\\n'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nD:\\sw_install\\python-install\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000018AD22F4EB0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.24.0</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x0000018AD22E8380>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nD:\\sw_install\\python-install\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000018AD22F4EB0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.24.0</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\sw_install\\python-install\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000018AD3B30580>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"插播字幕，输入随机内容\")\n    @pytest.mark.run(order=6)\n    def test_insert_subtile_random_text(self):\n        terminal_page = self.terminal_page\n        random_text = random.randint(999, 9999999999)\n        # sql_execute()\n        with step(\"各种前提：\"):\n            time.sleep(0.5)\n>           terminal_page.add_real_terminal()\n\ntest_case\\test_terminal_center.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:287: in add_real_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:192: in confirm_bind_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:192: in confirm_bind_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:192: in confirm_bind_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:192: in confirm_bind_terminal\n    self.confirm_bind_terminal()\npageobject\\terminal_page.py:174: in confirm_bind_terminal\n    all_terminal = terminal_list.get_terminal_list()\ncommon\\set_up_terminal_list.py:37: in get_terminal_list\n    res = reponse.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "steps": [{"name": "各种前提：", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"D:\\ui\\test_case\\test_terminal_center.py\", line 239, in test_insert_subtile_random_text\n    terminal_page.add_real_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 287, in add_real_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  [Previous line repeated 1 more time]\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 174, in confirm_bind_terminal\n    all_terminal = terminal_list.get_terminal_list()\n  File \"D:\\ui\\common\\set_up_terminal_list.py\", line 37, in get_terminal_list\n    res = reponse.json()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "steps": [{"name": "进入设备中心", "status": "passed", "start": 1716619686485, "stop": 1716619688696}, {"name": "点击设备接入", "status": "passed", "start": 1716619688696, "stop": 1716619689930}, {"name": "输入设备sn码", "status": "passed", "start": 1716619689930, "stop": 1716619690679}, {"name": "输入设备名称", "status": "passed", "start": 1716619690679, "stop": 1716619691350}, {"name": "先点击所属机构", "status": "passed", "start": 1716619691350, "stop": 1716619691975}, {"name": "在下拉框展开组织架构", "status": "passed", "start": 1716619691975, "stop": 1716619699759}, {"name": "在下拉框进行选择", "status": "passed", "start": 1716619699759, "stop": 1716619721818}, {"name": "点击保存按钮", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"D:\\ui\\pageobject\\terminal_page.py\", line 287, in add_real_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 192, in confirm_bind_terminal\n    self.confirm_bind_terminal()\n  [Previous line repeated 1 more time]\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 174, in confirm_bind_terminal\n    all_terminal = terminal_list.get_terminal_list()\n  File \"D:\\ui\\common\\set_up_terminal_list.py\", line 37, in get_terminal_list\n    res = reponse.json()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\requests\\models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "start": 1716619721818, "stop": 1716620047009}], "start": 1716619685979, "stop": 1716620047027}], "start": 1716619685978, "stop": 1716620047029, "uuid": "f848e3f2-2cab-4643-a210-b1212195617e", "historyId": "16baf632259fef3893ba9e09c3701dd1", "testCaseId": "16baf632259fef3893ba9e09c3701dd1", "fullName": "test_case.test_terminal_center.TestTerminalCenter#test_insert_subtile_random_text", "labels": [{"name": "feature", "value": "terminal_center"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "run(order=6)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('clear_terminal_list')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_terminal_center"}, {"name": "subSuite", "value": "TestTerminalCenter"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "34648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_terminal_center"}]}