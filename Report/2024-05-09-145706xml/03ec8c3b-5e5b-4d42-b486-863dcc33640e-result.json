{"name": "将引用的节目单进行暂存操作", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EDF378A2+54818]\n\t(No symbol) [0x00007FF7EDEA6AD2]\n\t(No symbol) [0x00007FF7EDD5DA3B]\n\t(No symbol) [0x00007FF7EDD409D0]\n\t(No symbol) [0x00007FF7EDD3F24E]\n\t(No symbol) [0x00007FF7EDD40445]\n\t(No symbol) [0x00007FF7EDDEA9B6]\n\t(No symbol) [0x00007FF7EDDBEAAA]\n\t(No symbol) [0x00007FF7EDDD75A2]\n\t(No symbol) [0x00007FF7EDDBE883]\n\t(No symbol) [0x00007FF7EDD93691]\n\t(No symbol) [0x00007FF7EDD948D4]\n\tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\n\tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7EDFD3656+693206]\n\t(No symbol) [0x00007FF7EDEB1638]\n\t(No symbol) [0x00007FF7EDEAD944]\n\t(No symbol) [0x00007FF7EDEADA72]\n\t(No symbol) [0x00007FF7EDE9E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"78c943d178f3b249facec00ba397c26a\")>\n\n    @pytest.fixture()\n    def generate_one_program(driver):\n        \"\"\"\n        1、判断素材中心是不是有素材，有就先清空，再上传，再生成节目\n        2、没有就直接上传，再生成节目\n        :return:\n        \"\"\"\n    \n        media_list = MediaList()\n        mediapage = MediaPage(driver)\n        media_ids = media_list.get_media_list()\n        programlist = ProgramList()\n        program_names = programlist.get_program_list_names()\n    \n        if program_names == []:\n            if media_ids == []:\n                # 素材上传\n                time.sleep(0.3)\n                mediapage.switch_to_media_center()\n>               mediapage.upload_media()\n\ntest_case\\test_play_bill.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:57: in upload_media\n    self.set_window_size(*current_window_size)\nbasepage\\base_page.py:80: in set_window_size\n    self.driver.set_window_size(*size)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:865: in set_window_size\n    self.set_window_rect(width=int(width), height=int(height))\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:946: in set_window_rect\n    return self.execute(Command.SET_WINDOW_RECT, {\"x\": x, \"y\": y, \"width\": width, \"height\": height})[\"value\"]\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B6FE9D4D00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF7EDE9E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EDF378A2+54818]\nE       \t(No symbol) [0x00007FF7EDEA6AD2]\nE       \t(No symbol) [0x00007FF7EDD5DA3B]\nE       \t(No symbol) [0x00007FF7EDD409D0]\nE       \t(No symbol) [0x00007FF7EDD3F24E]\nE       \t(No symbol) [0x00007FF7EDD40445]\nE       \t(No symbol) [0x00007FF7EDDEA9B6]\nE       \t(No symbol) [0x00007FF7EDDBEAAA]\nE       \t(No symbol) [0x00007FF7EDDD75A2]\nE       \t(No symbol) [0x00007FF7EDDBE883]\nE       \t(No symbol) [0x00007FF7EDD93691]\nE       \t(No symbol) [0x00007FF7EDD948D4]\nE       \tGetHandleVerifier [0x00007FF7EE29B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7EE2F1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7EE2E9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7EDFD3656+693206]\nE       \t(No symbol) [0x00007FF7EDEB1638]\nE       \t(No symbol) [0x00007FF7EDEAD944]\nE       \t(No symbol) [0x00007FF7EDEADA72]\nE       \t(No symbol) [0x00007FF7EDE9E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1715238550690, "stop": 1715238550690, "uuid": "df5637cc-2b2a-4541-8963-ba38f28ee9e1", "historyId": "75ff08d439c2e248ef70aee5820ade6e", "testCaseId": "75ff08d439c2e248ef70aee5820ade6e", "fullName": "test_case.test_play_bill.TestPlayBill#test_copy_play_bill_temporary_storage", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "play bill list"}, {"name": "tag", "value": "@pytest.mark.usefixtures('generate_one_program')"}, {"name": "tag", "value": "run(order=5)"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_play_bill"}, {"name": "subSuite", "value": "TestPlayBill"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "3676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_play_bill"}]}