{"uid":"2efd6b2a15c24006","name":"使用状态过滤，过滤审批不通过节目单","fullName":"test_case.test_play_bill.TestPlayBill#test_filter_fail_to_approve_status","historyId":"9c98cefb9d4a9952d6d0f6b2126bb0ff","time":{"start":1715055420797,"stop":1715055420797,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2D8ED]\n\t(No symbol) [0x00007FF6ECF630DE]\n\t(No symbol) [0x00007FF6ECF8E9A2]\n\t(No symbol) [0x00007FF6ECF8A710]\n\t(No symbol) [0x00007FF6ECF8A016]\n\t(No symbol) [0x00007FF6ECF041D0]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ECF02FFE]\n\tGetHandleVerifier [0x00007FF6ED502288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_play_bill.TestPlayBill object at 0x0000026E349F0DF0>\n\n    @pytest.mark.run(order=14)\n    @allure.title(\"使用状态过滤，过滤审批不通过节目单\")\n    def test_filter_fail_to_approve_status(self):\n        play_bill_page = self.play_bill_page\n        release_page = self.release_page\n    \n        with step(\"侧边栏切到到发布管理\"):\n>           play_bill_page.switch_to_release_management()\n\ntest_case\\test_play_bill.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\play_bill_page.py:13: in switch_to_release_management\n    clickable_ele = self.get_element('by_xpath,//div[text()=\" 发布管理\"]/../..')\nbasepage\\base_page.py:126: in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026E5BD95DE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...02288+4227080]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6ED1078A2+54818]\nE       \t(No symbol) [0x00007FF6ED076AD2]\nE       \t(No symbol) [0x00007FF6ECF2D8ED]\nE       \t(No symbol) [0x00007FF6ECF630DE]\nE       \t(No symbol) [0x00007FF6ECF8E9A2]\nE       \t(No symbol) [0x00007FF6ECF8A710]\nE       \t(No symbol) [0x00007FF6ECF8A016]\nE       \t(No symbol) [0x00007FF6ECF041D0]\nE       \tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\nE       \tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6ED1A3656+693206]\nE       \t(No symbol) [0x00007FF6ED081638]\nE       \t(No symbol) [0x00007FF6ECF02FFE]\nE       \tGetHandleVerifier [0x00007FF6ED502288+4227080]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1715054381194,"stop":1715054389610,"duration":8416},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"env","time":{"start":1715054381194,"stop":1715054381194,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1715054396564,"stop":1715054405347,"duration":8783},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"release_page","time":{"start":1715055420712,"stop":1715055420712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"play_bill_page","time":{"start":1715055420712,"stop":1715055420712,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"init_play_bill","time":{"start":1715055420712,"stop":1715055420797,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2D8ED]\n\t(No symbol) [0x00007FF6ECF630DE]\n\t(No symbol) [0x00007FF6ECF8E9A2]\n\t(No symbol) [0x00007FF6ECF8A710]\n\t(No symbol) [0x00007FF6ECF8A016]\n\t(No symbol) [0x00007FF6ECF041D0]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ECF02FFE]\n\tGetHandleVerifier [0x00007FF6ED502288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_play_bill.TestPlayBill object at 0x0000026E349F0DF0>\n\n    @pytest.mark.run(order=14)\n    @allure.title(\"使用状态过滤，过滤审批不通过节目单\")\n    def test_filter_fail_to_approve_status(self):\n        play_bill_page = self.play_bill_page\n        release_page = self.release_page\n    \n        with step(\"侧边栏切到到发布管理\"):\n>           play_bill_page.switch_to_release_management()\n\ntest_case\\test_play_bill.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\play_bill_page.py:13: in switch_to_release_management\n    clickable_ele = self.get_element('by_xpath,//div[text()=\" 发布管理\"]/../..')\nbasepage\\base_page.py:126: in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026E5BD95DE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...02288+4227080]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6ED1078A2+54818]\nE       \t(No symbol) [0x00007FF6ED076AD2]\nE       \t(No symbol) [0x00007FF6ECF2D8ED]\nE       \t(No symbol) [0x00007FF6ECF630DE]\nE       \t(No symbol) [0x00007FF6ECF8E9A2]\nE       \t(No symbol) [0x00007FF6ECF8A710]\nE       \t(No symbol) [0x00007FF6ECF8A016]\nE       \t(No symbol) [0x00007FF6ECF041D0]\nE       \tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\nE       \tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6ED1A3656+693206]\nE       \t(No symbol) [0x00007FF6ED081638]\nE       \t(No symbol) [0x00007FF6ECF02FFE]\nE       \tGetHandleVerifier [0x00007FF6ED502288+4227080]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException","steps":[{"name":"侧边栏切到到发布管理","time":{"start":1715055420797,"stop":1715055420797,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2D8ED]\n\t(No symbol) [0x00007FF6ECF630DE]\n\t(No symbol) [0x00007FF6ECF8E9A2]\n\t(No symbol) [0x00007FF6ECF8A710]\n\t(No symbol) [0x00007FF6ECF8A016]\n\t(No symbol) [0x00007FF6ECF041D0]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ECF02FFE]\n\tGetHandleVerifier [0x00007FF6ED502288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_play_bill.py\", line 397, in test_filter_fail_to_approve_status\n    play_bill_page.switch_to_release_management()\n  File \"D:\\ui\\pageobject\\play_bill_page.py\", line 13, in switch_to_release_management\n    clickable_ele = self.get_element('by_xpath,//div[text()=\" 发布管理\"]/../..')\n  File \"D:\\ui\\basepage\\base_page.py\", line 126, in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 742, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"hasContent":true},"afterStages":[{"name":"release_page::0","time":{"start":1715055420828,"stop":1715055420828,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2D8ED]\n\t(No symbol) [0x00007FF6ECF630DE]\n\t(No symbol) [0x00007FF6ECF8E9A2]\n\t(No symbol) [0x00007FF6ECF8A710]\n\t(No symbol) [0x00007FF6ECF8A016]\n\t(No symbol) [0x00007FF6ECF041D0]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ECF02FFE]\n\tGetHandleVerifier [0x00007FF6ED502288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\ui\\test_case\\test_play_bill.py\", line 24, in release_page\n    driver.close()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 459, in close\n    self.execute(Command.CLOSE)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true},{"name":"play_bill_page::0","time":{"start":1715055420828,"stop":1715055420828,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1715055852972,"stop":1715055855475,"duration":2503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1715055857738,"stop":1715055859937,"duration":2199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"play bill list"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=14)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_play_bill"},{"name":"subSuite","value":"TestPlayBill"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"22284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_play_bill"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=14)"]},"source":"2efd6b2a15c24006.json","parameterValues":[]}