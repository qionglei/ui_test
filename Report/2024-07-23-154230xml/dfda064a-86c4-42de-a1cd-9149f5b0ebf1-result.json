{"name": "重命名文件名称", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <pageobject.media_page.MediaPage object at 0x00000228FF4AD9F0>\n\n    def edit_info(self):\n        \"\"\"\n        在更多中，点击编辑按钮\n        \"\"\"\n        try:\n            edit_info_locator = 'by_xpath,//span[text()=\"编辑\"]'\n            edit_info_eles = self.get_elements(edit_info_locator)\n            first_detail_info = edit_info_eles[0]\n>           ActionChains(self.driver).move_to_element(first_detail_info).click(first_detail_info).perform()\n\npageobject\\media_page.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x00000228FF490F10>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x00000228FF490580>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"33fe1210001b98dfc3caab6f8074385d\")>\ndriver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': 'F829F98A7106857BFB858E3...0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000228FF4ADF30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF6486DE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FF949A7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF949BCAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLSpanElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6487778A2+54818]\nE       \t(No symbol) [0x00007FF6486E6AD2]\nE       \t(No symbol) [0x00007FF64859DA3B]\nE       \t(No symbol) [0x00007FF6485A246D]\nE       \t(No symbol) [0x00007FF6485A3F5F]\nE       \t(No symbol) [0x00007FF6485A4050]\nE       \t(No symbol) [0x00007FF6485E3DB1]\nE       \t(No symbol) [0x00007FF6485E34C6]\nE       \t(No symbol) [0x00007FF64861F958]\nE       \t(No symbol) [0x00007FF6485FEAAA]\nE       \t(No symbol) [0x00007FF6486175A2]\nE       \t(No symbol) [0x00007FF6485FE883]\nE       \t(No symbol) [0x00007FF6485D3691]\nE       \t(No symbol) [0x00007FF6485D48D4]\nE       \tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF648B31870+3962352]\nE       \tGetHandleVerifier [0x00007FF648B29D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF648813656+693206]\nE       \t(No symbol) [0x00007FF6486F1638]\nE       \t(No symbol) [0x00007FF6486ED944]\nE       \t(No symbol) [0x00007FF6486EDA72]\nE       \t(No symbol) [0x00007FF6486DE123]\nE       \tBaseThreadInitThunk [0x00007FF949A7257D+29]\nE       \tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_media_center.TestMediaCenter object at 0x00000228FE7F8880>\n\n    @pytest.mark.run(order=10)\n    @pytest.mark.usefixtures(\"media_set_up\")\n    @allure.title(\"重命名文件名称\")\n    def test_rename_file(self):\n        media_page = self.media_page\n        media_page.switch_to_media_center()\n    \n        with step(\"前提：上传图片\"):\n            media_page.upload_media()\n    \n        time.sleep(0.5)\n        with step(\"点击更多按钮\"):\n            media_page.click_media_more_button()\n    \n        with step(\"在更多功能处，点击编辑按钮\"):\n>           media_page.edit_info()\n\ntest_case\\test_media_center.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:264: in edit_info\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"33fe1210001b98dfc3caab6f8074385d\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000228FF657D00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "前提：上传图片", "status": "passed", "steps": [{"name": "点击上传按钮", "status": "passed", "start": 1721720854325, "stop": 1721720854904}, {"name": "进行文件上传", "status": "passed", "start": 1721720854904, "stop": 1721720861951}, {"name": "当进度为100%时，则关闭上传弹框", "status": "passed", "start": 1721720861952, "stop": 1721720863997}], "start": 1721720853913, "stop": 1721720864128}, {"name": "点击更多按钮", "status": "passed", "start": 1721720864637, "stop": 1721720865677}, {"name": "在更多功能处，点击编辑按钮", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_media_center.py\", line 276, in test_rename_file\n    media_page.edit_info()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 264, in edit_info\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1721720865677, "stop": 1721720876669}], "start": 1721720853595, "stop": 1721720876670, "uuid": "533075b1-9a43-478c-ad2b-74cd3bd6411a", "historyId": "35095ab82ef308f1649dd5ae06cc1e38", "testCaseId": "35095ab82ef308f1649dd5ae06cc1e38", "fullName": "test_case.test_media_center.TestMediaCenter#test_rename_file", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "media center"}, {"name": "tag", "value": "@pytest.mark.usefixtures('media_set_up')"}, {"name": "tag", "value": "run(order=10)"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_media_center"}, {"name": "subSuite", "value": "TestMediaCenter"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "18720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_media_center"}]}