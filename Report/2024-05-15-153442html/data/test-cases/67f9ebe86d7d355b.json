{"uid":"67f9ebe86d7d355b","name":"取消删除设备","fullName":"test_case.test_terminal_center.TestTerminalCenter#test_cancel_delete_terminal","historyId":"e6799b09e4074bba0025dca0503bee17","time":{"start":1715765890610,"stop":1715765904498,"duration":13888},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78E7678A2+54818]\n\t(No symbol) [0x00007FF78E6D6AD2]\n\t(No symbol) [0x00007FF78E58DA3B]\n\t(No symbol) [0x00007FF78E59246D]\n\t(No symbol) [0x00007FF78E593F5F]\n\t(No symbol) [0x00007FF78E594050]\n\t(No symbol) [0x00007FF78E5D3DB1]\n\t(No symbol) [0x00007FF78E5D34C6]\n\t(No symbol) [0x00007FF78E60F958]\n\t(No symbol) [0x00007FF78E5EEAAA]\n\t(No symbol) [0x00007FF78E6075A2]\n\t(No symbol) [0x00007FF78E5EE883]\n\t(No symbol) [0x00007FF78E5C3691]\n\t(No symbol) [0x00007FF78E5C48D4]\n\tGetHandleVerifier [0x00007FF78EACB9A2+3610402]\n\tGetHandleVerifier [0x00007FF78EB21870+3962352]\n\tGetHandleVerifier [0x00007FF78EB19D5F+3930847]\n\tGetHandleVerifier [0x00007FF78E803656+693206]\n\t(No symbol) [0x00007FF78E6E1638]\n\t(No symbol) [0x00007FF78E6DD944]\n\t(No symbol) [0x00007FF78E6DDA72]\n\t(No symbol) [0x00007FF78E6CE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x000002705942A500>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"取消删除设备\")\n    @pytest.mark.run(order=25)\n    def test_cancel_delete_terminal(self):\n        terminal_page = self.terminal_page\n        terminal_page.refresh()\n        terminal_page.switch_to_terminal_center()\n>       terminal_page.add_new_terminal()\n\ntest_case\\test_terminal_center.py:723: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:56: in add_new_terminal\n    self.terminal_org_more()\npageobject\\terminal_page.py:140: in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002707FF19180>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF78E6CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78E7678A2+54818]\nE       \t(No symbol) [0x00007FF78E6D6AD2]\nE       \t(No symbol) [0x00007FF78E58DA3B]\nE       \t(No symbol) [0x00007FF78E59246D]\nE       \t(No symbol) [0x00007FF78E593F5F]\nE       \t(No symbol) [0x00007FF78E594050]\nE       \t(No symbol) [0x00007FF78E5D3DB1]\nE       \t(No symbol) [0x00007FF78E5D34C6]\nE       \t(No symbol) [0x00007FF78E60F958]\nE       \t(No symbol) [0x00007FF78E5EEAAA]\nE       \t(No symbol) [0x00007FF78E6075A2]\nE       \t(No symbol) [0x00007FF78E5EE883]\nE       \t(No symbol) [0x00007FF78E5C3691]\nE       \t(No symbol) [0x00007FF78E5C48D4]\nE       \tGetHandleVerifier [0x00007FF78EACB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF78EB21870+3962352]\nE       \tGetHandleVerifier [0x00007FF78EB19D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF78E803656+693206]\nE       \t(No symbol) [0x00007FF78E6E1638]\nE       \t(No symbol) [0x00007FF78E6DD944]\nE       \t(No symbol) [0x00007FF78E6DDA72]\nE       \t(No symbol) [0x00007FF78E6CE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1715758484847,"stop":1715758484849,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1715758484849,"stop":1715758490792,"duration":5943},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"set_up_org","time":{"start":1715765889592,"stop":1715765890291,"duration":699},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"sys_page","time":{"start":1715765890291,"stop":1715765890291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"terminal_page","time":{"start":1715765890291,"stop":1715765890292,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"clear_terminal_list","time":{"start":1715765890292,"stop":1715765890609,"duration":317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78E7678A2+54818]\n\t(No symbol) [0x00007FF78E6D6AD2]\n\t(No symbol) [0x00007FF78E58DA3B]\n\t(No symbol) [0x00007FF78E59246D]\n\t(No symbol) [0x00007FF78E593F5F]\n\t(No symbol) [0x00007FF78E594050]\n\t(No symbol) [0x00007FF78E5D3DB1]\n\t(No symbol) [0x00007FF78E5D34C6]\n\t(No symbol) [0x00007FF78E60F958]\n\t(No symbol) [0x00007FF78E5EEAAA]\n\t(No symbol) [0x00007FF78E6075A2]\n\t(No symbol) [0x00007FF78E5EE883]\n\t(No symbol) [0x00007FF78E5C3691]\n\t(No symbol) [0x00007FF78E5C48D4]\n\tGetHandleVerifier [0x00007FF78EACB9A2+3610402]\n\tGetHandleVerifier [0x00007FF78EB21870+3962352]\n\tGetHandleVerifier [0x00007FF78EB19D5F+3930847]\n\tGetHandleVerifier [0x00007FF78E803656+693206]\n\t(No symbol) [0x00007FF78E6E1638]\n\t(No symbol) [0x00007FF78E6DD944]\n\t(No symbol) [0x00007FF78E6DDA72]\n\t(No symbol) [0x00007FF78E6CE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x000002705942A500>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"取消删除设备\")\n    @pytest.mark.run(order=25)\n    def test_cancel_delete_terminal(self):\n        terminal_page = self.terminal_page\n        terminal_page.refresh()\n        terminal_page.switch_to_terminal_center()\n>       terminal_page.add_new_terminal()\n\ntest_case\\test_terminal_center.py:723: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:56: in add_new_terminal\n    self.terminal_org_more()\npageobject\\terminal_page.py:140: in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002707FF19180>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF78E6CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78E7678A2+54818]\nE       \t(No symbol) [0x00007FF78E6D6AD2]\nE       \t(No symbol) [0x00007FF78E58DA3B]\nE       \t(No symbol) [0x00007FF78E59246D]\nE       \t(No symbol) [0x00007FF78E593F5F]\nE       \t(No symbol) [0x00007FF78E594050]\nE       \t(No symbol) [0x00007FF78E5D3DB1]\nE       \t(No symbol) [0x00007FF78E5D34C6]\nE       \t(No symbol) [0x00007FF78E60F958]\nE       \t(No symbol) [0x00007FF78E5EEAAA]\nE       \t(No symbol) [0x00007FF78E6075A2]\nE       \t(No symbol) [0x00007FF78E5EE883]\nE       \t(No symbol) [0x00007FF78E5C3691]\nE       \t(No symbol) [0x00007FF78E5C48D4]\nE       \tGetHandleVerifier [0x00007FF78EACB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF78EB21870+3962352]\nE       \tGetHandleVerifier [0x00007FF78EB19D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF78E803656+693206]\nE       \t(No symbol) [0x00007FF78E6E1638]\nE       \t(No symbol) [0x00007FF78E6DD944]\nE       \t(No symbol) [0x00007FF78E6DDA72]\nE       \t(No symbol) [0x00007FF78E6CE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"点击设备接入","time":{"start":1715765891920,"stop":1715765892658,"duration":738},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"输入设备sn码","time":{"start":1715765893162,"stop":1715765893451,"duration":289},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"输入设备名称","time":{"start":1715765893453,"stop":1715765893637,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"先点击所属机构","time":{"start":1715765893637,"stop":1715765903934,"duration":10297},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"在下拉框展开组织架构","time":{"start":1715765903934,"stop":1715765904497,"duration":563},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLElement] has no size and location\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78E7678A2+54818]\n\t(No symbol) [0x00007FF78E6D6AD2]\n\t(No symbol) [0x00007FF78E58DA3B]\n\t(No symbol) [0x00007FF78E59246D]\n\t(No symbol) [0x00007FF78E593F5F]\n\t(No symbol) [0x00007FF78E594050]\n\t(No symbol) [0x00007FF78E5D3DB1]\n\t(No symbol) [0x00007FF78E5D34C6]\n\t(No symbol) [0x00007FF78E60F958]\n\t(No symbol) [0x00007FF78E5EEAAA]\n\t(No symbol) [0x00007FF78E6075A2]\n\t(No symbol) [0x00007FF78E5EE883]\n\t(No symbol) [0x00007FF78E5C3691]\n\t(No symbol) [0x00007FF78E5C48D4]\n\tGetHandleVerifier [0x00007FF78EACB9A2+3610402]\n\tGetHandleVerifier [0x00007FF78EB21870+3962352]\n\tGetHandleVerifier [0x00007FF78EB19D5F+3930847]\n\tGetHandleVerifier [0x00007FF78E803656+693206]\n\t(No symbol) [0x00007FF78E6E1638]\n\t(No symbol) [0x00007FF78E6DD944]\n\t(No symbol) [0x00007FF78E6DDA72]\n\t(No symbol) [0x00007FF78E6CE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\pageobject\\terminal_page.py\", line 56, in add_new_terminal\n    self.terminal_org_more()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 140, in terminal_org_more\n    ActionChains(self.driver).move_to_element(first_terminal_org_more_ele).click(first_terminal_org_more_ele).perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py\", line 94, in perform\n    self.w3c_actions.perform()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py\", line 96, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":5,"hasContent":true},"afterStages":[{"name":"terminal_page::0","time":{"start":1715765904553,"stop":1715765904553,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"sys_page::0","time":{"start":1715765904557,"stop":1715765904557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1715766688013,"stop":1715766715438,"duration":27425},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"terminal_center"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=25)"},{"name":"tag","value":"@pytest.mark.usefixtures('clear_terminal_list')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_terminal_center"},{"name":"subSuite","value":"TestTerminalCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"14580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_terminal_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('clear_terminal_list')","run(order=25)"]},"source":"67f9ebe86d7d355b.json","parameterValues":[]}