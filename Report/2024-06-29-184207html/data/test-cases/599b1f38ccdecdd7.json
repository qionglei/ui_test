{"uid":"599b1f38ccdecdd7","name":"节目编排-选节目-筛选普通节目","fullName":"test_case.test_release_management.TestReleaseStrategy#test_filter_general_program","historyId":"d5ff35fb8b0f87fb3592651363d5e8f4","time":{"start":1719657909607,"stop":1719657959351,"duration":49744},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-b0b5bc75=\"\" class=\"rect\" src=\"https://test.hkciot.com/images/common/add.png\" alt=\"\"> is not clickable at point (734, 445). Other element would receive the click: <div data-v-b0b5bc75=\"\" class=\"img-container\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60C0578A2+54818]\n\t(No symbol) [0x00007FF60BFC6AD2]\n\t(No symbol) [0x00007FF60BE7DA3B]\n\t(No symbol) [0x00007FF60BEC47CB]\n\t(No symbol) [0x00007FF60BEC2B99]\n\t(No symbol) [0x00007FF60BEC0968]\n\t(No symbol) [0x00007FF60BEBFA23]\n\t(No symbol) [0x00007FF60BEB571F]\n\t(No symbol) [0x00007FF60BEDEAAA]\n\t(No symbol) [0x00007FF60BEB5036]\n\t(No symbol) [0x00007FF60BEDECC0]\n\t(No symbol) [0x00007FF60BEF75A2]\n\t(No symbol) [0x00007FF60BEDE883]\n\t(No symbol) [0x00007FF60BEB3691]\n\t(No symbol) [0x00007FF60BEB48D4]\n\tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60C411870+3962352]\n\tGetHandleVerifier [0x00007FF60C409D5F+3930847]\n\tGetHandleVerifier [0x00007FF60C0F3656+693206]\n\t(No symbol) [0x00007FF60BFD1638]\n\t(No symbol) [0x00007FF60BFCD944]\n\t(No symbol) [0x00007FF60BFCDA72]\n\t(No symbol) [0x00007FF60BFBE123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000002C80522CCA0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d68bdd70aa5cc5d0a14a534b4116dd1d\")>\n\n    @pytest.mark.run(order=29)\n    @allure.title(\"节目编排-选节目-筛选普通节目\")\n    def test_filter_general_program(self, driver):\n        release_page = self.release_page\n        release_page.refresh()\n        # 前提：生成一个普通节目\n    \n        program_page = ProgramPage(driver)\n        program_page.switch_to_program_management()\n        program_page.create_general_program()\n    \n        with step(\"切到发布管理\"):\n            release_page.switch_to_release_management()\n    \n        with step('点击节目编排'):\n            release_page.program_edit()\n    \n        with step(\"点击新增按钮\"):\n>           release_page.click_add_program()\n\ntest_case\\test_release_management.py:804: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:571: in click_add_program\n    self.click('by_xpath,//div[text()=\"新增\"]/../img')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C82CDFDF30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF60BFBE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-b0b5bc75=\"\" class=\"rect\" src=\"https://test.hkciot.com/images/common/add.png\" alt=\"\"> is not clickable at point (734, 445). Other element would receive the click: <div data-v-b0b5bc75=\"\" class=\"img-container\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60C0578A2+54818]\nE       \t(No symbol) [0x00007FF60BFC6AD2]\nE       \t(No symbol) [0x00007FF60BE7DA3B]\nE       \t(No symbol) [0x00007FF60BEC47CB]\nE       \t(No symbol) [0x00007FF60BEC2B99]\nE       \t(No symbol) [0x00007FF60BEC0968]\nE       \t(No symbol) [0x00007FF60BEBFA23]\nE       \t(No symbol) [0x00007FF60BEB571F]\nE       \t(No symbol) [0x00007FF60BEDEAAA]\nE       \t(No symbol) [0x00007FF60BEB5036]\nE       \t(No symbol) [0x00007FF60BEDECC0]\nE       \t(No symbol) [0x00007FF60BEF75A2]\nE       \t(No symbol) [0x00007FF60BEDE883]\nE       \t(No symbol) [0x00007FF60BEB3691]\nE       \t(No symbol) [0x00007FF60BEB48D4]\nE       \tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF60C411870+3962352]\nE       \tGetHandleVerifier [0x00007FF60C409D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF60C0F3656+693206]\nE       \t(No symbol) [0x00007FF60BFD1638]\nE       \t(No symbol) [0x00007FF60BFCD944]\nE       \t(No symbol) [0x00007FF60BFCDA72]\nE       \t(No symbol) [0x00007FF60BFBE123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1719657739510,"stop":1719657739778,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"env","time":{"start":1719657739778,"stop":1719657739782,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"driver","time":{"start":1719657739782,"stop":1719657757206,"duration":17424},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"release_page","time":{"start":1719657757207,"stop":1719657757207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-b0b5bc75=\"\" class=\"rect\" src=\"https://test.hkciot.com/images/common/add.png\" alt=\"\"> is not clickable at point (734, 445). Other element would receive the click: <div data-v-b0b5bc75=\"\" class=\"img-container\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60C0578A2+54818]\n\t(No symbol) [0x00007FF60BFC6AD2]\n\t(No symbol) [0x00007FF60BE7DA3B]\n\t(No symbol) [0x00007FF60BEC47CB]\n\t(No symbol) [0x00007FF60BEC2B99]\n\t(No symbol) [0x00007FF60BEC0968]\n\t(No symbol) [0x00007FF60BEBFA23]\n\t(No symbol) [0x00007FF60BEB571F]\n\t(No symbol) [0x00007FF60BEDEAAA]\n\t(No symbol) [0x00007FF60BEB5036]\n\t(No symbol) [0x00007FF60BEDECC0]\n\t(No symbol) [0x00007FF60BEF75A2]\n\t(No symbol) [0x00007FF60BEDE883]\n\t(No symbol) [0x00007FF60BEB3691]\n\t(No symbol) [0x00007FF60BEB48D4]\n\tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60C411870+3962352]\n\tGetHandleVerifier [0x00007FF60C409D5F+3930847]\n\tGetHandleVerifier [0x00007FF60C0F3656+693206]\n\t(No symbol) [0x00007FF60BFD1638]\n\t(No symbol) [0x00007FF60BFCD944]\n\t(No symbol) [0x00007FF60BFCDA72]\n\t(No symbol) [0x00007FF60BFBE123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x000002C80522CCA0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d68bdd70aa5cc5d0a14a534b4116dd1d\")>\n\n    @pytest.mark.run(order=29)\n    @allure.title(\"节目编排-选节目-筛选普通节目\")\n    def test_filter_general_program(self, driver):\n        release_page = self.release_page\n        release_page.refresh()\n        # 前提：生成一个普通节目\n    \n        program_page = ProgramPage(driver)\n        program_page.switch_to_program_management()\n        program_page.create_general_program()\n    \n        with step(\"切到发布管理\"):\n            release_page.switch_to_release_management()\n    \n        with step('点击节目编排'):\n            release_page.program_edit()\n    \n        with step(\"点击新增按钮\"):\n>           release_page.click_add_program()\n\ntest_case\\test_release_management.py:804: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:571: in click_add_program\n    self.click('by_xpath,//div[text()=\"新增\"]/../img')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C82CDFDF30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF60BFBE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-b0b5bc75=\"\" class=\"rect\" src=\"https://test.hkciot.com/images/common/add.png\" alt=\"\"> is not clickable at point (734, 445). Other element would receive the click: <div data-v-b0b5bc75=\"\" class=\"img-container\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60C0578A2+54818]\nE       \t(No symbol) [0x00007FF60BFC6AD2]\nE       \t(No symbol) [0x00007FF60BE7DA3B]\nE       \t(No symbol) [0x00007FF60BEC47CB]\nE       \t(No symbol) [0x00007FF60BEC2B99]\nE       \t(No symbol) [0x00007FF60BEC0968]\nE       \t(No symbol) [0x00007FF60BEBFA23]\nE       \t(No symbol) [0x00007FF60BEB571F]\nE       \t(No symbol) [0x00007FF60BEDEAAA]\nE       \t(No symbol) [0x00007FF60BEB5036]\nE       \t(No symbol) [0x00007FF60BEDECC0]\nE       \t(No symbol) [0x00007FF60BEF75A2]\nE       \t(No symbol) [0x00007FF60BEDE883]\nE       \t(No symbol) [0x00007FF60BEB3691]\nE       \t(No symbol) [0x00007FF60BEB48D4]\nE       \tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF60C411870+3962352]\nE       \tGetHandleVerifier [0x00007FF60C409D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF60C0F3656+693206]\nE       \t(No symbol) [0x00007FF60BFD1638]\nE       \t(No symbol) [0x00007FF60BFCD944]\nE       \t(No symbol) [0x00007FF60BFCDA72]\nE       \t(No symbol) [0x00007FF60BFBE123]\nE       \tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\nE       \tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"点击创建节目","time":{"start":1719657910045,"stop":1719657910236,"duration":191},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"输入节目名称（普通节目）","time":{"start":1719657910236,"stop":1719657910701,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"选择屏幕方向","time":{"start":1719657910701,"stop":1719657910837,"duration":136},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"选择分辨率","time":{"start":1719657910837,"stop":1719657911407,"duration":570},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"点击保存按钮","time":{"start":1719657911407,"stop":1719657911507,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"选择分辨率","time":{"start":1719657911507,"stop":1719657952843,"duration":41336},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"在编辑器中进行保存","time":{"start":1719657952843,"stop":1719657956347,"duration":3504},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"切到发布管理","time":{"start":1719657956347,"stop":1719657956705,"duration":358},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"点击节目编排","time":{"start":1719657956705,"stop":1719657958125,"duration":1420},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"点击新增按钮","time":{"start":1719657958125,"stop":1719657959351,"duration":1226},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-b0b5bc75=\"\" class=\"rect\" src=\"https://test.hkciot.com/images/common/add.png\" alt=\"\"> is not clickable at point (734, 445). Other element would receive the click: <div data-v-b0b5bc75=\"\" class=\"img-container\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60C0578A2+54818]\n\t(No symbol) [0x00007FF60BFC6AD2]\n\t(No symbol) [0x00007FF60BE7DA3B]\n\t(No symbol) [0x00007FF60BEC47CB]\n\t(No symbol) [0x00007FF60BEC2B99]\n\t(No symbol) [0x00007FF60BEC0968]\n\t(No symbol) [0x00007FF60BEBFA23]\n\t(No symbol) [0x00007FF60BEB571F]\n\t(No symbol) [0x00007FF60BEDEAAA]\n\t(No symbol) [0x00007FF60BEB5036]\n\t(No symbol) [0x00007FF60BEDECC0]\n\t(No symbol) [0x00007FF60BEF75A2]\n\t(No symbol) [0x00007FF60BEDE883]\n\t(No symbol) [0x00007FF60BEB3691]\n\t(No symbol) [0x00007FF60BEB48D4]\n\tGetHandleVerifier [0x00007FF60C3BB9A2+3610402]\n\tGetHandleVerifier [0x00007FF60C411870+3962352]\n\tGetHandleVerifier [0x00007FF60C409D5F+3930847]\n\tGetHandleVerifier [0x00007FF60C0F3656+693206]\n\t(No symbol) [0x00007FF60BFD1638]\n\t(No symbol) [0x00007FF60BFCD944]\n\t(No symbol) [0x00007FF60BFCDA72]\n\t(No symbol) [0x00007FF60BFBE123]\n\tBaseThreadInitThunk [0x00007FFA3DBD257D+29]\n\tRtlUserThreadStart [0x00007FFA3E7AAF28+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_release_management.py\", line 804, in test_filter_general_program\n    release_page.click_add_program()\n  File \"D:\\git\\ui_test\\pageobject\\release_page.py\", line 571, in click_add_program\n    self.click('by_xpath,//div[text()=\"新增\"]/../img')\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":10},"afterStages":[{"name":"release_page::0","time":{"start":1719658227834,"stop":1719658227834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"driver::0","time":{"start":1719658227846,"stop":1719658237771,"duration":9925},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"labels":[{"name":"feature","value":"release management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=29)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseStrategy"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"35500-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=29)"]},"source":"599b1f38ccdecdd7.json","parameterValues":[]}