{"uid":"ebef7c386476fdb","name":"查看图片详情","fullName":"test_case.test_media_center.TestMediaCenter#test_media_detail_info","historyId":"6b432ec449ba7b743901388780449a9f","time":{"start":1718602653494,"stop":1718602686710,"duration":33216},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <pageobject.media_page.MediaPage object at 0x0000022B676C5180>\n\n    def detail_info(self):\n        \"\"\"\n        查看图片详情\n        :return:\n        \"\"\"\n        try:\n            detail_info_locator = 'by_xpath,//span[text()=\"详情\"]'\n            detail_info_eles = self.get_elements(detail_info_locator)\n            first_detail_info = detail_info_eles[0]\n>           ActionChains(self.driver).move_to_element(first_detail_info).click(first_detail_info).perform()\n\npageobject\\media_page.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x0000022B686F5480>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x0000022B686F5F60>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"963c14612356f44747a8e4cd67bed979\")>\ndriver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': 'DFD08599F04E511AEDC4A7F...0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022B686F8610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLSpanElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD39246D]\nE       \t(No symbol) [0x00007FF7AD393F5F]\nE       \t(No symbol) [0x00007FF7AD394050]\nE       \t(No symbol) [0x00007FF7AD3D3DB1]\nE       \t(No symbol) [0x00007FF7AD3D34C6]\nE       \t(No symbol) [0x00007FF7AD40F958]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_media_center.TestMediaCenter object at 0x0000022B40207EE0>\n\n    @pytest.mark.run(order=9)\n    @pytest.mark.usefixtures('media_set_up')\n    @allure.title(\"查看图片详情\")\n    def test_media_detail_info(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.refresh()\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n            media_page.upload_media()\n    \n        with step(\"点击更多按钮\"):\n            media_page.click_media_more_button()\n    \n        with step(\"选择详情\"):\n>           media_page.detail_info()\n\ntest_case\\test_media_center.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:240: in detail_info\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"963c14612356f44747a8e4cd67bed979\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000022B68A0FBE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1718602498972,"stop":1718602498974,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1718602498974,"stop":1718602526948,"duration":27974},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"media_page","time":{"start":1718602526948,"stop":1718602526949,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"media_set_up","time":{"start":1718602652961,"stop":1718602653494,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <pageobject.media_page.MediaPage object at 0x0000022B676C5180>\n\n    def detail_info(self):\n        \"\"\"\n        查看图片详情\n        :return:\n        \"\"\"\n        try:\n            detail_info_locator = 'by_xpath,//span[text()=\"详情\"]'\n            detail_info_eles = self.get_elements(detail_info_locator)\n            first_detail_info = detail_info_eles[0]\n>           ActionChains(self.driver).move_to_element(first_detail_info).click(first_detail_info).perform()\n\npageobject\\media_page.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x0000022B686F5480>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x0000022B686F5F60>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"963c14612356f44747a8e4cd67bed979\")>\ndriver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': 'DFD08599F04E511AEDC4A7F...0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022B686F8610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLSpanElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD39246D]\nE       \t(No symbol) [0x00007FF7AD393F5F]\nE       \t(No symbol) [0x00007FF7AD394050]\nE       \t(No symbol) [0x00007FF7AD3D3DB1]\nE       \t(No symbol) [0x00007FF7AD3D34C6]\nE       \t(No symbol) [0x00007FF7AD40F958]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_media_center.TestMediaCenter object at 0x0000022B40207EE0>\n\n    @pytest.mark.run(order=9)\n    @pytest.mark.usefixtures('media_set_up')\n    @allure.title(\"查看图片详情\")\n    def test_media_detail_info(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.refresh()\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n            media_page.upload_media()\n    \n        with step(\"点击更多按钮\"):\n            media_page.click_media_more_button()\n    \n        with step(\"选择详情\"):\n>           media_page.detail_info()\n\ntest_case\\test_media_center.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:240: in detail_info\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"963c14612356f44747a8e4cd67bed979\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000022B68A0FBE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","steps":[{"name":"前提：上传图片","time":{"start":1718602654375,"stop":1718602664624,"duration":10249},"status":"passed","steps":[{"name":"点击上传按钮","time":{"start":1718602654748,"stop":1718602655339,"duration":591},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"进行文件上传","time":{"start":1718602655339,"stop":1718602662407,"duration":7068},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"当进度为100%时，则关闭上传弹框","time":{"start":1718602662407,"stop":1718602664498,"duration":2091},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击更多按钮","time":{"start":1718602664624,"stop":1718602665706,"duration":1082},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"选择详情","time":{"start":1718602665706,"stop":1718602686702,"duration":20996},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_media_center.py\", line 234, in test_media_detail_info\n    media_page.detail_info()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 240, in detail_info\n    element = wait.until(EC.element_to_be_clickable((By.XPATH, my_element)))\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":6,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"media_page::0","time":{"start":1718602771570,"stop":1718602771570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1718602771573,"stop":1718602775776,"duration":4203},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"media center"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"@pytest.mark.usefixtures('media_set_up')"},{"name":"tag","value":"run(order=9)"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_media_center"},{"name":"subSuite","value":"TestMediaCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"35792-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_media_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('media_set_up')","run(order=9)"]},"source":"ebef7c386476fdb.json","parameterValues":[]}