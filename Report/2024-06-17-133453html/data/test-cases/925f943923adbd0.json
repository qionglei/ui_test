{"uid":"925f943923adbd0","name":"新增一个竖屏的普通节目","fullName":"test_case.test_program_management.TestProgramManagement#test_create_General_program_hard","historyId":"d3ef24538f92e4af698bc2a50a47d28f","time":{"start":1718602544036,"stop":1718602545188,"duration":1152},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-f87aad8c=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 123). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-2509-23\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AD5678A2+54818]\n\t(No symbol) [0x00007FF7AD4D6AD2]\n\t(No symbol) [0x00007FF7AD38DA3B]\n\t(No symbol) [0x00007FF7AD3D47CB]\n\t(No symbol) [0x00007FF7AD3D2B99]\n\t(No symbol) [0x00007FF7AD3D0968]\n\t(No symbol) [0x00007FF7AD3CFA23]\n\t(No symbol) [0x00007FF7AD3C571F]\n\t(No symbol) [0x00007FF7AD3EEAAA]\n\t(No symbol) [0x00007FF7AD3C5036]\n\t(No symbol) [0x00007FF7AD3EECC0]\n\t(No symbol) [0x00007FF7AD4075A2]\n\t(No symbol) [0x00007FF7AD3EE883]\n\t(No symbol) [0x00007FF7AD3C3691]\n\t(No symbol) [0x00007FF7AD3C48D4]\n\tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\n\tGetHandleVerifier [0x00007FF7AD921870+3962352]\n\tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\n\tGetHandleVerifier [0x00007FF7AD603656+693206]\n\t(No symbol) [0x00007FF7AD4E1638]\n\t(No symbol) [0x00007FF7AD4DD944]\n\t(No symbol) [0x00007FF7AD4DDA72]\n\t(No symbol) [0x00007FF7AD4CE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_program_management.TestProgramManagement object at 0x0000021D0EAB23B0>\n\n    @allure.title(\"新增一个竖屏的普通节目\")\n    @pytest.mark.run(order=2)\n    def test_create_General_program_hard(self):\n        program_page = self.program_page\n        program_name = \"test_竖屏-普通节目\"\n        with step(\"点击创建节目\"):\n            program_page.switch_to_program_management()\n>           program_page.click_create_program()\n\ntest_case\\test_program_management.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:157: in click_create_program\n    self.click(create_program_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021D365A65C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-f87aad8c=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 123). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-2509-23\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD3D47CB]\nE       \t(No symbol) [0x00007FF7AD3D2B99]\nE       \t(No symbol) [0x00007FF7AD3D0968]\nE       \t(No symbol) [0x00007FF7AD3CFA23]\nE       \t(No symbol) [0x00007FF7AD3C571F]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD3C5036]\nE       \t(No symbol) [0x00007FF7AD3EECC0]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1718602498972,"stop":1718602498974,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1718602498974,"stop":1718602521242,"duration":22268},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"program_page","time":{"start":1718602521242,"stop":1718602521242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"program_management_set_up","time":{"start":1718602543725,"stop":1718602544035,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-f87aad8c=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 123). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-2509-23\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AD5678A2+54818]\n\t(No symbol) [0x00007FF7AD4D6AD2]\n\t(No symbol) [0x00007FF7AD38DA3B]\n\t(No symbol) [0x00007FF7AD3D47CB]\n\t(No symbol) [0x00007FF7AD3D2B99]\n\t(No symbol) [0x00007FF7AD3D0968]\n\t(No symbol) [0x00007FF7AD3CFA23]\n\t(No symbol) [0x00007FF7AD3C571F]\n\t(No symbol) [0x00007FF7AD3EEAAA]\n\t(No symbol) [0x00007FF7AD3C5036]\n\t(No symbol) [0x00007FF7AD3EECC0]\n\t(No symbol) [0x00007FF7AD4075A2]\n\t(No symbol) [0x00007FF7AD3EE883]\n\t(No symbol) [0x00007FF7AD3C3691]\n\t(No symbol) [0x00007FF7AD3C48D4]\n\tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\n\tGetHandleVerifier [0x00007FF7AD921870+3962352]\n\tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\n\tGetHandleVerifier [0x00007FF7AD603656+693206]\n\t(No symbol) [0x00007FF7AD4E1638]\n\t(No symbol) [0x00007FF7AD4DD944]\n\t(No symbol) [0x00007FF7AD4DDA72]\n\t(No symbol) [0x00007FF7AD4CE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_program_management.TestProgramManagement object at 0x0000021D0EAB23B0>\n\n    @allure.title(\"新增一个竖屏的普通节目\")\n    @pytest.mark.run(order=2)\n    def test_create_General_program_hard(self):\n        program_page = self.program_page\n        program_name = \"test_竖屏-普通节目\"\n        with step(\"点击创建节目\"):\n            program_page.switch_to_program_management()\n>           program_page.click_create_program()\n\ntest_case\\test_program_management.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\program_page.py:157: in click_create_program\n    self.click(create_program_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021D365A65C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7AD4CE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-f87aad8c=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 123). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-2509-23\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7AD5678A2+54818]\nE       \t(No symbol) [0x00007FF7AD4D6AD2]\nE       \t(No symbol) [0x00007FF7AD38DA3B]\nE       \t(No symbol) [0x00007FF7AD3D47CB]\nE       \t(No symbol) [0x00007FF7AD3D2B99]\nE       \t(No symbol) [0x00007FF7AD3D0968]\nE       \t(No symbol) [0x00007FF7AD3CFA23]\nE       \t(No symbol) [0x00007FF7AD3C571F]\nE       \t(No symbol) [0x00007FF7AD3EEAAA]\nE       \t(No symbol) [0x00007FF7AD3C5036]\nE       \t(No symbol) [0x00007FF7AD3EECC0]\nE       \t(No symbol) [0x00007FF7AD4075A2]\nE       \t(No symbol) [0x00007FF7AD3EE883]\nE       \t(No symbol) [0x00007FF7AD3C3691]\nE       \t(No symbol) [0x00007FF7AD3C48D4]\nE       \tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7AD921870+3962352]\nE       \tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7AD603656+693206]\nE       \t(No symbol) [0x00007FF7AD4E1638]\nE       \t(No symbol) [0x00007FF7AD4DD944]\nE       \t(No symbol) [0x00007FF7AD4DDA72]\nE       \t(No symbol) [0x00007FF7AD4CE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"点击创建节目","time":{"start":1718602544036,"stop":1718602545187,"duration":1151},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-f87aad8c=\"\" src=\"/images/program/pedit1.png\" alt=\"\"> is not clickable at point (182, 123). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"创建节目\" aria-describedby=\"el-id-2509-23\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7AD5678A2+54818]\n\t(No symbol) [0x00007FF7AD4D6AD2]\n\t(No symbol) [0x00007FF7AD38DA3B]\n\t(No symbol) [0x00007FF7AD3D47CB]\n\t(No symbol) [0x00007FF7AD3D2B99]\n\t(No symbol) [0x00007FF7AD3D0968]\n\t(No symbol) [0x00007FF7AD3CFA23]\n\t(No symbol) [0x00007FF7AD3C571F]\n\t(No symbol) [0x00007FF7AD3EEAAA]\n\t(No symbol) [0x00007FF7AD3C5036]\n\t(No symbol) [0x00007FF7AD3EECC0]\n\t(No symbol) [0x00007FF7AD4075A2]\n\t(No symbol) [0x00007FF7AD3EE883]\n\t(No symbol) [0x00007FF7AD3C3691]\n\t(No symbol) [0x00007FF7AD3C48D4]\n\tGetHandleVerifier [0x00007FF7AD8CB9A2+3610402]\n\tGetHandleVerifier [0x00007FF7AD921870+3962352]\n\tGetHandleVerifier [0x00007FF7AD919D5F+3930847]\n\tGetHandleVerifier [0x00007FF7AD603656+693206]\n\t(No symbol) [0x00007FF7AD4E1638]\n\t(No symbol) [0x00007FF7AD4DD944]\n\t(No symbol) [0x00007FF7AD4DDA72]\n\t(No symbol) [0x00007FF7AD4CE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_program_management.py\", line 76, in test_create_General_program_hard\n    program_page.click_create_program()\n  File \"D:\\git\\ui_test\\pageobject\\program_page.py\", line 157, in click_create_program\n    self.click(create_program_locator)\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"program_page::0","time":{"start":1718603222329,"stop":1718603222329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1718603222333,"stop":1718603226521,"duration":4188},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"program management"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=2)"},{"name":"tag","value":"@pytest.mark.usefixtures('program_management_set_up')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_program_management"},{"name":"subSuite","value":"TestProgramManagement"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"24736-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_program_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=2)","@pytest.mark.usefixtures('program_management_set_up')"]},"source":"925f943923adbd0.json","parameterValues":[]}