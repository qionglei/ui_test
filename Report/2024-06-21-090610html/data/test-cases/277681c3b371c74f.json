{"uid":"277681c3b371c74f","name":"在删除单个素材弹框，关闭删除弹框","fullName":"test_case.test_media_center.TestMediaCenter#test_close_delete_alert","historyId":"695c14d9b912307322b4d46975fabf15","time":{"start":1718932227407,"stop":1718932240650,"duration":13243},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-dc35596d=\"\">...</span> is not clickable at point (418, 605). Other element would receive the click: <span data-v-dc35596d=\"\">...</span>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6506878A2+54818]\n\t(No symbol) [0x00007FF6505F6AD2]\n\t(No symbol) [0x00007FF6504ADA3B]\n\t(No symbol) [0x00007FF6504F47CB]\n\t(No symbol) [0x00007FF6504F2B99]\n\t(No symbol) [0x00007FF6504F0968]\n\t(No symbol) [0x00007FF6504EFA23]\n\t(No symbol) [0x00007FF6504E571F]\n\t(No symbol) [0x00007FF65050EAAA]\n\t(No symbol) [0x00007FF6504E5036]\n\t(No symbol) [0x00007FF65050ECC0]\n\t(No symbol) [0x00007FF6505275A2]\n\t(No symbol) [0x00007FF65050E883]\n\t(No symbol) [0x00007FF6504E3691]\n\t(No symbol) [0x00007FF6504E48D4]\n\tGetHandleVerifier [0x00007FF6509EB9A2+3610402]\n\tGetHandleVerifier [0x00007FF650A41870+3962352]\n\tGetHandleVerifier [0x00007FF650A39D5F+3930847]\n\tGetHandleVerifier [0x00007FF650723656+693206]\n\t(No symbol) [0x00007FF650601638]\n\t(No symbol) [0x00007FF6505FD944]\n\t(No symbol) [0x00007FF6505FDA72]\n\t(No symbol) [0x00007FF6505EE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_media_center.TestMediaCenter object at 0x0000023DA23D87F0>\n\n    @pytest.mark.run(order=12)\n    @pytest.mark.usefixtures(\"media_set_up\")\n    @allure.title(\"在删除单个素材弹框，关闭删除弹框\")\n    def test_close_delete_alert(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n            media_page.upload_media()\n    \n        with step(\"点击更多按钮\"):\n            media_page.click_media_more_button()\n    \n        with step(\"点击删除按钮\"):\n>           media_page.more_click_delete()\n\ntest_case\\test_media_center.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:294: in more_click_delete\n    self.click('by_xpath,//div[@class=\"pop-item\"]//span[text()=\"删除\"]')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023DC8F3A530>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6505EE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-dc35596d=\"\">...</span> is not clickable at point (418, 605). Other element would receive the click: <span data-v-dc35596d=\"\">...</span>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6506878A2+54818]\nE       \t(No symbol) [0x00007FF6505F6AD2]\nE       \t(No symbol) [0x00007FF6504ADA3B]\nE       \t(No symbol) [0x00007FF6504F47CB]\nE       \t(No symbol) [0x00007FF6504F2B99]\nE       \t(No symbol) [0x00007FF6504F0968]\nE       \t(No symbol) [0x00007FF6504EFA23]\nE       \t(No symbol) [0x00007FF6504E571F]\nE       \t(No symbol) [0x00007FF65050EAAA]\nE       \t(No symbol) [0x00007FF6504E5036]\nE       \t(No symbol) [0x00007FF65050ECC0]\nE       \t(No symbol) [0x00007FF6505275A2]\nE       \t(No symbol) [0x00007FF65050E883]\nE       \t(No symbol) [0x00007FF6504E3691]\nE       \t(No symbol) [0x00007FF6504E48D4]\nE       \tGetHandleVerifier [0x00007FF6509EB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF650A41870+3962352]\nE       \tGetHandleVerifier [0x00007FF650A39D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF650723656+693206]\nE       \t(No symbol) [0x00007FF650601638]\nE       \t(No symbol) [0x00007FF6505FD944]\nE       \t(No symbol) [0x00007FF6505FDA72]\nE       \t(No symbol) [0x00007FF6505EE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1718931976077,"stop":1718931976080,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver","time":{"start":1718931976080,"stop":1718932004776,"duration":28696},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"media_page","time":{"start":1718932004776,"stop":1718932004776,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"media_set_up","time":{"start":1718932226753,"stop":1718932227406,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-dc35596d=\"\">...</span> is not clickable at point (418, 605). Other element would receive the click: <span data-v-dc35596d=\"\">...</span>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6506878A2+54818]\n\t(No symbol) [0x00007FF6505F6AD2]\n\t(No symbol) [0x00007FF6504ADA3B]\n\t(No symbol) [0x00007FF6504F47CB]\n\t(No symbol) [0x00007FF6504F2B99]\n\t(No symbol) [0x00007FF6504F0968]\n\t(No symbol) [0x00007FF6504EFA23]\n\t(No symbol) [0x00007FF6504E571F]\n\t(No symbol) [0x00007FF65050EAAA]\n\t(No symbol) [0x00007FF6504E5036]\n\t(No symbol) [0x00007FF65050ECC0]\n\t(No symbol) [0x00007FF6505275A2]\n\t(No symbol) [0x00007FF65050E883]\n\t(No symbol) [0x00007FF6504E3691]\n\t(No symbol) [0x00007FF6504E48D4]\n\tGetHandleVerifier [0x00007FF6509EB9A2+3610402]\n\tGetHandleVerifier [0x00007FF650A41870+3962352]\n\tGetHandleVerifier [0x00007FF650A39D5F+3930847]\n\tGetHandleVerifier [0x00007FF650723656+693206]\n\t(No symbol) [0x00007FF650601638]\n\t(No symbol) [0x00007FF6505FD944]\n\t(No symbol) [0x00007FF6505FDA72]\n\t(No symbol) [0x00007FF6505EE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_media_center.TestMediaCenter object at 0x0000023DA23D87F0>\n\n    @pytest.mark.run(order=12)\n    @pytest.mark.usefixtures(\"media_set_up\")\n    @allure.title(\"在删除单个素材弹框，关闭删除弹框\")\n    def test_close_delete_alert(self):\n        time.sleep(0.5)\n        media_page = self.media_page\n        media_page.switch_to_media_center()\n        with step(\"前提：上传图片\"):\n            media_page.upload_media()\n    \n        with step(\"点击更多按钮\"):\n            media_page.click_media_more_button()\n    \n        with step(\"点击删除按钮\"):\n>           media_page.more_click_delete()\n\ntest_case\\test_media_center.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:294: in more_click_delete\n    self.click('by_xpath,//div[@class=\"pop-item\"]//span[text()=\"删除\"]')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023DC8F3A530>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6505EE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-dc35596d=\"\">...</span> is not clickable at point (418, 605). Other element would receive the click: <span data-v-dc35596d=\"\">...</span>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6506878A2+54818]\nE       \t(No symbol) [0x00007FF6505F6AD2]\nE       \t(No symbol) [0x00007FF6504ADA3B]\nE       \t(No symbol) [0x00007FF6504F47CB]\nE       \t(No symbol) [0x00007FF6504F2B99]\nE       \t(No symbol) [0x00007FF6504F0968]\nE       \t(No symbol) [0x00007FF6504EFA23]\nE       \t(No symbol) [0x00007FF6504E571F]\nE       \t(No symbol) [0x00007FF65050EAAA]\nE       \t(No symbol) [0x00007FF6504E5036]\nE       \t(No symbol) [0x00007FF65050ECC0]\nE       \t(No symbol) [0x00007FF6505275A2]\nE       \t(No symbol) [0x00007FF65050E883]\nE       \t(No symbol) [0x00007FF6504E3691]\nE       \t(No symbol) [0x00007FF6504E48D4]\nE       \tGetHandleVerifier [0x00007FF6509EB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF650A41870+3962352]\nE       \tGetHandleVerifier [0x00007FF650A39D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF650723656+693206]\nE       \t(No symbol) [0x00007FF650601638]\nE       \t(No symbol) [0x00007FF6505FD944]\nE       \t(No symbol) [0x00007FF6505FDA72]\nE       \t(No symbol) [0x00007FF6505EE123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"前提：上传图片","time":{"start":1718932228249,"stop":1718932238484,"duration":10235},"status":"passed","steps":[{"name":"点击上传按钮","time":{"start":1718932228635,"stop":1718932229219,"duration":584},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"进行文件上传","time":{"start":1718932229219,"stop":1718932236279,"duration":7060},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"当进度为100%时，则关闭上传弹框","time":{"start":1718932236279,"stop":1718932238352,"duration":2073},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"点击更多按钮","time":{"start":1718932238484,"stop":1718932239541,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"点击删除按钮","time":{"start":1718932239541,"stop":1718932240647,"duration":1106},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-dc35596d=\"\">...</span> is not clickable at point (418, 605). Other element would receive the click: <span data-v-dc35596d=\"\">...</span>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6506878A2+54818]\n\t(No symbol) [0x00007FF6505F6AD2]\n\t(No symbol) [0x00007FF6504ADA3B]\n\t(No symbol) [0x00007FF6504F47CB]\n\t(No symbol) [0x00007FF6504F2B99]\n\t(No symbol) [0x00007FF6504F0968]\n\t(No symbol) [0x00007FF6504EFA23]\n\t(No symbol) [0x00007FF6504E571F]\n\t(No symbol) [0x00007FF65050EAAA]\n\t(No symbol) [0x00007FF6504E5036]\n\t(No symbol) [0x00007FF65050ECC0]\n\t(No symbol) [0x00007FF6505275A2]\n\t(No symbol) [0x00007FF65050E883]\n\t(No symbol) [0x00007FF6504E3691]\n\t(No symbol) [0x00007FF6504E48D4]\n\tGetHandleVerifier [0x00007FF6509EB9A2+3610402]\n\tGetHandleVerifier [0x00007FF650A41870+3962352]\n\tGetHandleVerifier [0x00007FF650A39D5F+3930847]\n\tGetHandleVerifier [0x00007FF650723656+693206]\n\t(No symbol) [0x00007FF650601638]\n\t(No symbol) [0x00007FF6505FD944]\n\t(No symbol) [0x00007FF6505FDA72]\n\t(No symbol) [0x00007FF6505EE123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_media_center.py\", line 316, in test_close_delete_alert\n    media_page.more_click_delete()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 294, in more_click_delete\n    self.click('by_xpath,//div[@class=\"pop-item\"]//span[text()=\"删除\"]')\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":6,"shouldDisplayMessage":true,"attachmentsCount":0},"afterStages":[{"name":"media_page::0","time":{"start":1718932308725,"stop":1718932308726,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver::0","time":{"start":1718932308732,"stop":1718932314173,"duration":5441},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"media center"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"@pytest.mark.usefixtures('media_set_up')"},{"name":"tag","value":"run(order=12)"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_media_center"},{"name":"subSuite","value":"TestMediaCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"43000-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_media_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('media_set_up')","run(order=12)"]},"source":"277681c3b371c74f.json","parameterValues":[]}