{"name": "新增一个横屏的联屏节目", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"\">...</span> is not clickable at point (768, 24). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-2057-0\" aria-describedby=\"el-id-2057-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113DA3B]\n\t(No symbol) [0x00007FF7311847CB]\n\t(No symbol) [0x00007FF731182B99]\n\t(No symbol) [0x00007FF731180968]\n\t(No symbol) [0x00007FF73117FA23]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]", "trace": "self = <pageobject.program_page.ProgramPage object at 0x0000019C3B401330>\n\n    def choose_media(self):\n        \"\"\"\n        选择素材\n        :return:\n        \"\"\"\n        # 判断对号是否可见,等待可见后，再进行操作\n        driver = self.driver\n        all_selectable = 'by_xpath,//div[@class=\"mask\"]/div/img'\n        # if self.element_exist(all_selectable):\n        #     wait = WebDriverWait(driver, 10)  # 等待最多10秒\n        #     click_element = wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"mask\"]/div/img')))\n        #     click_element.click()\n        # else:\n        #     pass\n        all_selectable_elements = self.get_elements(all_selectable)\n        first_selectable_element = all_selectable_elements[0]\n        try:\n            # self.click(first_selectable_element)\n>           ActionChains(driver).move_to_element(first_selectable_element).click(first_selectable_element).perform()\n\npageobject\\media_page.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x0000019C3C4305B0>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x0000019C3C430B50>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ea19ccd44ee73a3518057bf4ef9a6c74\")>\ndriver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': 'B74E8E6EE246B3E327BC2F9...0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}, {'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019C3C434610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...07FF73127E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLImageElement] has no size and location\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7313178A2+54818]\nE       \t(No symbol) [0x00007FF731286AD2]\nE       \t(No symbol) [0x00007FF73113DA3B]\nE       \t(No symbol) [0x00007FF73114246D]\nE       \t(No symbol) [0x00007FF731143F5F]\nE       \t(No symbol) [0x00007FF731144050]\nE       \t(No symbol) [0x00007FF731183DB1]\nE       \t(No symbol) [0x00007FF7311834C6]\nE       \t(No symbol) [0x00007FF7311BF958]\nE       \t(No symbol) [0x00007FF73119EAAA]\nE       \t(No symbol) [0x00007FF7311B75A2]\nE       \t(No symbol) [0x00007FF73119E883]\nE       \t(No symbol) [0x00007FF731173691]\nE       \t(No symbol) [0x00007FF7311748D4]\nE       \tGetHandleVerifier [0x00007FF73167B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7316D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7313B3656+693206]\nE       \t(No symbol) [0x00007FF731291638]\nE       \t(No symbol) [0x00007FF73128D944]\nE       \t(No symbol) [0x00007FF73128DA72]\nE       \t(No symbol) [0x00007FF73127E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_program_management.TestProgramManagement object at 0x0000019C14962BC0>\n\n    @allure.title(\"新增一个横屏的联屏节目\")\n    @pytest.mark.run(order=6)\n    def test_create_relevance_program_accross(self):\n        program_page = self.program_page\n        program_page.refresh()\n        # 联屏节目随机名称\n        ran_int = random.randint(100, 999)\n        relevance_program_name = \"test_联屏横屏_\" + str(ran_int)\n    \n        # 行、列随机\n        randow_row = str(random.randint(1, 5))\n        randow_col = str(random.randint(1, 4))\n        with step(\"点击创建节目\"):\n            program_page.switch_to_program_management()\n            program_page.click_create_program()\n    \n        with step(\"切换到联屏节目tab上\"):\n            program_page.relevance_program_tab()\n    \n        with step(\"输入联屏节目的节目名称\"):\n            program_page.input_program_name(relevance_program_name)\n    \n        with step(\"输入屏幕组合行和列值\"):\n            # time.sleep(5)\n            program_page.row_numbers(randow_row)\n            time.sleep(0.5)\n            program_page.col_numbers(randow_col)\n    \n        time.sleep(2)\n        with step(\"创建联屏节目，点击选择素材\"):\n            program_page.choose_relevance_media()\n    \n        with step(\"上传一个素材\"):\n            win_size = program_page.get_window_size()\n            program_page.maxsize_window()\n            time.sleep(0.5)\n            program_page.create_program_and_upload_media()\n    \n        with step(\"选择一个素材\"):\n            program_page.hover_to_media()\n>           program_page.choose_media()\n\ntest_case\\test_program_management.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\media_page.py:361: in choose_media\n    self.create_program_and_upload_media()\npageobject\\media_page.py:68: in create_program_and_upload_media\n    self.click_up_load_from_program()\npageobject\\media_page.py:119: in click_up_load_from_program\n    self.click(up_load_locator)\nbasepage\\base_page.py:389: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019C3C434610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF73127E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"\">...</span> is not clickable at point (768, 24). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-2057-0\" aria-describedby=\"el-id-2057-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7313178A2+54818]\nE       \t(No symbol) [0x00007FF731286AD2]\nE       \t(No symbol) [0x00007FF73113DA3B]\nE       \t(No symbol) [0x00007FF7311847CB]\nE       \t(No symbol) [0x00007FF731182B99]\nE       \t(No symbol) [0x00007FF731180968]\nE       \t(No symbol) [0x00007FF73117FA23]\nE       \t(No symbol) [0x00007FF73117571F]\nE       \t(No symbol) [0x00007FF73119EAAA]\nE       \t(No symbol) [0x00007FF731175036]\nE       \t(No symbol) [0x00007FF73119ECC0]\nE       \t(No symbol) [0x00007FF7311B75A2]\nE       \t(No symbol) [0x00007FF73119E883]\nE       \t(No symbol) [0x00007FF731173691]\nE       \t(No symbol) [0x00007FF7311748D4]\nE       \tGetHandleVerifier [0x00007FF73167B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF7316D1870+3962352]\nE       \tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF7313B3656+693206]\nE       \t(No symbol) [0x00007FF731291638]\nE       \t(No symbol) [0x00007FF73128D944]\nE       \t(No symbol) [0x00007FF73128DA72]\nE       \t(No symbol) [0x00007FF73127E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "点击创建节目", "status": "passed", "start": 1718438341433, "stop": 1718438341873}, {"name": "切换到联屏节目tab上", "status": "passed", "start": 1718438341873, "stop": 1718438341996}, {"name": "输入联屏节目的节目名称", "status": "passed", "start": 1718438341996, "stop": 1718438342160}, {"name": "输入屏幕组合行和列值", "status": "passed", "start": 1718438342160, "stop": 1718438342900}, {"name": "创建联屏节目，点击选择素材", "status": "passed", "start": 1718438344912, "stop": 1718438345104}, {"name": "上传一个素材", "status": "passed", "steps": [{"name": "点击上传按钮", "status": "passed", "start": 1718438345878, "stop": 1718438346487}, {"name": "进行文件上传", "status": "passed", "start": 1718438346488, "stop": 1718438353569}, {"name": "当进度为100%时，则关闭上传弹框", "status": "passed", "start": 1718438353569, "stop": 1718438355724}], "start": 1718438345104, "stop": 1718438355724}, {"name": "选择一个素材", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"\">...</span> is not clickable at point (768, 24). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-2057-0\" aria-describedby=\"el-id-2057-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113DA3B]\n\t(No symbol) [0x00007FF7311847CB]\n\t(No symbol) [0x00007FF731182B99]\n\t(No symbol) [0x00007FF731180968]\n\t(No symbol) [0x00007FF73117FA23]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\test_case\\test_program_management.py\", line 186, in test_create_relevance_program_accross\n    program_page.choose_media()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 361, in choose_media\n    self.create_program_and_upload_media()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 68, in create_program_and_upload_media\n    self.click_up_load_from_program()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 119, in click_up_load_from_program\n    self.click(up_load_locator)\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 389, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "点击上传按钮", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"\">...</span> is not clickable at point (768, 24). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-2057-0\" aria-describedby=\"el-id-2057-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7313178A2+54818]\n\t(No symbol) [0x00007FF731286AD2]\n\t(No symbol) [0x00007FF73113DA3B]\n\t(No symbol) [0x00007FF7311847CB]\n\t(No symbol) [0x00007FF731182B99]\n\t(No symbol) [0x00007FF731180968]\n\t(No symbol) [0x00007FF73117FA23]\n\t(No symbol) [0x00007FF73117571F]\n\t(No symbol) [0x00007FF73119EAAA]\n\t(No symbol) [0x00007FF731175036]\n\t(No symbol) [0x00007FF73119ECC0]\n\t(No symbol) [0x00007FF7311B75A2]\n\t(No symbol) [0x00007FF73119E883]\n\t(No symbol) [0x00007FF731173691]\n\t(No symbol) [0x00007FF7311748D4]\n\tGetHandleVerifier [0x00007FF73167B9A2+3610402]\n\tGetHandleVerifier [0x00007FF7316D1870+3962352]\n\tGetHandleVerifier [0x00007FF7316C9D5F+3930847]\n\tGetHandleVerifier [0x00007FF7313B3656+693206]\n\t(No symbol) [0x00007FF731291638]\n\t(No symbol) [0x00007FF73128D944]\n\t(No symbol) [0x00007FF73128DA72]\n\t(No symbol) [0x00007FF73127E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n", "trace": "  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 68, in create_program_and_upload_media\n    self.click_up_load_from_program()\n  File \"D:\\git\\ui_test\\pageobject\\media_page.py\", line 119, in click_up_load_from_program\n    self.click(up_load_locator)\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 389, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1718438361521, "stop": 1718438362600}], "start": 1718438355724, "stop": 1718438362629}], "start": 1718438341126, "stop": 1718438362632, "uuid": "f7baa455-c97a-4ae5-8d99-c0a6a620f5f7", "historyId": "42836ce83a26067d3e8aa2904c8915bc", "testCaseId": "42836ce83a26067d3e8aa2904c8915bc", "fullName": "test_case.test_program_management.TestProgramManagement#test_create_relevance_program_accross", "labels": [{"name": "feature", "value": "program management"}, {"name": "epic", "value": "项目hkc"}, {"name": "tag", "value": "run(order=6)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('program_management_set_up')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_program_management"}, {"name": "subSuite", "value": "TestProgramManagement"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "19044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_program_management"}]}