{"uid":"3b94e9db53cb7a54","name":"下发关机指令","fullName":"test_case.test_terminal_center.TestTerminalCenter#test_turn_off_terminal","historyId":"ec70a890cb60bc3701aad82335fbe9d7","time":{"start":1715586480582,"stop":1715586606707,"duration":126125},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000024805126EC0>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"下发关机指令\")\n    @pytest.mark.run(order=5)\n    def test_turn_off_terminal(self):\n        terminal_page = self.terminal_page\n        terminal_page.refresh()\n        sys_page = self.sys_page\n        # sql_execute()\n        with step(\"两个前提：1、新增一台机器 2、新增一个门店  2、点击更多按钮 \"):\n            # sys_page.switch_to_system_management()\n            # sys_page.add_new_shop(\"test门店\")\n            terminal_page.switch_to_terminal_center()\n            terminal_page.add_real_terminal()\n            terminal_page.click_more_button()\n    \n        time.sleep(2)\n        with step(\"下发播放指令\"):\n            terminal_page.play_terminal()\n    \n        time.sleep(2)\n        with step(\"下发停止指令\"):\n            terminal_page.stop_terminal()\n    \n        # time.sleep(2)\n        # with step(\"下发实时监控指令\"):\n        #     terminal_page.real_time_monitor()\n    \n        time.sleep(2)\n        with step(\"下发插播字幕指令\"):\n            terminal_page.insert_subtitle()\n        subtitle_position_loca = ('by_xapth,//label[text()=\"播放位置\"]')\n        try:\n            if terminal_page.element_exist(subtitle_position_loca):\n                # with step(\"先点击插播内容弹框\"):\n                #     terminal_page.click_insert_subtitle_text()\n                time.sleep(0.5)\n                with step(\"发送随机弹幕\"):\n                    terminal_page.input_insert_subtitle_text(\"自动化弹幕ing....\")\n                with step(\"点击保存按钮\"):\n                    terminal_page.insert_subtitle_submit()\n        except NoSuchElementException as e:\n            print(\"非真实设备，无法发送插播字幕\")\n        #\n        # time.sleep(2)\n        # with step(\"下发节目克隆指令\"):\n        #     terminal_page.program_clone()\n        #     clone_ele = terminal_page.element_exist('by_xpath,//input[@placeholder=\"请搜索克隆设备\"]')\n        #     if clone_ele:\n        #         with step(\"关闭节目克隆弹框\"):\n        #             terminal_page.cancel_program_clone()\n    \n        time.sleep(2)\n        with step(\"下发重启指令\"):\n            terminal_page.click_more_button()\n>           terminal_page.restart_terminal()\n\ntest_case\\test_terminal_center.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:387: in restart_terminal\n    self.click(turn_off_button_loca)\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002482DD145B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6402FE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6403978A2+54818]\nE       \t(No symbol) [0x00007FF640306AD2]\nE       \t(No symbol) [0x00007FF6401BD8ED]\nE       \t(No symbol) [0x00007FF6401FF8E5]\nE       \t(No symbol) [0x00007FF6401F571F]\nE       \t(No symbol) [0x00007FF64021EAAA]\nE       \t(No symbol) [0x00007FF6401F5036]\nE       \t(No symbol) [0x00007FF64021ECC0]\nE       \t(No symbol) [0x00007FF6402375A2]\nE       \t(No symbol) [0x00007FF64021E883]\nE       \t(No symbol) [0x00007FF6401F3691]\nE       \t(No symbol) [0x00007FF6401F48D4]\nE       \tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF640751870+3962352]\nE       \tGetHandleVerifier [0x00007FF640749D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF640433656+693206]\nE       \t(No symbol) [0x00007FF640311638]\nE       \t(No symbol) [0x00007FF64030D944]\nE       \t(No symbol) [0x00007FF64030DA72]\nE       \t(No symbol) [0x00007FF6402FE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1715585849309,"stop":1715585849313,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1715585849313,"stop":1715585862233,"duration":12920},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"set_up_org","time":{"start":1715586479316,"stop":1715586480139,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"sys_page","time":{"start":1715586480139,"stop":1715586480140,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"clear_terminal_list","time":{"start":1715586480140,"stop":1715586480581,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"terminal_page","time":{"start":1715586480140,"stop":1715586480140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000024805126EC0>\n\n    @pytest.mark.usefixtures('clear_terminal_list')\n    @allure.title(\"下发关机指令\")\n    @pytest.mark.run(order=5)\n    def test_turn_off_terminal(self):\n        terminal_page = self.terminal_page\n        terminal_page.refresh()\n        sys_page = self.sys_page\n        # sql_execute()\n        with step(\"两个前提：1、新增一台机器 2、新增一个门店  2、点击更多按钮 \"):\n            # sys_page.switch_to_system_management()\n            # sys_page.add_new_shop(\"test门店\")\n            terminal_page.switch_to_terminal_center()\n            terminal_page.add_real_terminal()\n            terminal_page.click_more_button()\n    \n        time.sleep(2)\n        with step(\"下发播放指令\"):\n            terminal_page.play_terminal()\n    \n        time.sleep(2)\n        with step(\"下发停止指令\"):\n            terminal_page.stop_terminal()\n    \n        # time.sleep(2)\n        # with step(\"下发实时监控指令\"):\n        #     terminal_page.real_time_monitor()\n    \n        time.sleep(2)\n        with step(\"下发插播字幕指令\"):\n            terminal_page.insert_subtitle()\n        subtitle_position_loca = ('by_xapth,//label[text()=\"播放位置\"]')\n        try:\n            if terminal_page.element_exist(subtitle_position_loca):\n                # with step(\"先点击插播内容弹框\"):\n                #     terminal_page.click_insert_subtitle_text()\n                time.sleep(0.5)\n                with step(\"发送随机弹幕\"):\n                    terminal_page.input_insert_subtitle_text(\"自动化弹幕ing....\")\n                with step(\"点击保存按钮\"):\n                    terminal_page.insert_subtitle_submit()\n        except NoSuchElementException as e:\n            print(\"非真实设备，无法发送插播字幕\")\n        #\n        # time.sleep(2)\n        # with step(\"下发节目克隆指令\"):\n        #     terminal_page.program_clone()\n        #     clone_ele = terminal_page.element_exist('by_xpath,//input[@placeholder=\"请搜索克隆设备\"]')\n        #     if clone_ele:\n        #         with step(\"关闭节目克隆弹框\"):\n        #             terminal_page.cancel_program_clone()\n    \n        time.sleep(2)\n        with step(\"下发重启指令\"):\n            terminal_page.click_more_button()\n>           terminal_page.restart_terminal()\n\ntest_case\\test_terminal_center.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:387: in restart_terminal\n    self.click(turn_off_button_loca)\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002482DD145B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6402FE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6403978A2+54818]\nE       \t(No symbol) [0x00007FF640306AD2]\nE       \t(No symbol) [0x00007FF6401BD8ED]\nE       \t(No symbol) [0x00007FF6401FF8E5]\nE       \t(No symbol) [0x00007FF6401F571F]\nE       \t(No symbol) [0x00007FF64021EAAA]\nE       \t(No symbol) [0x00007FF6401F5036]\nE       \t(No symbol) [0x00007FF64021ECC0]\nE       \t(No symbol) [0x00007FF6402375A2]\nE       \t(No symbol) [0x00007FF64021E883]\nE       \t(No symbol) [0x00007FF6401F3691]\nE       \t(No symbol) [0x00007FF6401F48D4]\nE       \tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF640751870+3962352]\nE       \tGetHandleVerifier [0x00007FF640749D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF640433656+693206]\nE       \t(No symbol) [0x00007FF640311638]\nE       \t(No symbol) [0x00007FF64030D944]\nE       \t(No symbol) [0x00007FF64030DA72]\nE       \t(No symbol) [0x00007FF6402FE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"两个前提：1、新增一台机器 2、新增一个门店  2、点击更多按钮 ","time":{"start":1715586480625,"stop":1715586555324,"duration":74699},"status":"passed","steps":[{"name":"进入设备中心","time":{"start":1715586481920,"stop":1715586482941,"duration":1021},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"点击设备接入","time":{"start":1715586482941,"stop":1715586484552,"duration":1611},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"输入设备sn码","time":{"start":1715586484552,"stop":1715586485674,"duration":1122},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"输入设备名称","time":{"start":1715586485674,"stop":1715586486745,"duration":1071},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"先点击所属机构","time":{"start":1715586486745,"stop":1715586487831,"duration":1086},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"在下拉框展开组织架构","time":{"start":1715586487831,"stop":1715586489904,"duration":2073},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"在下拉框进行选择","time":{"start":1715586489904,"stop":1715586493011,"duration":3107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"点击保存按钮","time":{"start":1715586493011,"stop":1715586534226,"duration":41215},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":8,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"下发播放指令","time":{"start":1715586557326,"stop":1715586557893,"duration":567},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"下发停止指令","time":{"start":1715586559897,"stop":1715586560459,"duration":562},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"下发插播字幕指令","time":{"start":1715586562467,"stop":1715586563020,"duration":553},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"发送随机弹幕","time":{"start":1715586563528,"stop":1715586583593,"duration":20065},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//textarea[@placeholder=\"请输入插播内容\"]\"}\n  (Session info: chrome=118.0.5993.118); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BDA3B]\n\t(No symbol) [0x00007FF6401FE4FC]\n\t(No symbol) [0x00007FF6401FE67C]\n\t(No symbol) [0x00007FF640239627]\n\t(No symbol) [0x00007FF64021EAEF]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_terminal_center.py\", line 205, in test_turn_off_terminal\n    terminal_page.input_insert_subtitle_text(\"自动化弹幕ing....\")\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 426, in input_insert_subtitle_text\n    self.input(subtitle_text_loca, text)\n  File \"D:\\ui\\basepage\\base_page.py\", line 251, in input\n    e1 = self.get_element(args)\n  File \"D:\\ui\\basepage\\base_page.py\", line 133, in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 742, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},{"name":"下发重启指令","time":{"start":1715586585603,"stop":1715586606706,"duration":21103},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_terminal_center.py\", line 222, in test_turn_off_terminal\n    terminal_page.restart_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 387, in restart_terminal\n    self.click(turn_off_button_loca)\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":14,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"terminal_page::0","time":{"start":1715586606736,"stop":1715586606736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"sys_page::0","time":{"start":1715586606741,"stop":1715586606741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1715590429628,"stop":1715590435081,"duration":5453},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"terminal_center"},{"name":"tag","value":"run(order=5)"},{"name":"tag","value":"@pytest.mark.usefixtures('clear_terminal_list')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_terminal_center"},{"name":"subSuite","value":"TestTerminalCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"8424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_terminal_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=5)","@pytest.mark.usefixtures('clear_terminal_list')"]},"source":"3b94e9db53cb7a54.json","parameterValues":[]}