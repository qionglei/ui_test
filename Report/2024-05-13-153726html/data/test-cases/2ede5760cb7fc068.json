{"uid":"2ede5760cb7fc068","name":"取消选择周几播放","fullName":"test_case.test_release_management.TestReleaseStrategy#test_cancel_weekly_display","historyId":"58261a447f57f9f9a21eb5f2699f4c4f","time":{"start":1715589359337,"stop":1715589392417,"duration":33080},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x0000024805104520>\n\n    @allure.title(\"取消选择周几播放\")\n    @pytest.mark.run(order=23)\n    def test_cancel_weekly_display(self):\n        release_page = self.release_page\n        release_page.refresh()\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        with step('点击节目编排'):\n            release_page.program_edit()\n    \n        with step(\"点击日期编排上面加号，唤起弹框\"):\n>           release_page.click_weekly()\n\ntest_case\\test_release_management.py:584: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:354: in click_weekly\n    self.click('by_xpath,//div[@class=\"period\"]/../div[@class=\"add\"]')\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002482DCD40D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6402FE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6403978A2+54818]\nE       \t(No symbol) [0x00007FF640306AD2]\nE       \t(No symbol) [0x00007FF6401BD8ED]\nE       \t(No symbol) [0x00007FF6401FF8E5]\nE       \t(No symbol) [0x00007FF6401F571F]\nE       \t(No symbol) [0x00007FF64021EAAA]\nE       \t(No symbol) [0x00007FF6401F5036]\nE       \t(No symbol) [0x00007FF64021ECC0]\nE       \t(No symbol) [0x00007FF6402375A2]\nE       \t(No symbol) [0x00007FF64021E883]\nE       \t(No symbol) [0x00007FF6401F3691]\nE       \t(No symbol) [0x00007FF6401F48D4]\nE       \tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF640751870+3962352]\nE       \tGetHandleVerifier [0x00007FF640749D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF640433656+693206]\nE       \t(No symbol) [0x00007FF640311638]\nE       \t(No symbol) [0x00007FF64030D944]\nE       \t(No symbol) [0x00007FF64030DA72]\nE       \t(No symbol) [0x00007FF6402FE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1715585849309,"stop":1715585849313,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1715585849313,"stop":1715585862233,"duration":12920},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver","time":{"start":1715586031255,"stop":1715586039940,"duration":8685},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"release_page","time":{"start":1715589320950,"stop":1715589320950,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"self = <test_case.test_release_management.TestReleaseStrategy object at 0x0000024805104520>\n\n    @allure.title(\"取消选择周几播放\")\n    @pytest.mark.run(order=23)\n    def test_cancel_weekly_display(self):\n        release_page = self.release_page\n        release_page.refresh()\n    \n        with step(\"切换到发布管理tab上\"):\n            release_page.switch_to_release_management()\n    \n        with step('点击节目编排'):\n            release_page.program_edit()\n    \n        with step(\"点击日期编排上面加号，唤起弹框\"):\n>           release_page.click_weekly()\n\ntest_case\\test_release_management.py:584: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\release_page.py:354: in click_weekly\n    self.click('by_xpath,//div[@class=\"period\"]/../div[@class=\"add\"]')\nbasepage\\base_page.py:247: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002482DCD40D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6402FE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6403978A2+54818]\nE       \t(No symbol) [0x00007FF640306AD2]\nE       \t(No symbol) [0x00007FF6401BD8ED]\nE       \t(No symbol) [0x00007FF6401FF8E5]\nE       \t(No symbol) [0x00007FF6401F571F]\nE       \t(No symbol) [0x00007FF64021EAAA]\nE       \t(No symbol) [0x00007FF6401F5036]\nE       \t(No symbol) [0x00007FF64021ECC0]\nE       \t(No symbol) [0x00007FF6402375A2]\nE       \t(No symbol) [0x00007FF64021E883]\nE       \t(No symbol) [0x00007FF6401F3691]\nE       \t(No symbol) [0x00007FF6401F48D4]\nE       \tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF640751870+3962352]\nE       \tGetHandleVerifier [0x00007FF640749D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF640433656+693206]\nE       \t(No symbol) [0x00007FF640311638]\nE       \t(No symbol) [0x00007FF64030D944]\nE       \t(No symbol) [0x00007FF64030DA72]\nE       \t(No symbol) [0x00007FF6402FE123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"切换到发布管理tab上","time":{"start":1715589359383,"stop":1715589360588,"duration":1205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"点击节目编排","time":{"start":1715589360588,"stop":1715589371836,"duration":11248},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"点击日期编排上面加号，唤起弹框","time":{"start":1715589371836,"stop":1715589392415,"duration":20579},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6403978A2+54818]\n\t(No symbol) [0x00007FF640306AD2]\n\t(No symbol) [0x00007FF6401BD8ED]\n\t(No symbol) [0x00007FF6401FF8E5]\n\t(No symbol) [0x00007FF6401F571F]\n\t(No symbol) [0x00007FF64021EAAA]\n\t(No symbol) [0x00007FF6401F5036]\n\t(No symbol) [0x00007FF64021ECC0]\n\t(No symbol) [0x00007FF6402375A2]\n\t(No symbol) [0x00007FF64021E883]\n\t(No symbol) [0x00007FF6401F3691]\n\t(No symbol) [0x00007FF6401F48D4]\n\tGetHandleVerifier [0x00007FF6406FB9A2+3610402]\n\tGetHandleVerifier [0x00007FF640751870+3962352]\n\tGetHandleVerifier [0x00007FF640749D5F+3930847]\n\tGetHandleVerifier [0x00007FF640433656+693206]\n\t(No symbol) [0x00007FF640311638]\n\t(No symbol) [0x00007FF64030D944]\n\t(No symbol) [0x00007FF64030DA72]\n\t(No symbol) [0x00007FF6402FE123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\ui\\test_case\\test_release_management.py\", line 584, in test_cancel_weekly_display\n    release_page.click_weekly()\n  File \"D:\\ui\\pageobject\\release_page.py\", line 354, in click_weekly\n    self.click('by_xpath,//div[@class=\"period\"]/../div[@class=\"add\"]')\n  File \"D:\\ui\\basepage\\base_page.py\", line 247, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"release_page::0","time":{"start":1715589392522,"stop":1715589392522,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1715590429628,"stop":1715590435081,"duration":5453},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"driver::0","time":{"start":1715590435090,"stop":1715590440519,"duration":5429},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"项目hkc"},{"name":"feature","value":"release management"},{"name":"tag","value":"run(order=23)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_release_management"},{"name":"subSuite","value":"TestReleaseStrategy"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"8424-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_release_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=23)"]},"source":"2ede5760cb7fc068.json","parameterValues":[]}