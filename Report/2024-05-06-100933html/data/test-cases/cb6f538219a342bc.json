{"uid":"cb6f538219a342bc","name":"成功引用用节目单","fullName":"test_case.test_play_bill.TestPlayBill#test_copy_play_bill_and_save","historyId":"00c96df0286e93dd8358c41e582282fe","time":{"start":1714961748958,"stop":1714961748958,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF70D2C78A2+54818]\n\t(No symbol) [0x00007FF70D236AD2]\n\t(No symbol) [0x00007FF70D0ED8ED]\n\t(No symbol) [0x00007FF70D1230DE]\n\t(No symbol) [0x00007FF70D14E9A2]\n\t(No symbol) [0x00007FF70D14A710]\n\t(No symbol) [0x00007FF70D14A016]\n\t(No symbol) [0x00007FF70D0C41D0]\n\tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\n\tGetHandleVerifier [0x00007FF70D681870+3962352]\n\tGetHandleVerifier [0x00007FF70D679D5F+3930847]\n\tGetHandleVerifier [0x00007FF70D363656+693206]\n\t(No symbol) [0x00007FF70D241638]\n\t(No symbol) [0x00007FF70D0C2FFE]\n\tGetHandleVerifier [0x00007FF70D6C2288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca7de70b56dc729340cec9084ba0df58\")>\n\n    @pytest.fixture(scope='class')\n    def init_play_bill(driver):\n        \"\"\"\n        初始化节目单，如果没有节目单，则创建普通节目，进行发布操作\n        以达到环境初始化的作用\n        \"\"\"\n        try:\n            play_bill = PlayBill()\n            program_page = ProgramPage(driver)\n            release_page = ReleasePage(driver)\n            terminal_page = TerminalPage(driver)\n            terminal_list = Terminal_List()\n            program_list = ProgramList()\n            all_play_bill_ids = play_bill.get_play_bill_ids()\n            if not all_play_bill_ids:\n                all_program_ids = program_list.get_program_list_ids()\n                all_terminal_list = terminal_list.get_terminal_list()\n                if not all_terminal_list:\n>                   terminal_page.add_new_terminal()\n\ntest_case\\test_play_bill.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:34: in add_new_terminal\n    self.switch_to_terminal_center()\npageobject\\terminal_page.py:21: in switch_to_terminal_center\n    focus_ele = self.get_element(focus)\nbasepage\\base_page.py:126: in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020368EF69B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...C2288+4227080]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70D2C78A2+54818]\nE       \t(No symbol) [0x00007FF70D236AD2]\nE       \t(No symbol) [0x00007FF70D0ED8ED]\nE       \t(No symbol) [0x00007FF70D1230DE]\nE       \t(No symbol) [0x00007FF70D14E9A2]\nE       \t(No symbol) [0x00007FF70D14A710]\nE       \t(No symbol) [0x00007FF70D14A016]\nE       \t(No symbol) [0x00007FF70D0C41D0]\nE       \tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF70D681870+3962352]\nE       \tGetHandleVerifier [0x00007FF70D679D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF70D363656+693206]\nE       \t(No symbol) [0x00007FF70D241638]\nE       \t(No symbol) [0x00007FF70D0C2FFE]\nE       \tGetHandleVerifier [0x00007FF70D6C2288+4227080]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1714961375915,"stop":1714961375917,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver","time":{"start":1714961375918,"stop":1714961384378,"duration":8460},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver","time":{"start":1714961392485,"stop":1714961404181,"duration":11696},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"init_play_bill","time":{"start":1714961748960,"stop":1714961749327,"duration":367},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF70D2C78A2+54818]\n\t(No symbol) [0x00007FF70D236AD2]\n\t(No symbol) [0x00007FF70D0ED8ED]\n\t(No symbol) [0x00007FF70D1230DE]\n\t(No symbol) [0x00007FF70D14E9A2]\n\t(No symbol) [0x00007FF70D14A710]\n\t(No symbol) [0x00007FF70D14A016]\n\t(No symbol) [0x00007FF70D0C41D0]\n\tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\n\tGetHandleVerifier [0x00007FF70D681870+3962352]\n\tGetHandleVerifier [0x00007FF70D679D5F+3930847]\n\tGetHandleVerifier [0x00007FF70D363656+693206]\n\t(No symbol) [0x00007FF70D241638]\n\t(No symbol) [0x00007FF70D0C2FFE]\n\tGetHandleVerifier [0x00007FF70D6C2288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\pluggy\\_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 1130, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 909, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"D:\\ui\\test_case\\test_play_bill.py\", line 49, in init_play_bill\n    terminal_page.add_new_terminal()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 34, in add_new_terminal\n    self.switch_to_terminal_center()\n  File \"D:\\ui\\pageobject\\terminal_page.py\", line 21, in switch_to_terminal_center\n    focus_ele = self.get_element(focus)\n  File \"D:\\ui\\basepage\\base_page.py\", line 126, in get_element\n    w_element = self.driver.find_element(By.XPATH, value=args_value)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 742, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0},{"name":"play_bill_page","time":{"start":1714961748960,"stop":1714961748960,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"release_page","time":{"start":1714961748960,"stop":1714961748960,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"play_bill_page::0","time":{"start":1714961749420,"stop":1714961749420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"release_page::0","time":{"start":1714961749428,"stop":1714961749432,"duration":4},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF70D2C78A2+54818]\n\t(No symbol) [0x00007FF70D236AD2]\n\t(No symbol) [0x00007FF70D0ED8ED]\n\t(No symbol) [0x00007FF70D1230DE]\n\t(No symbol) [0x00007FF70D14E9A2]\n\t(No symbol) [0x00007FF70D14A710]\n\t(No symbol) [0x00007FF70D14A016]\n\t(No symbol) [0x00007FF70D0C41D0]\n\tGetHandleVerifier [0x00007FF70D62B9A2+3610402]\n\tGetHandleVerifier [0x00007FF70D681870+3962352]\n\tGetHandleVerifier [0x00007FF70D679D5F+3930847]\n\tGetHandleVerifier [0x00007FF70D363656+693206]\n\t(No symbol) [0x00007FF70D241638]\n\t(No symbol) [0x00007FF70D0C2FFE]\n\tGetHandleVerifier [0x00007FF70D6C2288+4227080]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n","statusTrace":"  File \"D:\\sw_install\\python-install\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\_pytest\\fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\ui\\test_case\\test_play_bill.py\", line 21, in release_page\n    driver.close()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 459, in close\n    self.execute(Command.CLOSE)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0},{"name":"driver::0","time":{"start":1714962305635,"stop":1714962308276,"duration":2641},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"driver::0","time":{"start":1714962310522,"stop":1714962312794,"duration":2272},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"play bill list"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=4)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_play_bill"},{"name":"subSuite","value":"TestPlayBill"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"27604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_play_bill"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=4)"]},"source":"cb6f538219a342bc.json","parameterValues":[]}