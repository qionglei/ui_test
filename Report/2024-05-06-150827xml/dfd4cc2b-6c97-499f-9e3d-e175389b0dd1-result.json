{"name": "删除机构-取消删除", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 415). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-4176-0\" aria-describedby=\"el-id-4176-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2DA3B]\n\t(No symbol) [0x00007FF6ECF747CB]\n\t(No symbol) [0x00007FF6ECF72B99]\n\t(No symbol) [0x00007FF6ECF70968]\n\t(No symbol) [0x00007FF6ECF6FA23]\n\t(No symbol) [0x00007FF6ECF6571F]\n\t(No symbol) [0x00007FF6ECF8EAAA]\n\t(No symbol) [0x00007FF6ECF65036]\n\t(No symbol) [0x00007FF6ECF8ECC0]\n\t(No symbol) [0x00007FF6ECFA75A2]\n\t(No symbol) [0x00007FF6ECF8E883]\n\t(No symbol) [0x00007FF6ECF63691]\n\t(No symbol) [0x00007FF6ECF648D4]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ED07D944]\n\t(No symbol) [0x00007FF6ED07DA72]\n\t(No symbol) [0x00007FF6ED06E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]", "trace": "self = <test_case.test_system_management.TestSystemManagement object at 0x0000018D534F4DF0>\n\n    @allure.title(\"删除机构-取消删除\")\n    @pytest.mark.run(order=5)\n    def test_add_org_cancel(self):\n        system_page = self.system_page\n        time.sleep(0.5)\n        with step(\"左侧栏进入系统管理模块\"):\n>           system_page.switch_to_system_management()\n\ntest_case\\test_system_management.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\system_page.py:51: in switch_to_system_management\n    self.click(system_mana_icon)\nbasepage\\base_page.py:240: in click\n    e1.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018D79EA5510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6ED06E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE159257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE202AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 415). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-4176-0\" aria-describedby=\"el-id-4176-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6ED1078A2+54818]\nE       \t(No symbol) [0x00007FF6ED076AD2]\nE       \t(No symbol) [0x00007FF6ECF2DA3B]\nE       \t(No symbol) [0x00007FF6ECF747CB]\nE       \t(No symbol) [0x00007FF6ECF72B99]\nE       \t(No symbol) [0x00007FF6ECF70968]\nE       \t(No symbol) [0x00007FF6ECF6FA23]\nE       \t(No symbol) [0x00007FF6ECF6571F]\nE       \t(No symbol) [0x00007FF6ECF8EAAA]\nE       \t(No symbol) [0x00007FF6ECF65036]\nE       \t(No symbol) [0x00007FF6ECF8ECC0]\nE       \t(No symbol) [0x00007FF6ECFA75A2]\nE       \t(No symbol) [0x00007FF6ECF8E883]\nE       \t(No symbol) [0x00007FF6ECF63691]\nE       \t(No symbol) [0x00007FF6ECF648D4]\nE       \tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\nE       \tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF6ED1A3656+693206]\nE       \t(No symbol) [0x00007FF6ED081638]\nE       \t(No symbol) [0x00007FF6ED07D944]\nE       \t(No symbol) [0x00007FF6ED07DA72]\nE       \t(No symbol) [0x00007FF6ED06E123]\nE       \tBaseThreadInitThunk [0x00007FFEE159257D+29]\nE       \tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "左侧栏进入系统管理模块", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-72604ddf=\"\" class=\"menu-item\">...</div> is not clickable at point (60, 415). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"el-id-4176-0\" aria-describedby=\"el-id-4176-1\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6ED1078A2+54818]\n\t(No symbol) [0x00007FF6ED076AD2]\n\t(No symbol) [0x00007FF6ECF2DA3B]\n\t(No symbol) [0x00007FF6ECF747CB]\n\t(No symbol) [0x00007FF6ECF72B99]\n\t(No symbol) [0x00007FF6ECF70968]\n\t(No symbol) [0x00007FF6ECF6FA23]\n\t(No symbol) [0x00007FF6ECF6571F]\n\t(No symbol) [0x00007FF6ECF8EAAA]\n\t(No symbol) [0x00007FF6ECF65036]\n\t(No symbol) [0x00007FF6ECF8ECC0]\n\t(No symbol) [0x00007FF6ECFA75A2]\n\t(No symbol) [0x00007FF6ECF8E883]\n\t(No symbol) [0x00007FF6ECF63691]\n\t(No symbol) [0x00007FF6ECF648D4]\n\tGetHandleVerifier [0x00007FF6ED46B9A2+3610402]\n\tGetHandleVerifier [0x00007FF6ED4C1870+3962352]\n\tGetHandleVerifier [0x00007FF6ED4B9D5F+3930847]\n\tGetHandleVerifier [0x00007FF6ED1A3656+693206]\n\t(No symbol) [0x00007FF6ED081638]\n\t(No symbol) [0x00007FF6ED07D944]\n\t(No symbol) [0x00007FF6ED07DA72]\n\t(No symbol) [0x00007FF6ED06E123]\n\tBaseThreadInitThunk [0x00007FFEE159257D+29]\n\tRtlUserThreadStart [0x00007FFEE202AA58+40]\n\n", "trace": "  File \"D:\\ui\\test_case\\test_system_management.py\", line 141, in test_add_org_cancel\n    system_page.switch_to_system_management()\n  File \"D:\\ui\\pageobject\\system_page.py\", line 51, in switch_to_system_management\n    self.click(system_mana_icon)\n  File \"D:\\ui\\basepage\\base_page.py\", line 240, in click\n    e1.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1714979727209, "stop": 1714979729436}], "start": 1714979726694, "stop": 1714979729436, "uuid": "67bc1d30-cbe6-4ff9-9765-d9fad811c158", "historyId": "27322c8d6f27b61ad56adf41eea78c06", "testCaseId": "27322c8d6f27b61ad56adf41eea78c06", "fullName": "test_case.test_system_management.TestSystemManagement#test_add_org_cancel", "labels": [{"name": "epic", "value": "项目hkc"}, {"name": "feature", "value": "system management"}, {"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('system_page')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_system_management"}, {"name": "subSuite", "value": "TestSystemManagement"}, {"name": "host", "value": "hkc0208725"}, {"name": "thread", "value": "35244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_system_management"}]}