{"uid":"76834e29bd9a311e","name":"使用状态过滤，过滤审批中节目单","fullName":"test_case.test_play_bill.TestPlayBill#test_filter_in_process_approve_status","historyId":"2c88cf15a7e5b53468043ab68c2fb497","time":{"start":1718612767031,"stop":1718612768149,"duration":1118},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-06d105f8=\"\" src=\"/images/publish/publish2.png\" alt=\"\"> is not clickable at point (190, 127). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-describedby=\"el-id-2177-95\" class=\"el-overlay-message-box\" aria-label=\"提示\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72C4D78A2+54818]\n\t(No symbol) [0x00007FF72C446AD2]\n\t(No symbol) [0x00007FF72C2FDA3B]\n\t(No symbol) [0x00007FF72C3447CB]\n\t(No symbol) [0x00007FF72C342B99]\n\t(No symbol) [0x00007FF72C340968]\n\t(No symbol) [0x00007FF72C33FA23]\n\t(No symbol) [0x00007FF72C33571F]\n\t(No symbol) [0x00007FF72C35EAAA]\n\t(No symbol) [0x00007FF72C335036]\n\t(No symbol) [0x00007FF72C35ECC0]\n\t(No symbol) [0x00007FF72C3775A2]\n\t(No symbol) [0x00007FF72C35E883]\n\t(No symbol) [0x00007FF72C333691]\n\t(No symbol) [0x00007FF72C3348D4]\n\tGetHandleVerifier [0x00007FF72C83B9A2+3610402]\n\tGetHandleVerifier [0x00007FF72C891870+3962352]\n\tGetHandleVerifier [0x00007FF72C889D5F+3930847]\n\tGetHandleVerifier [0x00007FF72C573656+693206]\n\t(No symbol) [0x00007FF72C451638]\n\t(No symbol) [0x00007FF72C44D944]\n\t(No symbol) [0x00007FF72C44DA72]\n\t(No symbol) [0x00007FF72C43E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_play_bill.TestPlayBill object at 0x00000144C0A50B20>\n\n    @pytest.mark.run(order=12)\n    @allure.title(\"使用状态过滤，过滤审批中节目单\")\n    def test_filter_in_process_approve_status(self):\n        play_bill_page = self.play_bill_page\n        release_page = self.release_page\n    \n        with step(\"侧边栏切到到发布管理\"):\n            play_bill_page.switch_to_release_management()\n    \n        with step(\"发布管理中，切到节目单\"):\n>           play_bill_page.switch_to_play_bill()\n\ntest_case\\test_play_bill.py:391: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\play_bill_page.py:39: in switch_to_play_bill\n    self.click(play_bill_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000144E7576470>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72C43E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-06d105f8=\"\" src=\"/images/publish/publish2.png\" alt=\"\"> is not clickable at point (190, 127). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-describedby=\"el-id-2177-95\" class=\"el-overlay-message-box\" aria-label=\"提示\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72C4D78A2+54818]\nE       \t(No symbol) [0x00007FF72C446AD2]\nE       \t(No symbol) [0x00007FF72C2FDA3B]\nE       \t(No symbol) [0x00007FF72C3447CB]\nE       \t(No symbol) [0x00007FF72C342B99]\nE       \t(No symbol) [0x00007FF72C340968]\nE       \t(No symbol) [0x00007FF72C33FA23]\nE       \t(No symbol) [0x00007FF72C33571F]\nE       \t(No symbol) [0x00007FF72C35EAAA]\nE       \t(No symbol) [0x00007FF72C335036]\nE       \t(No symbol) [0x00007FF72C35ECC0]\nE       \t(No symbol) [0x00007FF72C3775A2]\nE       \t(No symbol) [0x00007FF72C35E883]\nE       \t(No symbol) [0x00007FF72C333691]\nE       \t(No symbol) [0x00007FF72C3348D4]\nE       \tGetHandleVerifier [0x00007FF72C83B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF72C891870+3962352]\nE       \tGetHandleVerifier [0x00007FF72C889D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF72C573656+693206]\nE       \t(No symbol) [0x00007FF72C451638]\nE       \t(No symbol) [0x00007FF72C44D944]\nE       \t(No symbol) [0x00007FF72C44DA72]\nE       \t(No symbol) [0x00007FF72C43E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env","time":{"start":1718612337236,"stop":1718612337236,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1718612337236,"stop":1718612346754,"duration":9518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"release_page","time":{"start":1718612346754,"stop":1718612346755,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"init_play_bill","time":{"start":1718612346755,"stop":1718612347455,"duration":700},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"play_bill_page","time":{"start":1718612346755,"stop":1718612346755,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-06d105f8=\"\" src=\"/images/publish/publish2.png\" alt=\"\"> is not clickable at point (190, 127). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-describedby=\"el-id-2177-95\" class=\"el-overlay-message-box\" aria-label=\"提示\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72C4D78A2+54818]\n\t(No symbol) [0x00007FF72C446AD2]\n\t(No symbol) [0x00007FF72C2FDA3B]\n\t(No symbol) [0x00007FF72C3447CB]\n\t(No symbol) [0x00007FF72C342B99]\n\t(No symbol) [0x00007FF72C340968]\n\t(No symbol) [0x00007FF72C33FA23]\n\t(No symbol) [0x00007FF72C33571F]\n\t(No symbol) [0x00007FF72C35EAAA]\n\t(No symbol) [0x00007FF72C335036]\n\t(No symbol) [0x00007FF72C35ECC0]\n\t(No symbol) [0x00007FF72C3775A2]\n\t(No symbol) [0x00007FF72C35E883]\n\t(No symbol) [0x00007FF72C333691]\n\t(No symbol) [0x00007FF72C3348D4]\n\tGetHandleVerifier [0x00007FF72C83B9A2+3610402]\n\tGetHandleVerifier [0x00007FF72C891870+3962352]\n\tGetHandleVerifier [0x00007FF72C889D5F+3930847]\n\tGetHandleVerifier [0x00007FF72C573656+693206]\n\t(No symbol) [0x00007FF72C451638]\n\t(No symbol) [0x00007FF72C44D944]\n\t(No symbol) [0x00007FF72C44DA72]\n\t(No symbol) [0x00007FF72C43E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]","statusTrace":"self = <test_case.test_play_bill.TestPlayBill object at 0x00000144C0A50B20>\n\n    @pytest.mark.run(order=12)\n    @allure.title(\"使用状态过滤，过滤审批中节目单\")\n    def test_filter_in_process_approve_status(self):\n        play_bill_page = self.play_bill_page\n        release_page = self.release_page\n    \n        with step(\"侧边栏切到到发布管理\"):\n            play_bill_page.switch_to_release_management()\n    \n        with step(\"发布管理中，切到节目单\"):\n>           play_bill_page.switch_to_play_bill()\n\ntest_case\\test_play_bill.py:391: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\play_bill_page.py:39: in switch_to_play_bill\n    self.click(play_bill_locator)\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000144E7576470>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72C43E123]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-06d105f8=\"\" src=\"/images/publish/publish2.png\" alt=\"\"> is not clickable at point (190, 127). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-describedby=\"el-id-2177-95\" class=\"el-overlay-message-box\" aria-label=\"提示\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72C4D78A2+54818]\nE       \t(No symbol) [0x00007FF72C446AD2]\nE       \t(No symbol) [0x00007FF72C2FDA3B]\nE       \t(No symbol) [0x00007FF72C3447CB]\nE       \t(No symbol) [0x00007FF72C342B99]\nE       \t(No symbol) [0x00007FF72C340968]\nE       \t(No symbol) [0x00007FF72C33FA23]\nE       \t(No symbol) [0x00007FF72C33571F]\nE       \t(No symbol) [0x00007FF72C35EAAA]\nE       \t(No symbol) [0x00007FF72C335036]\nE       \t(No symbol) [0x00007FF72C35ECC0]\nE       \t(No symbol) [0x00007FF72C3775A2]\nE       \t(No symbol) [0x00007FF72C35E883]\nE       \t(No symbol) [0x00007FF72C333691]\nE       \t(No symbol) [0x00007FF72C3348D4]\nE       \tGetHandleVerifier [0x00007FF72C83B9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF72C891870+3962352]\nE       \tGetHandleVerifier [0x00007FF72C889D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF72C573656+693206]\nE       \t(No symbol) [0x00007FF72C451638]\nE       \t(No symbol) [0x00007FF72C44D944]\nE       \t(No symbol) [0x00007FF72C44DA72]\nE       \t(No symbol) [0x00007FF72C43E123]\nE       \tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"侧边栏切到到发布管理","time":{"start":1718612767031,"stop":1718612767059,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"发布管理中，切到节目单","time":{"start":1718612767059,"stop":1718612768149,"duration":1090},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-06d105f8=\"\" src=\"/images/publish/publish2.png\" alt=\"\"> is not clickable at point (190, 127). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-describedby=\"el-id-2177-95\" class=\"el-overlay-message-box\" aria-label=\"提示\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72C4D78A2+54818]\n\t(No symbol) [0x00007FF72C446AD2]\n\t(No symbol) [0x00007FF72C2FDA3B]\n\t(No symbol) [0x00007FF72C3447CB]\n\t(No symbol) [0x00007FF72C342B99]\n\t(No symbol) [0x00007FF72C340968]\n\t(No symbol) [0x00007FF72C33FA23]\n\t(No symbol) [0x00007FF72C33571F]\n\t(No symbol) [0x00007FF72C35EAAA]\n\t(No symbol) [0x00007FF72C335036]\n\t(No symbol) [0x00007FF72C35ECC0]\n\t(No symbol) [0x00007FF72C3775A2]\n\t(No symbol) [0x00007FF72C35E883]\n\t(No symbol) [0x00007FF72C333691]\n\t(No symbol) [0x00007FF72C3348D4]\n\tGetHandleVerifier [0x00007FF72C83B9A2+3610402]\n\tGetHandleVerifier [0x00007FF72C891870+3962352]\n\tGetHandleVerifier [0x00007FF72C889D5F+3930847]\n\tGetHandleVerifier [0x00007FF72C573656+693206]\n\t(No symbol) [0x00007FF72C451638]\n\t(No symbol) [0x00007FF72C44D944]\n\t(No symbol) [0x00007FF72C44DA72]\n\t(No symbol) [0x00007FF72C43E123]\n\tBaseThreadInitThunk [0x00007FFF5C2B257D+29]\n\tRtlUserThreadStart [0x00007FFF5CCCAA48+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_play_bill.py\", line 391, in test_filter_in_process_approve_status\n    play_bill_page.switch_to_play_bill()\n  File \"D:\\git\\ui_test\\pageobject\\play_bill_page.py\", line 39, in switch_to_play_bill\n    self.click(play_bill_locator)\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2},"afterStages":[{"name":"play_bill_page::0","time":{"start":1718612902534,"stop":1718612902715,"duration":181},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"release_page::0","time":{"start":1718612902715,"stop":1718612902715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"driver::0","time":{"start":1718612902730,"stop":1718612907348,"duration":4618},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"play bill list"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=12)"},{"name":"tag","value":"@pytest.mark.usefixtures('release_page')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_play_bill"},{"name":"subSuite","value":"TestPlayBill"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"38096-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_play_bill"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('release_page')","run(order=12)"]},"source":"76834e29bd9a311e.json","parameterValues":[]}