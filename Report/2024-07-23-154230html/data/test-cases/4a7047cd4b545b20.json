{"uid":"4a7047cd4b545b20","name":"查看设备中心-组织架构，切换到设备分组tab和组织架构tab","fullName":"test_case.test_terminal_center.TestTerminalCenter#test_switch_group_and_org","historyId":"0749d815fa845840bebd48b61334c1a9","time":{"start":1721721337545,"stop":1721721339263,"duration":1718},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\">...</span> is not clickable at point (974, 152). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6750-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485E47CB]\n\t(No symbol) [0x00007FF6485E2B99]\n\t(No symbol) [0x00007FF6485E0968]\n\t(No symbol) [0x00007FF6485DFA23]\n\t(No symbol) [0x00007FF6485D571F]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6485D5036]\n\t(No symbol) [0x00007FF6485FECC0]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000024BE26AAF20>\n\n    @pytest.mark.usefixtures('terminal_set_up')\n    @allure.title(\"查看设备中心-组织架构，切换到设备分组tab和组织架构tab\")\n    @pytest.mark.run(order=16)\n    def test_switch_group_and_org(self):\n        terminal_page = self.terminal_page\n        terminal_page.switch_to_terminal_center()\n        time.sleep(0.5)\n        with step(\"点击组织架构按钮\"):\n>           terminal_page.click_terminal_org_tree()\n\ntest_case\\test_terminal_center.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:518: in click_terminal_org_tree\n    raise e\npageobject\\terminal_page.py:516: in click_terminal_org_tree\n    self.click('by_xpath,//div[@class=\"org-btn\"]/span[text()=\"组织架构\"]')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024BFF29DE40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6486DE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FF949A7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF949BCAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\">...</span> is not clickable at point (974, 152). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6750-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6487778A2+54818]\nE       \t(No symbol) [0x00007FF6486E6AD2]\nE       \t(No symbol) [0x00007FF64859DA3B]\nE       \t(No symbol) [0x00007FF6485E47CB]\nE       \t(No symbol) [0x00007FF6485E2B99]\nE       \t(No symbol) [0x00007FF6485E0968]\nE       \t(No symbol) [0x00007FF6485DFA23]\nE       \t(No symbol) [0x00007FF6485D571F]\nE       \t(No symbol) [0x00007FF6485FEAAA]\nE       \t(No symbol) [0x00007FF6485D5036]\nE       \t(No symbol) [0x00007FF6485FECC0]\nE       \t(No symbol) [0x00007FF6486175A2]\nE       \t(No symbol) [0x00007FF6485FE883]\nE       \t(No symbol) [0x00007FF6485D3691]\nE       \t(No symbol) [0x00007FF6485D48D4]\nE       \tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF648B31870+3962352]\nE       \tGetHandleVerifier [0x00007FF648B29D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF648813656+693206]\nE       \t(No symbol) [0x00007FF6486F1638]\nE       \t(No symbol) [0x00007FF6486ED944]\nE       \t(No symbol) [0x00007FF6486EDA72]\nE       \t(No symbol) [0x00007FF6486DE123]\nE       \tBaseThreadInitThunk [0x00007FF949A7257D+29]\nE       \tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1721720558536,"stop":1721720558689,"duration":153},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"env","time":{"start":1721720558689,"stop":1721720558690,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1721720558690,"stop":1721720569251,"duration":10561},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"set_up_org","time":{"start":1721720569252,"stop":1721720570592,"duration":1340},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"sys_page","time":{"start":1721720570594,"stop":1721720570595,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"terminal_page","time":{"start":1721720570595,"stop":1721720570595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"terminal_set_up","time":{"start":1721721243290,"stop":1721721337544,"duration":94254},"status":"passed","steps":[{"name":"点击设备接入","time":{"start":1721721263437,"stop":1721721264127,"duration":690},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备sn码","time":{"start":1721721264641,"stop":1721721264834,"duration":193},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入设备名称","time":{"start":1721721265348,"stop":1721721265477,"duration":129},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"先点击所属机构","time":{"start":1721721265984,"stop":1721721266126,"duration":142},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框展开组织架构","time":{"start":1721721266634,"stop":1721721274625,"duration":7991},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"在下拉框进行选择","time":{"start":1721721275131,"stop":1721721296185,"duration":21054},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击保存按钮","time":{"start":1721721296690,"stop":1721721337043,"duration":40353},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":7,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\">...</span> is not clickable at point (974, 152). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6750-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485E47CB]\n\t(No symbol) [0x00007FF6485E2B99]\n\t(No symbol) [0x00007FF6485E0968]\n\t(No symbol) [0x00007FF6485DFA23]\n\t(No symbol) [0x00007FF6485D571F]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6485D5036]\n\t(No symbol) [0x00007FF6485FECC0]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]","statusTrace":"self = <test_case.test_terminal_center.TestTerminalCenter object at 0x0000024BE26AAF20>\n\n    @pytest.mark.usefixtures('terminal_set_up')\n    @allure.title(\"查看设备中心-组织架构，切换到设备分组tab和组织架构tab\")\n    @pytest.mark.run(order=16)\n    def test_switch_group_and_org(self):\n        terminal_page = self.terminal_page\n        terminal_page.switch_to_terminal_center()\n        time.sleep(0.5)\n        with step(\"点击组织架构按钮\"):\n>           terminal_page.click_terminal_org_tree()\n\ntest_case\\test_terminal_center.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\terminal_page.py:518: in click_terminal_org_tree\n    raise e\npageobject\\terminal_page.py:516: in click_terminal_org_tree\n    self.click('by_xpath,//div[@class=\"org-btn\"]/span[text()=\"组织架构\"]')\nbasepage\\base_page.py:391: in click\n    element_to_click.click()\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024BFF29DE40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6486DE123]\\\\n\\\\tBaseThreadInitThunk [0x00007FF949A7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF949BCAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\">...</span> is not clickable at point (974, 152). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6750-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6487778A2+54818]\nE       \t(No symbol) [0x00007FF6486E6AD2]\nE       \t(No symbol) [0x00007FF64859DA3B]\nE       \t(No symbol) [0x00007FF6485E47CB]\nE       \t(No symbol) [0x00007FF6485E2B99]\nE       \t(No symbol) [0x00007FF6485E0968]\nE       \t(No symbol) [0x00007FF6485DFA23]\nE       \t(No symbol) [0x00007FF6485D571F]\nE       \t(No symbol) [0x00007FF6485FEAAA]\nE       \t(No symbol) [0x00007FF6485D5036]\nE       \t(No symbol) [0x00007FF6485FECC0]\nE       \t(No symbol) [0x00007FF6486175A2]\nE       \t(No symbol) [0x00007FF6485FE883]\nE       \t(No symbol) [0x00007FF6485D3691]\nE       \t(No symbol) [0x00007FF6485D48D4]\nE       \tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\nE       \tGetHandleVerifier [0x00007FF648B31870+3962352]\nE       \tGetHandleVerifier [0x00007FF648B29D5F+3930847]\nE       \tGetHandleVerifier [0x00007FF648813656+693206]\nE       \t(No symbol) [0x00007FF6486F1638]\nE       \t(No symbol) [0x00007FF6486ED944]\nE       \t(No symbol) [0x00007FF6486EDA72]\nE       \t(No symbol) [0x00007FF6486DE123]\nE       \tBaseThreadInitThunk [0x00007FF949A7257D+29]\nE       \tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\nD:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"点击组织架构按钮","time":{"start":1721721338085,"stop":1721721339254,"duration":1169},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-9c2770a4=\"\">...</span> is not clickable at point (974, 152). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" aria-label=\"设备接入\" aria-describedby=\"el-id-6750-51\" class=\"el-overlay-dialog\" style=\"display: flex;\">...</div>\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6487778A2+54818]\n\t(No symbol) [0x00007FF6486E6AD2]\n\t(No symbol) [0x00007FF64859DA3B]\n\t(No symbol) [0x00007FF6485E47CB]\n\t(No symbol) [0x00007FF6485E2B99]\n\t(No symbol) [0x00007FF6485E0968]\n\t(No symbol) [0x00007FF6485DFA23]\n\t(No symbol) [0x00007FF6485D571F]\n\t(No symbol) [0x00007FF6485FEAAA]\n\t(No symbol) [0x00007FF6485D5036]\n\t(No symbol) [0x00007FF6485FECC0]\n\t(No symbol) [0x00007FF6486175A2]\n\t(No symbol) [0x00007FF6485FE883]\n\t(No symbol) [0x00007FF6485D3691]\n\t(No symbol) [0x00007FF6485D48D4]\n\tGetHandleVerifier [0x00007FF648ADB9A2+3610402]\n\tGetHandleVerifier [0x00007FF648B31870+3962352]\n\tGetHandleVerifier [0x00007FF648B29D5F+3930847]\n\tGetHandleVerifier [0x00007FF648813656+693206]\n\t(No symbol) [0x00007FF6486F1638]\n\t(No symbol) [0x00007FF6486ED944]\n\t(No symbol) [0x00007FF6486EDA72]\n\t(No symbol) [0x00007FF6486DE123]\n\tBaseThreadInitThunk [0x00007FF949A7257D+29]\n\tRtlUserThreadStart [0x00007FF949BCAF28+40]\n\n","statusTrace":"  File \"D:\\git\\ui_test\\test_case\\test_terminal_center.py\", line 381, in test_switch_group_and_org\n    terminal_page.click_terminal_org_tree()\n  File \"D:\\git\\ui_test\\pageobject\\terminal_page.py\", line 518, in click_terminal_org_tree\n    raise e\n  File \"D:\\git\\ui_test\\pageobject\\terminal_page.py\", line 516, in click_terminal_org_tree\n    self.click('by_xpath,//div[@class=\"org-btn\"]/span[text()=\"组织架构\"]')\n  File \"D:\\git\\ui_test\\basepage\\base_page.py\", line 391, in click\n    element_to_click.click()\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\sw_install\\python-install\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"terminal_page::0","time":{"start":1721723140080,"stop":1721723140080,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"sys_page::0","time":{"start":1721723140084,"stop":1721723140084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver::0","time":{"start":1721723140091,"stop":1721723148632,"duration":8541},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"terminal_center"},{"name":"epic","value":"项目hkc"},{"name":"tag","value":"run(order=16)"},{"name":"tag","value":"@pytest.mark.usefixtures('terminal_set_up')"},{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_terminal_center"},{"name":"subSuite","value":"TestTerminalCenter"},{"name":"host","value":"hkc0208725"},{"name":"thread","value":"12856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_terminal_center"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('terminal_set_up')","run(order=16)"]},"source":"4a7047cd4b545b20.json","parameterValues":[]}